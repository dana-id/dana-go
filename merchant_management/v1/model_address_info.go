// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package merchant_management

/*
Merchant Management API

API for merchant management operations in DANA

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the AddressInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AddressInfo{}

// AddressInfo struct for AddressInfo
type AddressInfo struct {
	// Country
	Country *string `json:"country,omitempty"`
	// Province
	Province *string `json:"province,omitempty"`
	// City
	City *string `json:"city,omitempty"`
	// Area
	Area *string `json:"area,omitempty"`
	// Primary address line
	Address1 *string `json:"address1,omitempty"`
	// Secondary address line
	Address2 *string `json:"address2,omitempty"`
	// Postal code
	Postcode *string `json:"postcode,omitempty"`
	// Sub district
	SubDistrict *string `json:"subDistrict,omitempty"`
}

// NewAddressInfo instantiates a new AddressInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressInfo() *AddressInfo {
	this := AddressInfo{}
	return &this
}

// NewAddressInfoWithDefaults instantiates a new AddressInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressInfoWithDefaults() *AddressInfo {
	this := AddressInfo{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AddressInfo) GetCountry() string {
	if o == nil || utils.IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetCountryOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AddressInfo) HasCountry() bool {
	if o != nil && !utils.IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *AddressInfo) SetCountry(v string) {
	o.Country = &v
}

// GetProvince returns the Province field value if set, zero value otherwise.
func (o *AddressInfo) GetProvince() string {
	if o == nil || utils.IsNil(o.Province) {
		var ret string
		return ret
	}
	return *o.Province
}

// GetProvinceOk returns a tuple with the Province field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetProvinceOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Province) {
		return nil, false
	}
	return o.Province, true
}

// HasProvince returns a boolean if a field has been set.
func (o *AddressInfo) HasProvince() bool {
	if o != nil && !utils.IsNil(o.Province) {
		return true
	}

	return false
}

// SetProvince gets a reference to the given string and assigns it to the Province field.
func (o *AddressInfo) SetProvince(v string) {
	o.Province = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *AddressInfo) GetCity() string {
	if o == nil || utils.IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetCityOk() (*string, bool) {
	if o == nil || utils.IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *AddressInfo) HasCity() bool {
	if o != nil && !utils.IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *AddressInfo) SetCity(v string) {
	o.City = &v
}

// GetArea returns the Area field value if set, zero value otherwise.
func (o *AddressInfo) GetArea() string {
	if o == nil || utils.IsNil(o.Area) {
		var ret string
		return ret
	}
	return *o.Area
}

// GetAreaOk returns a tuple with the Area field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetAreaOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Area) {
		return nil, false
	}
	return o.Area, true
}

// HasArea returns a boolean if a field has been set.
func (o *AddressInfo) HasArea() bool {
	if o != nil && !utils.IsNil(o.Area) {
		return true
	}

	return false
}

// SetArea gets a reference to the given string and assigns it to the Area field.
func (o *AddressInfo) SetArea(v string) {
	o.Area = &v
}

// GetAddress1 returns the Address1 field value if set, zero value otherwise.
func (o *AddressInfo) GetAddress1() string {
	if o == nil || utils.IsNil(o.Address1) {
		var ret string
		return ret
	}
	return *o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetAddress1Ok() (*string, bool) {
	if o == nil || utils.IsNil(o.Address1) {
		return nil, false
	}
	return o.Address1, true
}

// HasAddress1 returns a boolean if a field has been set.
func (o *AddressInfo) HasAddress1() bool {
	if o != nil && !utils.IsNil(o.Address1) {
		return true
	}

	return false
}

// SetAddress1 gets a reference to the given string and assigns it to the Address1 field.
func (o *AddressInfo) SetAddress1(v string) {
	o.Address1 = &v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *AddressInfo) GetAddress2() string {
	if o == nil || utils.IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetAddress2Ok() (*string, bool) {
	if o == nil || utils.IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *AddressInfo) HasAddress2() bool {
	if o != nil && !utils.IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *AddressInfo) SetAddress2(v string) {
	o.Address2 = &v
}

// GetPostcode returns the Postcode field value if set, zero value otherwise.
func (o *AddressInfo) GetPostcode() string {
	if o == nil || utils.IsNil(o.Postcode) {
		var ret string
		return ret
	}
	return *o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetPostcodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Postcode) {
		return nil, false
	}
	return o.Postcode, true
}

// HasPostcode returns a boolean if a field has been set.
func (o *AddressInfo) HasPostcode() bool {
	if o != nil && !utils.IsNil(o.Postcode) {
		return true
	}

	return false
}

// SetPostcode gets a reference to the given string and assigns it to the Postcode field.
func (o *AddressInfo) SetPostcode(v string) {
	o.Postcode = &v
}

// GetSubDistrict returns the SubDistrict field value if set, zero value otherwise.
func (o *AddressInfo) GetSubDistrict() string {
	if o == nil || utils.IsNil(o.SubDistrict) {
		var ret string
		return ret
	}
	return *o.SubDistrict
}

// GetSubDistrictOk returns a tuple with the SubDistrict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressInfo) GetSubDistrictOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SubDistrict) {
		return nil, false
	}
	return o.SubDistrict, true
}

// HasSubDistrict returns a boolean if a field has been set.
func (o *AddressInfo) HasSubDistrict() bool {
	if o != nil && !utils.IsNil(o.SubDistrict) {
		return true
	}

	return false
}

// SetSubDistrict gets a reference to the given string and assigns it to the SubDistrict field.
func (o *AddressInfo) SetSubDistrict(v string) {
	o.SubDistrict = &v
}

func (o AddressInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !utils.IsNil(o.Province) {
		toSerialize["province"] = o.Province
	}
	if !utils.IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !utils.IsNil(o.Area) {
		toSerialize["area"] = o.Area
	}
	if !utils.IsNil(o.Address1) {
		toSerialize["address1"] = o.Address1
	}
	if !utils.IsNil(o.Address2) {
		toSerialize["address2"] = o.Address2
	}
	if !utils.IsNil(o.Postcode) {
		toSerialize["postcode"] = o.Postcode
	}
	if !utils.IsNil(o.SubDistrict) {
		toSerialize["subDistrict"] = o.SubDistrict
	}
	return toSerialize, nil
}

type NullableAddressInfo struct {
	value *AddressInfo
	isSet bool
}

func (v NullableAddressInfo) Get() *AddressInfo {
	return v.value
}

func (v *NullableAddressInfo) Set(val *AddressInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressInfo(val *AddressInfo) *NullableAddressInfo {
	return &NullableAddressInfo{value: val, isSet: true}
}

func (v NullableAddressInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


