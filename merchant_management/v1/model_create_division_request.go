// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package merchant_management

/*
Merchant Management API

API for merchant management operations in DANA

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the CreateDivisionRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateDivisionRequest{}

// CreateDivisionRequest struct for CreateDivisionRequest
type CreateDivisionRequest struct {
	// API Version. As per the respective API reference. Must be > 2
	ApiVersion string `json:"apiVersion"`
	// Merchant identifier
	MerchantId string `json:"merchantId"`
	// Parent division identifier. Required when parentRoleType is DIVISION or EXTERNAL_DIVISION. Length depends on parentRoleType - DIVISION (21 max), EXTERNAL_DIVISION (64 max)
	ParentDivisionId *string `json:"parentDivisionId,omitempty"`
	// Type of parent role
	ParentRoleType string `json:"parentRoleType"`
	// Division name
	DivisionName string `json:"divisionName"`
	DivisionAddress AddressInfo `json:"divisionAddress"`
	// Division description
	DivisionDescription *string `json:"divisionDescription,omitempty"`
	// Division type
	DivisionType string `json:"divisionType"`
	// External division identifier
	ExternalDivisionId string `json:"externalDivisionId"`
	// Logo URL map with base64 encoded images. Keys can be LOGO, PC_LOGO, MOBILE_LOGO
	LogoUrlMap map[string]string `json:"logoUrlMap,omitempty"`
	ExtInfo CreateDivisionRequestExtInfo `json:"extInfo"`
	// Merchant category codes
	MccCodes []string `json:"mccCodes"`
	// Business documents. \"individu\" entity can only use KTP and SIM. Other entities can use SIUP and NIB
	BusinessDocs []BusinessDocs `json:"businessDocs"`
	// Business entity type
	BusinessEntity string `json:"businessEntity"`
	OwnerName UserName `json:"ownerName"`
	OwnerPhoneNumber MobileNoInfo `json:"ownerPhoneNumber"`
	// Owner identifier type
	OwnerIdType string `json:"ownerIdType"`
	// Owner identifier number. Length depends on ownerIdType - KTP (16), SIM (12-14), Passport (8), NIB (>=13), SIUP (free text)
	OwnerIdNo string `json:"ownerIdNo"`
	OwnerAddress AddressInfo `json:"ownerAddress"`
	// Director as a PIC of sub merchant
	DirectorPics []PicInfo `json:"directorPics"`
	// Non director which become a PIC of sub merchant
	NonDirectorPics []PicInfo `json:"nonDirectorPics"`
	// Size type
	SizeType string `json:"sizeType"`
	// Flag if division is type PG
	PgDivisionFlag *string `json:"pgDivisionFlag,omitempty"`
}

type _CreateDivisionRequest CreateDivisionRequest

// NewCreateDivisionRequest instantiates a new CreateDivisionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDivisionRequest(apiVersion string, merchantId string, parentRoleType string, divisionName string, divisionAddress AddressInfo, divisionType string, externalDivisionId string, extInfo CreateDivisionRequestExtInfo, mccCodes []string, businessDocs []BusinessDocs, businessEntity string, ownerName UserName, ownerPhoneNumber MobileNoInfo, ownerIdType string, ownerIdNo string, ownerAddress AddressInfo, directorPics []PicInfo, nonDirectorPics []PicInfo, sizeType string) *CreateDivisionRequest {
	this := CreateDivisionRequest{}
	this.ApiVersion = apiVersion
	this.MerchantId = merchantId
	this.ParentRoleType = parentRoleType
	this.DivisionName = divisionName
	this.DivisionAddress = divisionAddress
	this.DivisionType = divisionType
	this.ExternalDivisionId = externalDivisionId
	this.ExtInfo = extInfo
	this.MccCodes = mccCodes
	this.BusinessDocs = businessDocs
	this.BusinessEntity = businessEntity
	this.OwnerName = ownerName
	this.OwnerPhoneNumber = ownerPhoneNumber
	this.OwnerIdType = ownerIdType
	this.OwnerIdNo = ownerIdNo
	this.OwnerAddress = ownerAddress
	this.DirectorPics = directorPics
	this.NonDirectorPics = nonDirectorPics
	this.SizeType = sizeType
	return &this
}

// NewCreateDivisionRequestWithDefaults instantiates a new CreateDivisionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDivisionRequestWithDefaults() *CreateDivisionRequest {
	this := CreateDivisionRequest{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *CreateDivisionRequest) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetApiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *CreateDivisionRequest) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetMerchantId returns the MerchantId field value
func (o *CreateDivisionRequest) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *CreateDivisionRequest) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetParentDivisionId returns the ParentDivisionId field value if set, zero value otherwise.
func (o *CreateDivisionRequest) GetParentDivisionId() string {
	if o == nil || utils.IsNil(o.ParentDivisionId) {
		var ret string
		return ret
	}
	return *o.ParentDivisionId
}

// GetParentDivisionIdOk returns a tuple with the ParentDivisionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetParentDivisionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ParentDivisionId) {
		return nil, false
	}
	return o.ParentDivisionId, true
}

// HasParentDivisionId returns a boolean if a field has been set.
func (o *CreateDivisionRequest) HasParentDivisionId() bool {
	if o != nil && !utils.IsNil(o.ParentDivisionId) {
		return true
	}

	return false
}

// SetParentDivisionId gets a reference to the given string and assigns it to the ParentDivisionId field.
func (o *CreateDivisionRequest) SetParentDivisionId(v string) {
	o.ParentDivisionId = &v
}

// GetParentRoleType returns the ParentRoleType field value
func (o *CreateDivisionRequest) GetParentRoleType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentRoleType
}

// GetParentRoleTypeOk returns a tuple with the ParentRoleType field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetParentRoleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentRoleType, true
}

// SetParentRoleType sets field value
func (o *CreateDivisionRequest) SetParentRoleType(v string) {
	o.ParentRoleType = v
}

// GetDivisionName returns the DivisionName field value
func (o *CreateDivisionRequest) GetDivisionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DivisionName
}

// GetDivisionNameOk returns a tuple with the DivisionName field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetDivisionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DivisionName, true
}

// SetDivisionName sets field value
func (o *CreateDivisionRequest) SetDivisionName(v string) {
	o.DivisionName = v
}

// GetDivisionAddress returns the DivisionAddress field value
func (o *CreateDivisionRequest) GetDivisionAddress() AddressInfo {
	if o == nil {
		var ret AddressInfo
		return ret
	}

	return o.DivisionAddress
}

// GetDivisionAddressOk returns a tuple with the DivisionAddress field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetDivisionAddressOk() (*AddressInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DivisionAddress, true
}

// SetDivisionAddress sets field value
func (o *CreateDivisionRequest) SetDivisionAddress(v AddressInfo) {
	o.DivisionAddress = v
}

// GetDivisionDescription returns the DivisionDescription field value if set, zero value otherwise.
func (o *CreateDivisionRequest) GetDivisionDescription() string {
	if o == nil || utils.IsNil(o.DivisionDescription) {
		var ret string
		return ret
	}
	return *o.DivisionDescription
}

// GetDivisionDescriptionOk returns a tuple with the DivisionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetDivisionDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DivisionDescription) {
		return nil, false
	}
	return o.DivisionDescription, true
}

// HasDivisionDescription returns a boolean if a field has been set.
func (o *CreateDivisionRequest) HasDivisionDescription() bool {
	if o != nil && !utils.IsNil(o.DivisionDescription) {
		return true
	}

	return false
}

// SetDivisionDescription gets a reference to the given string and assigns it to the DivisionDescription field.
func (o *CreateDivisionRequest) SetDivisionDescription(v string) {
	o.DivisionDescription = &v
}

// GetDivisionType returns the DivisionType field value
func (o *CreateDivisionRequest) GetDivisionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DivisionType
}

// GetDivisionTypeOk returns a tuple with the DivisionType field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetDivisionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DivisionType, true
}

// SetDivisionType sets field value
func (o *CreateDivisionRequest) SetDivisionType(v string) {
	o.DivisionType = v
}

// GetExternalDivisionId returns the ExternalDivisionId field value
func (o *CreateDivisionRequest) GetExternalDivisionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalDivisionId
}

// GetExternalDivisionIdOk returns a tuple with the ExternalDivisionId field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetExternalDivisionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalDivisionId, true
}

// SetExternalDivisionId sets field value
func (o *CreateDivisionRequest) SetExternalDivisionId(v string) {
	o.ExternalDivisionId = v
}

// GetLogoUrlMap returns the LogoUrlMap field value if set, zero value otherwise.
func (o *CreateDivisionRequest) GetLogoUrlMap() map[string]string {
	if o == nil || utils.IsNil(o.LogoUrlMap) {
		var ret map[string]string
		return ret
	}
	return o.LogoUrlMap
}

// GetLogoUrlMapOk returns a tuple with the LogoUrlMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetLogoUrlMapOk() (map[string]string, bool) {
	if o == nil || utils.IsNil(o.LogoUrlMap) {
		return map[string]string{}, false
	}
	return o.LogoUrlMap, true
}

// HasLogoUrlMap returns a boolean if a field has been set.
func (o *CreateDivisionRequest) HasLogoUrlMap() bool {
	if o != nil && !utils.IsNil(o.LogoUrlMap) {
		return true
	}

	return false
}

// SetLogoUrlMap gets a reference to the given map[string]string and assigns it to the LogoUrlMap field.
func (o *CreateDivisionRequest) SetLogoUrlMap(v map[string]string) {
	o.LogoUrlMap = v
}

// GetExtInfo returns the ExtInfo field value
func (o *CreateDivisionRequest) GetExtInfo() CreateDivisionRequestExtInfo {
	if o == nil {
		var ret CreateDivisionRequestExtInfo
		return ret
	}

	return o.ExtInfo
}

// GetExtInfoOk returns a tuple with the ExtInfo field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetExtInfoOk() (*CreateDivisionRequestExtInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtInfo, true
}

// SetExtInfo sets field value
func (o *CreateDivisionRequest) SetExtInfo(v CreateDivisionRequestExtInfo) {
	o.ExtInfo = v
}

// GetMccCodes returns the MccCodes field value
func (o *CreateDivisionRequest) GetMccCodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MccCodes
}

// GetMccCodesOk returns a tuple with the MccCodes field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetMccCodesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MccCodes, true
}

// SetMccCodes sets field value
func (o *CreateDivisionRequest) SetMccCodes(v []string) {
	o.MccCodes = v
}

// GetBusinessDocs returns the BusinessDocs field value
func (o *CreateDivisionRequest) GetBusinessDocs() []BusinessDocs {
	if o == nil {
		var ret []BusinessDocs
		return ret
	}

	return o.BusinessDocs
}

// GetBusinessDocsOk returns a tuple with the BusinessDocs field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetBusinessDocsOk() ([]BusinessDocs, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessDocs, true
}

// SetBusinessDocs sets field value
func (o *CreateDivisionRequest) SetBusinessDocs(v []BusinessDocs) {
	o.BusinessDocs = v
}

// GetBusinessEntity returns the BusinessEntity field value
func (o *CreateDivisionRequest) GetBusinessEntity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BusinessEntity
}

// GetBusinessEntityOk returns a tuple with the BusinessEntity field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetBusinessEntityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BusinessEntity, true
}

// SetBusinessEntity sets field value
func (o *CreateDivisionRequest) SetBusinessEntity(v string) {
	o.BusinessEntity = v
}

// GetOwnerName returns the OwnerName field value
func (o *CreateDivisionRequest) GetOwnerName() UserName {
	if o == nil {
		var ret UserName
		return ret
	}

	return o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetOwnerNameOk() (*UserName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerName, true
}

// SetOwnerName sets field value
func (o *CreateDivisionRequest) SetOwnerName(v UserName) {
	o.OwnerName = v
}

// GetOwnerPhoneNumber returns the OwnerPhoneNumber field value
func (o *CreateDivisionRequest) GetOwnerPhoneNumber() MobileNoInfo {
	if o == nil {
		var ret MobileNoInfo
		return ret
	}

	return o.OwnerPhoneNumber
}

// GetOwnerPhoneNumberOk returns a tuple with the OwnerPhoneNumber field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetOwnerPhoneNumberOk() (*MobileNoInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerPhoneNumber, true
}

// SetOwnerPhoneNumber sets field value
func (o *CreateDivisionRequest) SetOwnerPhoneNumber(v MobileNoInfo) {
	o.OwnerPhoneNumber = v
}

// GetOwnerIdType returns the OwnerIdType field value
func (o *CreateDivisionRequest) GetOwnerIdType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerIdType
}

// GetOwnerIdTypeOk returns a tuple with the OwnerIdType field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetOwnerIdTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerIdType, true
}

// SetOwnerIdType sets field value
func (o *CreateDivisionRequest) SetOwnerIdType(v string) {
	o.OwnerIdType = v
}

// GetOwnerIdNo returns the OwnerIdNo field value
func (o *CreateDivisionRequest) GetOwnerIdNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerIdNo
}

// GetOwnerIdNoOk returns a tuple with the OwnerIdNo field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetOwnerIdNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerIdNo, true
}

// SetOwnerIdNo sets field value
func (o *CreateDivisionRequest) SetOwnerIdNo(v string) {
	o.OwnerIdNo = v
}

// GetOwnerAddress returns the OwnerAddress field value
func (o *CreateDivisionRequest) GetOwnerAddress() AddressInfo {
	if o == nil {
		var ret AddressInfo
		return ret
	}

	return o.OwnerAddress
}

// GetOwnerAddressOk returns a tuple with the OwnerAddress field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetOwnerAddressOk() (*AddressInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerAddress, true
}

// SetOwnerAddress sets field value
func (o *CreateDivisionRequest) SetOwnerAddress(v AddressInfo) {
	o.OwnerAddress = v
}

// GetDirectorPics returns the DirectorPics field value
func (o *CreateDivisionRequest) GetDirectorPics() []PicInfo {
	if o == nil {
		var ret []PicInfo
		return ret
	}

	return o.DirectorPics
}

// GetDirectorPicsOk returns a tuple with the DirectorPics field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetDirectorPicsOk() ([]PicInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectorPics, true
}

// SetDirectorPics sets field value
func (o *CreateDivisionRequest) SetDirectorPics(v []PicInfo) {
	o.DirectorPics = v
}

// GetNonDirectorPics returns the NonDirectorPics field value
func (o *CreateDivisionRequest) GetNonDirectorPics() []PicInfo {
	if o == nil {
		var ret []PicInfo
		return ret
	}

	return o.NonDirectorPics
}

// GetNonDirectorPicsOk returns a tuple with the NonDirectorPics field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetNonDirectorPicsOk() ([]PicInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonDirectorPics, true
}

// SetNonDirectorPics sets field value
func (o *CreateDivisionRequest) SetNonDirectorPics(v []PicInfo) {
	o.NonDirectorPics = v
}

// GetSizeType returns the SizeType field value
func (o *CreateDivisionRequest) GetSizeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SizeType
}

// GetSizeTypeOk returns a tuple with the SizeType field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetSizeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeType, true
}

// SetSizeType sets field value
func (o *CreateDivisionRequest) SetSizeType(v string) {
	o.SizeType = v
}

// GetPgDivisionFlag returns the PgDivisionFlag field value if set, zero value otherwise.
func (o *CreateDivisionRequest) GetPgDivisionFlag() string {
	if o == nil || utils.IsNil(o.PgDivisionFlag) {
		var ret string
		return ret
	}
	return *o.PgDivisionFlag
}

// GetPgDivisionFlagOk returns a tuple with the PgDivisionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDivisionRequest) GetPgDivisionFlagOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PgDivisionFlag) {
		return nil, false
	}
	return o.PgDivisionFlag, true
}

// HasPgDivisionFlag returns a boolean if a field has been set.
func (o *CreateDivisionRequest) HasPgDivisionFlag() bool {
	if o != nil && !utils.IsNil(o.PgDivisionFlag) {
		return true
	}

	return false
}

// SetPgDivisionFlag gets a reference to the given string and assigns it to the PgDivisionFlag field.
func (o *CreateDivisionRequest) SetPgDivisionFlag(v string) {
	o.PgDivisionFlag = &v
}

func (o CreateDivisionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDivisionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiVersion"] = o.ApiVersion
	toSerialize["merchantId"] = o.MerchantId
	if !utils.IsNil(o.ParentDivisionId) {
		toSerialize["parentDivisionId"] = o.ParentDivisionId
	}
	toSerialize["parentRoleType"] = o.ParentRoleType
	toSerialize["divisionName"] = o.DivisionName
	toSerialize["divisionAddress"] = o.DivisionAddress
	if !utils.IsNil(o.DivisionDescription) {
		toSerialize["divisionDescription"] = o.DivisionDescription
	}
	toSerialize["divisionType"] = o.DivisionType
	toSerialize["externalDivisionId"] = o.ExternalDivisionId
	if !utils.IsNil(o.LogoUrlMap) {
		toSerialize["logoUrlMap"] = o.LogoUrlMap
	}
	toSerialize["extInfo"] = o.ExtInfo
	toSerialize["mccCodes"] = o.MccCodes
	toSerialize["businessDocs"] = o.BusinessDocs
	toSerialize["businessEntity"] = o.BusinessEntity
	toSerialize["ownerName"] = o.OwnerName
	toSerialize["ownerPhoneNumber"] = o.OwnerPhoneNumber
	toSerialize["ownerIdType"] = o.OwnerIdType
	toSerialize["ownerIdNo"] = o.OwnerIdNo
	toSerialize["ownerAddress"] = o.OwnerAddress
	toSerialize["directorPics"] = o.DirectorPics
	toSerialize["nonDirectorPics"] = o.NonDirectorPics
	toSerialize["sizeType"] = o.SizeType
	if !utils.IsNil(o.PgDivisionFlag) {
		toSerialize["pgDivisionFlag"] = o.PgDivisionFlag
	}
	return toSerialize, nil
}

func (o *CreateDivisionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apiVersion",
		"merchantId",
		"parentRoleType",
		"divisionName",
		"divisionAddress",
		"divisionType",
		"externalDivisionId",
		"extInfo",
		"mccCodes",
		"businessDocs",
		"businessEntity",
		"ownerName",
		"ownerPhoneNumber",
		"ownerIdType",
		"ownerIdNo",
		"ownerAddress",
		"directorPics",
		"nonDirectorPics",
		"sizeType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDivisionRequest := _CreateDivisionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateDivisionRequest)

	if err != nil {
		return err
	}

	*o = CreateDivisionRequest(varCreateDivisionRequest)

	return err
}

type NullableCreateDivisionRequest struct {
	value *CreateDivisionRequest
	isSet bool
}

func (v NullableCreateDivisionRequest) Get() *CreateDivisionRequest {
	return v.value
}

func (v *NullableCreateDivisionRequest) Set(val *CreateDivisionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDivisionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDivisionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDivisionRequest(val *CreateDivisionRequest) *NullableCreateDivisionRequest {
	return &NullableCreateDivisionRequest{value: val, isSet: true}
}

func (v NullableCreateDivisionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDivisionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


