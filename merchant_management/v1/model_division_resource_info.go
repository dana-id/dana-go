// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package merchant_management

/*
Merchant Management API

API for merchant management operations in DANA

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the DivisionResourceInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DivisionResourceInfo{}

// DivisionResourceInfo struct for DivisionResourceInfo
type DivisionResourceInfo struct {
	// Division identifier
	DivisionId *string `json:"divisionId,omitempty"`
	// Merchant identifier
	MerchantId *string `json:"merchantId,omitempty"`
	// Parent role type
	ParentRoleType *string `json:"parentRoleType,omitempty"`
	ContactAddress *AddressInfo `json:"contactAddress,omitempty"`
	// Division description
	DivisionDescription *string `json:"divisionDescription,omitempty"`
	// Division type
	DivisionType *string `json:"divisionType,omitempty"`
	// Division name
	DivisionName *string `json:"divisionName,omitempty"`
	// External division identifier
	ExternalDivisionId *string `json:"externalDivisionId,omitempty"`
	// Flag if division is type PG
	PgDivisionFlag *string `json:"pgDivisionFlag,omitempty"`
}

// NewDivisionResourceInfo instantiates a new DivisionResourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDivisionResourceInfo() *DivisionResourceInfo {
	this := DivisionResourceInfo{}
	return &this
}

// NewDivisionResourceInfoWithDefaults instantiates a new DivisionResourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDivisionResourceInfoWithDefaults() *DivisionResourceInfo {
	this := DivisionResourceInfo{}
	return &this
}

// GetDivisionId returns the DivisionId field value if set, zero value otherwise.
func (o *DivisionResourceInfo) GetDivisionId() string {
	if o == nil || utils.IsNil(o.DivisionId) {
		var ret string
		return ret
	}
	return *o.DivisionId
}

// GetDivisionIdOk returns a tuple with the DivisionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivisionResourceInfo) GetDivisionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DivisionId) {
		return nil, false
	}
	return o.DivisionId, true
}

// HasDivisionId returns a boolean if a field has been set.
func (o *DivisionResourceInfo) HasDivisionId() bool {
	if o != nil && !utils.IsNil(o.DivisionId) {
		return true
	}

	return false
}

// SetDivisionId gets a reference to the given string and assigns it to the DivisionId field.
func (o *DivisionResourceInfo) SetDivisionId(v string) {
	o.DivisionId = &v
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *DivisionResourceInfo) GetMerchantId() string {
	if o == nil || utils.IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivisionResourceInfo) GetMerchantIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *DivisionResourceInfo) HasMerchantId() bool {
	if o != nil && !utils.IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *DivisionResourceInfo) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetParentRoleType returns the ParentRoleType field value if set, zero value otherwise.
func (o *DivisionResourceInfo) GetParentRoleType() string {
	if o == nil || utils.IsNil(o.ParentRoleType) {
		var ret string
		return ret
	}
	return *o.ParentRoleType
}

// GetParentRoleTypeOk returns a tuple with the ParentRoleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivisionResourceInfo) GetParentRoleTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ParentRoleType) {
		return nil, false
	}
	return o.ParentRoleType, true
}

// HasParentRoleType returns a boolean if a field has been set.
func (o *DivisionResourceInfo) HasParentRoleType() bool {
	if o != nil && !utils.IsNil(o.ParentRoleType) {
		return true
	}

	return false
}

// SetParentRoleType gets a reference to the given string and assigns it to the ParentRoleType field.
func (o *DivisionResourceInfo) SetParentRoleType(v string) {
	o.ParentRoleType = &v
}

// GetContactAddress returns the ContactAddress field value if set, zero value otherwise.
func (o *DivisionResourceInfo) GetContactAddress() AddressInfo {
	if o == nil || utils.IsNil(o.ContactAddress) {
		var ret AddressInfo
		return ret
	}
	return *o.ContactAddress
}

// GetContactAddressOk returns a tuple with the ContactAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivisionResourceInfo) GetContactAddressOk() (*AddressInfo, bool) {
	if o == nil || utils.IsNil(o.ContactAddress) {
		return nil, false
	}
	return o.ContactAddress, true
}

// HasContactAddress returns a boolean if a field has been set.
func (o *DivisionResourceInfo) HasContactAddress() bool {
	if o != nil && !utils.IsNil(o.ContactAddress) {
		return true
	}

	return false
}

// SetContactAddress gets a reference to the given AddressInfo and assigns it to the ContactAddress field.
func (o *DivisionResourceInfo) SetContactAddress(v AddressInfo) {
	o.ContactAddress = &v
}

// GetDivisionDescription returns the DivisionDescription field value if set, zero value otherwise.
func (o *DivisionResourceInfo) GetDivisionDescription() string {
	if o == nil || utils.IsNil(o.DivisionDescription) {
		var ret string
		return ret
	}
	return *o.DivisionDescription
}

// GetDivisionDescriptionOk returns a tuple with the DivisionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivisionResourceInfo) GetDivisionDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DivisionDescription) {
		return nil, false
	}
	return o.DivisionDescription, true
}

// HasDivisionDescription returns a boolean if a field has been set.
func (o *DivisionResourceInfo) HasDivisionDescription() bool {
	if o != nil && !utils.IsNil(o.DivisionDescription) {
		return true
	}

	return false
}

// SetDivisionDescription gets a reference to the given string and assigns it to the DivisionDescription field.
func (o *DivisionResourceInfo) SetDivisionDescription(v string) {
	o.DivisionDescription = &v
}

// GetDivisionType returns the DivisionType field value if set, zero value otherwise.
func (o *DivisionResourceInfo) GetDivisionType() string {
	if o == nil || utils.IsNil(o.DivisionType) {
		var ret string
		return ret
	}
	return *o.DivisionType
}

// GetDivisionTypeOk returns a tuple with the DivisionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivisionResourceInfo) GetDivisionTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DivisionType) {
		return nil, false
	}
	return o.DivisionType, true
}

// HasDivisionType returns a boolean if a field has been set.
func (o *DivisionResourceInfo) HasDivisionType() bool {
	if o != nil && !utils.IsNil(o.DivisionType) {
		return true
	}

	return false
}

// SetDivisionType gets a reference to the given string and assigns it to the DivisionType field.
func (o *DivisionResourceInfo) SetDivisionType(v string) {
	o.DivisionType = &v
}

// GetDivisionName returns the DivisionName field value if set, zero value otherwise.
func (o *DivisionResourceInfo) GetDivisionName() string {
	if o == nil || utils.IsNil(o.DivisionName) {
		var ret string
		return ret
	}
	return *o.DivisionName
}

// GetDivisionNameOk returns a tuple with the DivisionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivisionResourceInfo) GetDivisionNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DivisionName) {
		return nil, false
	}
	return o.DivisionName, true
}

// HasDivisionName returns a boolean if a field has been set.
func (o *DivisionResourceInfo) HasDivisionName() bool {
	if o != nil && !utils.IsNil(o.DivisionName) {
		return true
	}

	return false
}

// SetDivisionName gets a reference to the given string and assigns it to the DivisionName field.
func (o *DivisionResourceInfo) SetDivisionName(v string) {
	o.DivisionName = &v
}

// GetExternalDivisionId returns the ExternalDivisionId field value if set, zero value otherwise.
func (o *DivisionResourceInfo) GetExternalDivisionId() string {
	if o == nil || utils.IsNil(o.ExternalDivisionId) {
		var ret string
		return ret
	}
	return *o.ExternalDivisionId
}

// GetExternalDivisionIdOk returns a tuple with the ExternalDivisionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivisionResourceInfo) GetExternalDivisionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExternalDivisionId) {
		return nil, false
	}
	return o.ExternalDivisionId, true
}

// HasExternalDivisionId returns a boolean if a field has been set.
func (o *DivisionResourceInfo) HasExternalDivisionId() bool {
	if o != nil && !utils.IsNil(o.ExternalDivisionId) {
		return true
	}

	return false
}

// SetExternalDivisionId gets a reference to the given string and assigns it to the ExternalDivisionId field.
func (o *DivisionResourceInfo) SetExternalDivisionId(v string) {
	o.ExternalDivisionId = &v
}

// GetPgDivisionFlag returns the PgDivisionFlag field value if set, zero value otherwise.
func (o *DivisionResourceInfo) GetPgDivisionFlag() string {
	if o == nil || utils.IsNil(o.PgDivisionFlag) {
		var ret string
		return ret
	}
	return *o.PgDivisionFlag
}

// GetPgDivisionFlagOk returns a tuple with the PgDivisionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DivisionResourceInfo) GetPgDivisionFlagOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PgDivisionFlag) {
		return nil, false
	}
	return o.PgDivisionFlag, true
}

// HasPgDivisionFlag returns a boolean if a field has been set.
func (o *DivisionResourceInfo) HasPgDivisionFlag() bool {
	if o != nil && !utils.IsNil(o.PgDivisionFlag) {
		return true
	}

	return false
}

// SetPgDivisionFlag gets a reference to the given string and assigns it to the PgDivisionFlag field.
func (o *DivisionResourceInfo) SetPgDivisionFlag(v string) {
	o.PgDivisionFlag = &v
}

func (o DivisionResourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DivisionResourceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.DivisionId) {
		toSerialize["divisionId"] = o.DivisionId
	}
	if !utils.IsNil(o.MerchantId) {
		toSerialize["merchantId"] = o.MerchantId
	}
	if !utils.IsNil(o.ParentRoleType) {
		toSerialize["parentRoleType"] = o.ParentRoleType
	}
	if !utils.IsNil(o.ContactAddress) {
		toSerialize["contactAddress"] = o.ContactAddress
	}
	if !utils.IsNil(o.DivisionDescription) {
		toSerialize["divisionDescription"] = o.DivisionDescription
	}
	if !utils.IsNil(o.DivisionType) {
		toSerialize["divisionType"] = o.DivisionType
	}
	if !utils.IsNil(o.DivisionName) {
		toSerialize["divisionName"] = o.DivisionName
	}
	if !utils.IsNil(o.ExternalDivisionId) {
		toSerialize["externalDivisionId"] = o.ExternalDivisionId
	}
	if !utils.IsNil(o.PgDivisionFlag) {
		toSerialize["pgDivisionFlag"] = o.PgDivisionFlag
	}
	return toSerialize, nil
}

type NullableDivisionResourceInfo struct {
	value *DivisionResourceInfo
	isSet bool
}

func (v NullableDivisionResourceInfo) Get() *DivisionResourceInfo {
	return v.value
}

func (v *NullableDivisionResourceInfo) Set(val *DivisionResourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDivisionResourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDivisionResourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDivisionResourceInfo(val *DivisionResourceInfo) *NullableDivisionResourceInfo {
	return &NullableDivisionResourceInfo{value: val, isSet: true}
}

func (v NullableDivisionResourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDivisionResourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


