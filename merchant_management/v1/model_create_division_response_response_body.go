// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package merchant_management

/*
Merchant Management API

API for merchant management operations in DANA

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the CreateDivisionResponseResponseBody type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateDivisionResponseResponseBody{}

// CreateDivisionResponseResponseBody struct for CreateDivisionResponseResponseBody
type CreateDivisionResponseResponseBody struct {
	ResultInfo ResultInfo `json:"resultInfo"`
	// Division identifier. Present when successfully processed
	DivisionId *string `json:"divisionId,omitempty"`
}

type _CreateDivisionResponseResponseBody CreateDivisionResponseResponseBody

// NewCreateDivisionResponseResponseBody instantiates a new CreateDivisionResponseResponseBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDivisionResponseResponseBody(resultInfo ResultInfo) *CreateDivisionResponseResponseBody {
	this := CreateDivisionResponseResponseBody{}
	this.ResultInfo = resultInfo
	return &this
}

// NewCreateDivisionResponseResponseBodyWithDefaults instantiates a new CreateDivisionResponseResponseBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDivisionResponseResponseBodyWithDefaults() *CreateDivisionResponseResponseBody {
	this := CreateDivisionResponseResponseBody{}
	return &this
}

// GetResultInfo returns the ResultInfo field value
func (o *CreateDivisionResponseResponseBody) GetResultInfo() ResultInfo {
	if o == nil {
		var ret ResultInfo
		return ret
	}

	return o.ResultInfo
}

// GetResultInfoOk returns a tuple with the ResultInfo field value
// and a boolean to check if the value has been set.
func (o *CreateDivisionResponseResponseBody) GetResultInfoOk() (*ResultInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultInfo, true
}

// SetResultInfo sets field value
func (o *CreateDivisionResponseResponseBody) SetResultInfo(v ResultInfo) {
	o.ResultInfo = v
}

// GetDivisionId returns the DivisionId field value if set, zero value otherwise.
func (o *CreateDivisionResponseResponseBody) GetDivisionId() string {
	if o == nil || utils.IsNil(o.DivisionId) {
		var ret string
		return ret
	}
	return *o.DivisionId
}

// GetDivisionIdOk returns a tuple with the DivisionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDivisionResponseResponseBody) GetDivisionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DivisionId) {
		return nil, false
	}
	return o.DivisionId, true
}

// HasDivisionId returns a boolean if a field has been set.
func (o *CreateDivisionResponseResponseBody) HasDivisionId() bool {
	if o != nil && !utils.IsNil(o.DivisionId) {
		return true
	}

	return false
}

// SetDivisionId gets a reference to the given string and assigns it to the DivisionId field.
func (o *CreateDivisionResponseResponseBody) SetDivisionId(v string) {
	o.DivisionId = &v
}

func (o CreateDivisionResponseResponseBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDivisionResponseResponseBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resultInfo"] = o.ResultInfo
	if !utils.IsNil(o.DivisionId) {
		toSerialize["divisionId"] = o.DivisionId
	}
	return toSerialize, nil
}

func (o *CreateDivisionResponseResponseBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resultInfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDivisionResponseResponseBody := _CreateDivisionResponseResponseBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateDivisionResponseResponseBody)

	if err != nil {
		return err
	}

	*o = CreateDivisionResponseResponseBody(varCreateDivisionResponseResponseBody)

	return err
}

type NullableCreateDivisionResponseResponseBody struct {
	value *CreateDivisionResponseResponseBody
	isSet bool
}

func (v NullableCreateDivisionResponseResponseBody) Get() *CreateDivisionResponseResponseBody {
	return v.value
}

func (v *NullableCreateDivisionResponseResponseBody) Set(val *CreateDivisionResponseResponseBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDivisionResponseResponseBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDivisionResponseResponseBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDivisionResponseResponseBody(val *CreateDivisionResponseResponseBody) *NullableCreateDivisionResponseResponseBody {
	return &NullableCreateDivisionResponseResponseBody{value: val, isSet: true}
}

func (v NullableCreateDivisionResponseResponseBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDivisionResponseResponseBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


