// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package merchant_management

/*
Merchant Management API

API for merchant management operations in DANA

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the QueryDivisionRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &QueryDivisionRequest{}

// QueryDivisionRequest struct for QueryDivisionRequest
type QueryDivisionRequest struct {
	// Merchant identifier. Required when divisionIdType is EXTERNAL_ID
	MerchantId *string `json:"merchantId,omitempty"`
	// Division identifier or external identifier. Length depends on divisionIdType - INNER_ID (21 max), EXTERNAL_ID (64 max)
	DivisionId string `json:"divisionId"`
	// Division identifier type
	DivisionIdType string `json:"divisionIdType"`
}

type _QueryDivisionRequest QueryDivisionRequest

// NewQueryDivisionRequest instantiates a new QueryDivisionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryDivisionRequest(divisionId string, divisionIdType string) *QueryDivisionRequest {
	this := QueryDivisionRequest{}
	this.DivisionId = divisionId
	this.DivisionIdType = divisionIdType
	return &this
}

// NewQueryDivisionRequestWithDefaults instantiates a new QueryDivisionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryDivisionRequestWithDefaults() *QueryDivisionRequest {
	this := QueryDivisionRequest{}
	return &this
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *QueryDivisionRequest) GetMerchantId() string {
	if o == nil || utils.IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDivisionRequest) GetMerchantIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *QueryDivisionRequest) HasMerchantId() bool {
	if o != nil && !utils.IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *QueryDivisionRequest) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetDivisionId returns the DivisionId field value
func (o *QueryDivisionRequest) GetDivisionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DivisionId
}

// GetDivisionIdOk returns a tuple with the DivisionId field value
// and a boolean to check if the value has been set.
func (o *QueryDivisionRequest) GetDivisionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DivisionId, true
}

// SetDivisionId sets field value
func (o *QueryDivisionRequest) SetDivisionId(v string) {
	o.DivisionId = v
}

// GetDivisionIdType returns the DivisionIdType field value
func (o *QueryDivisionRequest) GetDivisionIdType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DivisionIdType
}

// GetDivisionIdTypeOk returns a tuple with the DivisionIdType field value
// and a boolean to check if the value has been set.
func (o *QueryDivisionRequest) GetDivisionIdTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DivisionIdType, true
}

// SetDivisionIdType sets field value
func (o *QueryDivisionRequest) SetDivisionIdType(v string) {
	o.DivisionIdType = v
}

func (o QueryDivisionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryDivisionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.MerchantId) {
		toSerialize["merchantId"] = o.MerchantId
	}
	toSerialize["divisionId"] = o.DivisionId
	toSerialize["divisionIdType"] = o.DivisionIdType
	return toSerialize, nil
}

func (o *QueryDivisionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"divisionId",
		"divisionIdType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryDivisionRequest := _QueryDivisionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryDivisionRequest)

	if err != nil {
		return err
	}

	*o = QueryDivisionRequest(varQueryDivisionRequest)

	return err
}

type NullableQueryDivisionRequest struct {
	value *QueryDivisionRequest
	isSet bool
}

func (v NullableQueryDivisionRequest) Get() *QueryDivisionRequest {
	return v.value
}

func (v *NullableQueryDivisionRequest) Set(val *QueryDivisionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryDivisionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryDivisionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryDivisionRequest(val *QueryDivisionRequest) *NullableQueryDivisionRequest {
	return &NullableQueryDivisionRequest{value: val, isSet: true}
}

func (v NullableQueryDivisionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryDivisionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


