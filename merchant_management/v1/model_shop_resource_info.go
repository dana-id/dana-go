// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package merchant_management

/*
Merchant Management API

API for merchant management operations in DANA

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the ShopResourceInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ShopResourceInfo{}

// ShopResourceInfo struct for ShopResourceInfo
type ShopResourceInfo struct {
	// Merchant identifier
	MerchantId *string `json:"merchantId,omitempty"`
	// Parent division identifier
	ParentDivisionId *string `json:"parentDivisionId,omitempty"`
	// Parent role type
	ParentRoleType *string `json:"parentRoleType,omitempty"`
	// Shop name
	MainName *string `json:"mainName,omitempty"`
	// Size type
	SizeType *string `json:"sizeType,omitempty"`
	ShopAddress *AddressInfo `json:"shopAddress,omitempty"`
	// External shop identifier
	ExternalShopId *string `json:"externalShopId,omitempty"`
	// Logo URL map with base64 encoded images
	LogoUrlMap map[string]string `json:"logoUrlMap,omitempty"`
	// Extended information
	ExtInfo map[string]interface{} `json:"extInfo,omitempty"`
	// Longitude
	Ln *string `json:"ln,omitempty"`
	// Latitude
	Lat *string `json:"lat,omitempty"`
	// Network merchant identifier
	Nmid *string `json:"nmid,omitempty"`
}

// NewShopResourceInfo instantiates a new ShopResourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShopResourceInfo() *ShopResourceInfo {
	this := ShopResourceInfo{}
	return &this
}

// NewShopResourceInfoWithDefaults instantiates a new ShopResourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShopResourceInfoWithDefaults() *ShopResourceInfo {
	this := ShopResourceInfo{}
	return &this
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetMerchantId() string {
	if o == nil || utils.IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetMerchantIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasMerchantId() bool {
	if o != nil && !utils.IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *ShopResourceInfo) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetParentDivisionId returns the ParentDivisionId field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetParentDivisionId() string {
	if o == nil || utils.IsNil(o.ParentDivisionId) {
		var ret string
		return ret
	}
	return *o.ParentDivisionId
}

// GetParentDivisionIdOk returns a tuple with the ParentDivisionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetParentDivisionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ParentDivisionId) {
		return nil, false
	}
	return o.ParentDivisionId, true
}

// HasParentDivisionId returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasParentDivisionId() bool {
	if o != nil && !utils.IsNil(o.ParentDivisionId) {
		return true
	}

	return false
}

// SetParentDivisionId gets a reference to the given string and assigns it to the ParentDivisionId field.
func (o *ShopResourceInfo) SetParentDivisionId(v string) {
	o.ParentDivisionId = &v
}

// GetParentRoleType returns the ParentRoleType field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetParentRoleType() string {
	if o == nil || utils.IsNil(o.ParentRoleType) {
		var ret string
		return ret
	}
	return *o.ParentRoleType
}

// GetParentRoleTypeOk returns a tuple with the ParentRoleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetParentRoleTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ParentRoleType) {
		return nil, false
	}
	return o.ParentRoleType, true
}

// HasParentRoleType returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasParentRoleType() bool {
	if o != nil && !utils.IsNil(o.ParentRoleType) {
		return true
	}

	return false
}

// SetParentRoleType gets a reference to the given string and assigns it to the ParentRoleType field.
func (o *ShopResourceInfo) SetParentRoleType(v string) {
	o.ParentRoleType = &v
}

// GetMainName returns the MainName field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetMainName() string {
	if o == nil || utils.IsNil(o.MainName) {
		var ret string
		return ret
	}
	return *o.MainName
}

// GetMainNameOk returns a tuple with the MainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetMainNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MainName) {
		return nil, false
	}
	return o.MainName, true
}

// HasMainName returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasMainName() bool {
	if o != nil && !utils.IsNil(o.MainName) {
		return true
	}

	return false
}

// SetMainName gets a reference to the given string and assigns it to the MainName field.
func (o *ShopResourceInfo) SetMainName(v string) {
	o.MainName = &v
}

// GetSizeType returns the SizeType field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetSizeType() string {
	if o == nil || utils.IsNil(o.SizeType) {
		var ret string
		return ret
	}
	return *o.SizeType
}

// GetSizeTypeOk returns a tuple with the SizeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetSizeTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SizeType) {
		return nil, false
	}
	return o.SizeType, true
}

// HasSizeType returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasSizeType() bool {
	if o != nil && !utils.IsNil(o.SizeType) {
		return true
	}

	return false
}

// SetSizeType gets a reference to the given string and assigns it to the SizeType field.
func (o *ShopResourceInfo) SetSizeType(v string) {
	o.SizeType = &v
}

// GetShopAddress returns the ShopAddress field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetShopAddress() AddressInfo {
	if o == nil || utils.IsNil(o.ShopAddress) {
		var ret AddressInfo
		return ret
	}
	return *o.ShopAddress
}

// GetShopAddressOk returns a tuple with the ShopAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetShopAddressOk() (*AddressInfo, bool) {
	if o == nil || utils.IsNil(o.ShopAddress) {
		return nil, false
	}
	return o.ShopAddress, true
}

// HasShopAddress returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasShopAddress() bool {
	if o != nil && !utils.IsNil(o.ShopAddress) {
		return true
	}

	return false
}

// SetShopAddress gets a reference to the given AddressInfo and assigns it to the ShopAddress field.
func (o *ShopResourceInfo) SetShopAddress(v AddressInfo) {
	o.ShopAddress = &v
}

// GetExternalShopId returns the ExternalShopId field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetExternalShopId() string {
	if o == nil || utils.IsNil(o.ExternalShopId) {
		var ret string
		return ret
	}
	return *o.ExternalShopId
}

// GetExternalShopIdOk returns a tuple with the ExternalShopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetExternalShopIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExternalShopId) {
		return nil, false
	}
	return o.ExternalShopId, true
}

// HasExternalShopId returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasExternalShopId() bool {
	if o != nil && !utils.IsNil(o.ExternalShopId) {
		return true
	}

	return false
}

// SetExternalShopId gets a reference to the given string and assigns it to the ExternalShopId field.
func (o *ShopResourceInfo) SetExternalShopId(v string) {
	o.ExternalShopId = &v
}

// GetLogoUrlMap returns the LogoUrlMap field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetLogoUrlMap() map[string]string {
	if o == nil || utils.IsNil(o.LogoUrlMap) {
		var ret map[string]string
		return ret
	}
	return o.LogoUrlMap
}

// GetLogoUrlMapOk returns a tuple with the LogoUrlMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetLogoUrlMapOk() (map[string]string, bool) {
	if o == nil || utils.IsNil(o.LogoUrlMap) {
		return map[string]string{}, false
	}
	return o.LogoUrlMap, true
}

// HasLogoUrlMap returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasLogoUrlMap() bool {
	if o != nil && !utils.IsNil(o.LogoUrlMap) {
		return true
	}

	return false
}

// SetLogoUrlMap gets a reference to the given map[string]string and assigns it to the LogoUrlMap field.
func (o *ShopResourceInfo) SetLogoUrlMap(v map[string]string) {
	o.LogoUrlMap = v
}

// GetExtInfo returns the ExtInfo field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetExtInfo() map[string]interface{} {
	if o == nil || utils.IsNil(o.ExtInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtInfo
}

// GetExtInfoOk returns a tuple with the ExtInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetExtInfoOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.ExtInfo) {
		return map[string]interface{}{}, false
	}
	return o.ExtInfo, true
}

// HasExtInfo returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasExtInfo() bool {
	if o != nil && !utils.IsNil(o.ExtInfo) {
		return true
	}

	return false
}

// SetExtInfo gets a reference to the given map[string]interface{} and assigns it to the ExtInfo field.
func (o *ShopResourceInfo) SetExtInfo(v map[string]interface{}) {
	o.ExtInfo = v
}

// GetLn returns the Ln field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetLn() string {
	if o == nil || utils.IsNil(o.Ln) {
		var ret string
		return ret
	}
	return *o.Ln
}

// GetLnOk returns a tuple with the Ln field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetLnOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Ln) {
		return nil, false
	}
	return o.Ln, true
}

// HasLn returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasLn() bool {
	if o != nil && !utils.IsNil(o.Ln) {
		return true
	}

	return false
}

// SetLn gets a reference to the given string and assigns it to the Ln field.
func (o *ShopResourceInfo) SetLn(v string) {
	o.Ln = &v
}

// GetLat returns the Lat field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetLat() string {
	if o == nil || utils.IsNil(o.Lat) {
		var ret string
		return ret
	}
	return *o.Lat
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetLatOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Lat) {
		return nil, false
	}
	return o.Lat, true
}

// HasLat returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasLat() bool {
	if o != nil && !utils.IsNil(o.Lat) {
		return true
	}

	return false
}

// SetLat gets a reference to the given string and assigns it to the Lat field.
func (o *ShopResourceInfo) SetLat(v string) {
	o.Lat = &v
}

// GetNmid returns the Nmid field value if set, zero value otherwise.
func (o *ShopResourceInfo) GetNmid() string {
	if o == nil || utils.IsNil(o.Nmid) {
		var ret string
		return ret
	}
	return *o.Nmid
}

// GetNmidOk returns a tuple with the Nmid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopResourceInfo) GetNmidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Nmid) {
		return nil, false
	}
	return o.Nmid, true
}

// HasNmid returns a boolean if a field has been set.
func (o *ShopResourceInfo) HasNmid() bool {
	if o != nil && !utils.IsNil(o.Nmid) {
		return true
	}

	return false
}

// SetNmid gets a reference to the given string and assigns it to the Nmid field.
func (o *ShopResourceInfo) SetNmid(v string) {
	o.Nmid = &v
}

func (o ShopResourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShopResourceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.MerchantId) {
		toSerialize["merchantId"] = o.MerchantId
	}
	if !utils.IsNil(o.ParentDivisionId) {
		toSerialize["parentDivisionId"] = o.ParentDivisionId
	}
	if !utils.IsNil(o.ParentRoleType) {
		toSerialize["parentRoleType"] = o.ParentRoleType
	}
	if !utils.IsNil(o.MainName) {
		toSerialize["mainName"] = o.MainName
	}
	if !utils.IsNil(o.SizeType) {
		toSerialize["sizeType"] = o.SizeType
	}
	if !utils.IsNil(o.ShopAddress) {
		toSerialize["shopAddress"] = o.ShopAddress
	}
	if !utils.IsNil(o.ExternalShopId) {
		toSerialize["externalShopId"] = o.ExternalShopId
	}
	if !utils.IsNil(o.LogoUrlMap) {
		toSerialize["logoUrlMap"] = o.LogoUrlMap
	}
	if !utils.IsNil(o.ExtInfo) {
		toSerialize["extInfo"] = o.ExtInfo
	}
	if !utils.IsNil(o.Ln) {
		toSerialize["ln"] = o.Ln
	}
	if !utils.IsNil(o.Lat) {
		toSerialize["lat"] = o.Lat
	}
	if !utils.IsNil(o.Nmid) {
		toSerialize["nmid"] = o.Nmid
	}
	return toSerialize, nil
}

type NullableShopResourceInfo struct {
	value *ShopResourceInfo
	isSet bool
}

func (v NullableShopResourceInfo) Get() *ShopResourceInfo {
	return v.value
}

func (v *NullableShopResourceInfo) Set(val *ShopResourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableShopResourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableShopResourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopResourceInfo(val *ShopResourceInfo) *NullableShopResourceInfo {
	return &NullableShopResourceInfo{value: val, isSet: true}
}

func (v NullableShopResourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopResourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


