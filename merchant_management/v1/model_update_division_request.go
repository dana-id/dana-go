// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package merchant_management

/*
Merchant Management API

API for merchant management operations in DANA

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the UpdateDivisionRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &UpdateDivisionRequest{}

// UpdateDivisionRequest struct for UpdateDivisionRequest
type UpdateDivisionRequest struct {
	// Merchant identifier
	MerchantId string `json:"merchantId"`
	// Division identifier. Required when divisionIdType is INNER_ID
	DivisionId *string `json:"divisionId,omitempty"`
	// Division name
	DivisionName string `json:"divisionName"`
	DivisionAddress AddressInfo `json:"divisionAddress"`
	// Division description
	DivisionDescription *string `json:"divisionDescription,omitempty"`
	// Division type
	DivisionType string `json:"divisionType"`
	// Division identifier type
	DivisionIdType string `json:"divisionIdType"`
	// External division identifier. Required when divisionIdType is EXTERNAL_ID
	ExternalDivisionId *string `json:"externalDivisionId,omitempty"`
	// New external division identifier
	NewExternalDivisionId string `json:"newExternalDivisionId"`
	// Logo URL map with base64 encoded images. Keys can be LOGO, PC_LOGO, MOBILE_LOGO
	LogoUrlMap map[string]string `json:"logoUrlMap,omitempty"`
	// Merchant category codes
	MccCodes []string `json:"mccCodes"`
	// Extended information
	ExtInfo map[string]interface{} `json:"extInfo"`
	// API version flag. Use > 2 for new attributes
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Business documents. Required when apiVersion > 2. \"individu\" entity can only use KTP and SIM. Other entities can use SIUP and NIB
	BusinessDocs []BusinessDocs `json:"businessDocs,omitempty"`
	// Business entity type. Required when apiVersion > 2
	BusinessEntity *string `json:"businessEntity,omitempty"`
	// Business end date, in format YYYY-MM-DD. Required when apiVersion > 2
	BusinessEndDate *string `json:"businessEndDate,omitempty"`
	OwnerName *UserName `json:"ownerName,omitempty"`
	OwnerPhoneNumber *MobileNoInfo `json:"ownerPhoneNumber,omitempty"`
	// Owner identifier type. Required when apiVersion > 2
	OwnerIdType *string `json:"ownerIdType,omitempty"`
	// Owner identifier number. Required when apiVersion > 2. Length depends on ownerIdType - KTP (16), SIM (12-14), Passport (8), NIB (>=13), SIUP (free text)
	OwnerIdNo *string `json:"ownerIdNo,omitempty"`
	OwnerAddress *AddressInfo `json:"ownerAddress,omitempty"`
	// Director as a PIC of sub merchant. Required when apiVersion > 2
	DirectorPics []PicInfo `json:"directorPics,omitempty"`
	// Non director which become a PIC of sub merchant. Required when apiVersion > 2
	NonDirectorPics []PicInfo `json:"nonDirectorPics,omitempty"`
	// Size type. Required when apiVersion > 2
	SizeType *string `json:"sizeType,omitempty"`
	// Flag if division is type PG
	PgDivisionFlag *string `json:"pgDivisionFlag,omitempty"`
}

type _UpdateDivisionRequest UpdateDivisionRequest

// NewUpdateDivisionRequest instantiates a new UpdateDivisionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDivisionRequest(merchantId string, divisionName string, divisionAddress AddressInfo, divisionType string, divisionIdType string, newExternalDivisionId string, mccCodes []string, extInfo map[string]interface{}) *UpdateDivisionRequest {
	this := UpdateDivisionRequest{}
	this.MerchantId = merchantId
	this.DivisionName = divisionName
	this.DivisionAddress = divisionAddress
	this.DivisionType = divisionType
	this.DivisionIdType = divisionIdType
	this.NewExternalDivisionId = newExternalDivisionId
	this.MccCodes = mccCodes
	this.ExtInfo = extInfo
	return &this
}

// NewUpdateDivisionRequestWithDefaults instantiates a new UpdateDivisionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDivisionRequestWithDefaults() *UpdateDivisionRequest {
	this := UpdateDivisionRequest{}
	return &this
}

// GetMerchantId returns the MerchantId field value
func (o *UpdateDivisionRequest) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *UpdateDivisionRequest) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetDivisionId returns the DivisionId field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetDivisionId() string {
	if o == nil || utils.IsNil(o.DivisionId) {
		var ret string
		return ret
	}
	return *o.DivisionId
}

// GetDivisionIdOk returns a tuple with the DivisionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetDivisionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DivisionId) {
		return nil, false
	}
	return o.DivisionId, true
}

// HasDivisionId returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasDivisionId() bool {
	if o != nil && !utils.IsNil(o.DivisionId) {
		return true
	}

	return false
}

// SetDivisionId gets a reference to the given string and assigns it to the DivisionId field.
func (o *UpdateDivisionRequest) SetDivisionId(v string) {
	o.DivisionId = &v
}

// GetDivisionName returns the DivisionName field value
func (o *UpdateDivisionRequest) GetDivisionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DivisionName
}

// GetDivisionNameOk returns a tuple with the DivisionName field value
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetDivisionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DivisionName, true
}

// SetDivisionName sets field value
func (o *UpdateDivisionRequest) SetDivisionName(v string) {
	o.DivisionName = v
}

// GetDivisionAddress returns the DivisionAddress field value
func (o *UpdateDivisionRequest) GetDivisionAddress() AddressInfo {
	if o == nil {
		var ret AddressInfo
		return ret
	}

	return o.DivisionAddress
}

// GetDivisionAddressOk returns a tuple with the DivisionAddress field value
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetDivisionAddressOk() (*AddressInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DivisionAddress, true
}

// SetDivisionAddress sets field value
func (o *UpdateDivisionRequest) SetDivisionAddress(v AddressInfo) {
	o.DivisionAddress = v
}

// GetDivisionDescription returns the DivisionDescription field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetDivisionDescription() string {
	if o == nil || utils.IsNil(o.DivisionDescription) {
		var ret string
		return ret
	}
	return *o.DivisionDescription
}

// GetDivisionDescriptionOk returns a tuple with the DivisionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetDivisionDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DivisionDescription) {
		return nil, false
	}
	return o.DivisionDescription, true
}

// HasDivisionDescription returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasDivisionDescription() bool {
	if o != nil && !utils.IsNil(o.DivisionDescription) {
		return true
	}

	return false
}

// SetDivisionDescription gets a reference to the given string and assigns it to the DivisionDescription field.
func (o *UpdateDivisionRequest) SetDivisionDescription(v string) {
	o.DivisionDescription = &v
}

// GetDivisionType returns the DivisionType field value
func (o *UpdateDivisionRequest) GetDivisionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DivisionType
}

// GetDivisionTypeOk returns a tuple with the DivisionType field value
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetDivisionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DivisionType, true
}

// SetDivisionType sets field value
func (o *UpdateDivisionRequest) SetDivisionType(v string) {
	o.DivisionType = v
}

// GetDivisionIdType returns the DivisionIdType field value
func (o *UpdateDivisionRequest) GetDivisionIdType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DivisionIdType
}

// GetDivisionIdTypeOk returns a tuple with the DivisionIdType field value
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetDivisionIdTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DivisionIdType, true
}

// SetDivisionIdType sets field value
func (o *UpdateDivisionRequest) SetDivisionIdType(v string) {
	o.DivisionIdType = v
}

// GetExternalDivisionId returns the ExternalDivisionId field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetExternalDivisionId() string {
	if o == nil || utils.IsNil(o.ExternalDivisionId) {
		var ret string
		return ret
	}
	return *o.ExternalDivisionId
}

// GetExternalDivisionIdOk returns a tuple with the ExternalDivisionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetExternalDivisionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExternalDivisionId) {
		return nil, false
	}
	return o.ExternalDivisionId, true
}

// HasExternalDivisionId returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasExternalDivisionId() bool {
	if o != nil && !utils.IsNil(o.ExternalDivisionId) {
		return true
	}

	return false
}

// SetExternalDivisionId gets a reference to the given string and assigns it to the ExternalDivisionId field.
func (o *UpdateDivisionRequest) SetExternalDivisionId(v string) {
	o.ExternalDivisionId = &v
}

// GetNewExternalDivisionId returns the NewExternalDivisionId field value
func (o *UpdateDivisionRequest) GetNewExternalDivisionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewExternalDivisionId
}

// GetNewExternalDivisionIdOk returns a tuple with the NewExternalDivisionId field value
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetNewExternalDivisionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewExternalDivisionId, true
}

// SetNewExternalDivisionId sets field value
func (o *UpdateDivisionRequest) SetNewExternalDivisionId(v string) {
	o.NewExternalDivisionId = v
}

// GetLogoUrlMap returns the LogoUrlMap field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetLogoUrlMap() map[string]string {
	if o == nil || utils.IsNil(o.LogoUrlMap) {
		var ret map[string]string
		return ret
	}
	return o.LogoUrlMap
}

// GetLogoUrlMapOk returns a tuple with the LogoUrlMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetLogoUrlMapOk() (map[string]string, bool) {
	if o == nil || utils.IsNil(o.LogoUrlMap) {
		return map[string]string{}, false
	}
	return o.LogoUrlMap, true
}

// HasLogoUrlMap returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasLogoUrlMap() bool {
	if o != nil && !utils.IsNil(o.LogoUrlMap) {
		return true
	}

	return false
}

// SetLogoUrlMap gets a reference to the given map[string]string and assigns it to the LogoUrlMap field.
func (o *UpdateDivisionRequest) SetLogoUrlMap(v map[string]string) {
	o.LogoUrlMap = v
}

// GetMccCodes returns the MccCodes field value
func (o *UpdateDivisionRequest) GetMccCodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MccCodes
}

// GetMccCodesOk returns a tuple with the MccCodes field value
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetMccCodesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MccCodes, true
}

// SetMccCodes sets field value
func (o *UpdateDivisionRequest) SetMccCodes(v []string) {
	o.MccCodes = v
}

// GetExtInfo returns the ExtInfo field value
func (o *UpdateDivisionRequest) GetExtInfo() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ExtInfo
}

// GetExtInfoOk returns a tuple with the ExtInfo field value
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetExtInfoOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ExtInfo, true
}

// SetExtInfo sets field value
func (o *UpdateDivisionRequest) SetExtInfo(v map[string]interface{}) {
	o.ExtInfo = v
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetApiVersion() string {
	if o == nil || utils.IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetApiVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasApiVersion() bool {
	if o != nil && !utils.IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *UpdateDivisionRequest) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetBusinessDocs returns the BusinessDocs field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetBusinessDocs() []BusinessDocs {
	if o == nil || utils.IsNil(o.BusinessDocs) {
		var ret []BusinessDocs
		return ret
	}
	return o.BusinessDocs
}

// GetBusinessDocsOk returns a tuple with the BusinessDocs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetBusinessDocsOk() ([]BusinessDocs, bool) {
	if o == nil || utils.IsNil(o.BusinessDocs) {
		return nil, false
	}
	return o.BusinessDocs, true
}

// HasBusinessDocs returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasBusinessDocs() bool {
	if o != nil && !utils.IsNil(o.BusinessDocs) {
		return true
	}

	return false
}

// SetBusinessDocs gets a reference to the given []BusinessDocs and assigns it to the BusinessDocs field.
func (o *UpdateDivisionRequest) SetBusinessDocs(v []BusinessDocs) {
	o.BusinessDocs = v
}

// GetBusinessEntity returns the BusinessEntity field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetBusinessEntity() string {
	if o == nil || utils.IsNil(o.BusinessEntity) {
		var ret string
		return ret
	}
	return *o.BusinessEntity
}

// GetBusinessEntityOk returns a tuple with the BusinessEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetBusinessEntityOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BusinessEntity) {
		return nil, false
	}
	return o.BusinessEntity, true
}

// HasBusinessEntity returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasBusinessEntity() bool {
	if o != nil && !utils.IsNil(o.BusinessEntity) {
		return true
	}

	return false
}

// SetBusinessEntity gets a reference to the given string and assigns it to the BusinessEntity field.
func (o *UpdateDivisionRequest) SetBusinessEntity(v string) {
	o.BusinessEntity = &v
}

// GetBusinessEndDate returns the BusinessEndDate field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetBusinessEndDate() string {
	if o == nil || utils.IsNil(o.BusinessEndDate) {
		var ret string
		return ret
	}
	return *o.BusinessEndDate
}

// GetBusinessEndDateOk returns a tuple with the BusinessEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetBusinessEndDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BusinessEndDate) {
		return nil, false
	}
	return o.BusinessEndDate, true
}

// HasBusinessEndDate returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasBusinessEndDate() bool {
	if o != nil && !utils.IsNil(o.BusinessEndDate) {
		return true
	}

	return false
}

// SetBusinessEndDate gets a reference to the given string and assigns it to the BusinessEndDate field.
func (o *UpdateDivisionRequest) SetBusinessEndDate(v string) {
	o.BusinessEndDate = &v
}

// GetOwnerName returns the OwnerName field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetOwnerName() UserName {
	if o == nil || utils.IsNil(o.OwnerName) {
		var ret UserName
		return ret
	}
	return *o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetOwnerNameOk() (*UserName, bool) {
	if o == nil || utils.IsNil(o.OwnerName) {
		return nil, false
	}
	return o.OwnerName, true
}

// HasOwnerName returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasOwnerName() bool {
	if o != nil && !utils.IsNil(o.OwnerName) {
		return true
	}

	return false
}

// SetOwnerName gets a reference to the given UserName and assigns it to the OwnerName field.
func (o *UpdateDivisionRequest) SetOwnerName(v UserName) {
	o.OwnerName = &v
}

// GetOwnerPhoneNumber returns the OwnerPhoneNumber field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetOwnerPhoneNumber() MobileNoInfo {
	if o == nil || utils.IsNil(o.OwnerPhoneNumber) {
		var ret MobileNoInfo
		return ret
	}
	return *o.OwnerPhoneNumber
}

// GetOwnerPhoneNumberOk returns a tuple with the OwnerPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetOwnerPhoneNumberOk() (*MobileNoInfo, bool) {
	if o == nil || utils.IsNil(o.OwnerPhoneNumber) {
		return nil, false
	}
	return o.OwnerPhoneNumber, true
}

// HasOwnerPhoneNumber returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasOwnerPhoneNumber() bool {
	if o != nil && !utils.IsNil(o.OwnerPhoneNumber) {
		return true
	}

	return false
}

// SetOwnerPhoneNumber gets a reference to the given MobileNoInfo and assigns it to the OwnerPhoneNumber field.
func (o *UpdateDivisionRequest) SetOwnerPhoneNumber(v MobileNoInfo) {
	o.OwnerPhoneNumber = &v
}

// GetOwnerIdType returns the OwnerIdType field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetOwnerIdType() string {
	if o == nil || utils.IsNil(o.OwnerIdType) {
		var ret string
		return ret
	}
	return *o.OwnerIdType
}

// GetOwnerIdTypeOk returns a tuple with the OwnerIdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetOwnerIdTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OwnerIdType) {
		return nil, false
	}
	return o.OwnerIdType, true
}

// HasOwnerIdType returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasOwnerIdType() bool {
	if o != nil && !utils.IsNil(o.OwnerIdType) {
		return true
	}

	return false
}

// SetOwnerIdType gets a reference to the given string and assigns it to the OwnerIdType field.
func (o *UpdateDivisionRequest) SetOwnerIdType(v string) {
	o.OwnerIdType = &v
}

// GetOwnerIdNo returns the OwnerIdNo field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetOwnerIdNo() string {
	if o == nil || utils.IsNil(o.OwnerIdNo) {
		var ret string
		return ret
	}
	return *o.OwnerIdNo
}

// GetOwnerIdNoOk returns a tuple with the OwnerIdNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetOwnerIdNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OwnerIdNo) {
		return nil, false
	}
	return o.OwnerIdNo, true
}

// HasOwnerIdNo returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasOwnerIdNo() bool {
	if o != nil && !utils.IsNil(o.OwnerIdNo) {
		return true
	}

	return false
}

// SetOwnerIdNo gets a reference to the given string and assigns it to the OwnerIdNo field.
func (o *UpdateDivisionRequest) SetOwnerIdNo(v string) {
	o.OwnerIdNo = &v
}

// GetOwnerAddress returns the OwnerAddress field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetOwnerAddress() AddressInfo {
	if o == nil || utils.IsNil(o.OwnerAddress) {
		var ret AddressInfo
		return ret
	}
	return *o.OwnerAddress
}

// GetOwnerAddressOk returns a tuple with the OwnerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetOwnerAddressOk() (*AddressInfo, bool) {
	if o == nil || utils.IsNil(o.OwnerAddress) {
		return nil, false
	}
	return o.OwnerAddress, true
}

// HasOwnerAddress returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasOwnerAddress() bool {
	if o != nil && !utils.IsNil(o.OwnerAddress) {
		return true
	}

	return false
}

// SetOwnerAddress gets a reference to the given AddressInfo and assigns it to the OwnerAddress field.
func (o *UpdateDivisionRequest) SetOwnerAddress(v AddressInfo) {
	o.OwnerAddress = &v
}

// GetDirectorPics returns the DirectorPics field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetDirectorPics() []PicInfo {
	if o == nil || utils.IsNil(o.DirectorPics) {
		var ret []PicInfo
		return ret
	}
	return o.DirectorPics
}

// GetDirectorPicsOk returns a tuple with the DirectorPics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetDirectorPicsOk() ([]PicInfo, bool) {
	if o == nil || utils.IsNil(o.DirectorPics) {
		return nil, false
	}
	return o.DirectorPics, true
}

// HasDirectorPics returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasDirectorPics() bool {
	if o != nil && !utils.IsNil(o.DirectorPics) {
		return true
	}

	return false
}

// SetDirectorPics gets a reference to the given []PicInfo and assigns it to the DirectorPics field.
func (o *UpdateDivisionRequest) SetDirectorPics(v []PicInfo) {
	o.DirectorPics = v
}

// GetNonDirectorPics returns the NonDirectorPics field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetNonDirectorPics() []PicInfo {
	if o == nil || utils.IsNil(o.NonDirectorPics) {
		var ret []PicInfo
		return ret
	}
	return o.NonDirectorPics
}

// GetNonDirectorPicsOk returns a tuple with the NonDirectorPics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetNonDirectorPicsOk() ([]PicInfo, bool) {
	if o == nil || utils.IsNil(o.NonDirectorPics) {
		return nil, false
	}
	return o.NonDirectorPics, true
}

// HasNonDirectorPics returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasNonDirectorPics() bool {
	if o != nil && !utils.IsNil(o.NonDirectorPics) {
		return true
	}

	return false
}

// SetNonDirectorPics gets a reference to the given []PicInfo and assigns it to the NonDirectorPics field.
func (o *UpdateDivisionRequest) SetNonDirectorPics(v []PicInfo) {
	o.NonDirectorPics = v
}

// GetSizeType returns the SizeType field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetSizeType() string {
	if o == nil || utils.IsNil(o.SizeType) {
		var ret string
		return ret
	}
	return *o.SizeType
}

// GetSizeTypeOk returns a tuple with the SizeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetSizeTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SizeType) {
		return nil, false
	}
	return o.SizeType, true
}

// HasSizeType returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasSizeType() bool {
	if o != nil && !utils.IsNil(o.SizeType) {
		return true
	}

	return false
}

// SetSizeType gets a reference to the given string and assigns it to the SizeType field.
func (o *UpdateDivisionRequest) SetSizeType(v string) {
	o.SizeType = &v
}

// GetPgDivisionFlag returns the PgDivisionFlag field value if set, zero value otherwise.
func (o *UpdateDivisionRequest) GetPgDivisionFlag() string {
	if o == nil || utils.IsNil(o.PgDivisionFlag) {
		var ret string
		return ret
	}
	return *o.PgDivisionFlag
}

// GetPgDivisionFlagOk returns a tuple with the PgDivisionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDivisionRequest) GetPgDivisionFlagOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PgDivisionFlag) {
		return nil, false
	}
	return o.PgDivisionFlag, true
}

// HasPgDivisionFlag returns a boolean if a field has been set.
func (o *UpdateDivisionRequest) HasPgDivisionFlag() bool {
	if o != nil && !utils.IsNil(o.PgDivisionFlag) {
		return true
	}

	return false
}

// SetPgDivisionFlag gets a reference to the given string and assigns it to the PgDivisionFlag field.
func (o *UpdateDivisionRequest) SetPgDivisionFlag(v string) {
	o.PgDivisionFlag = &v
}

func (o UpdateDivisionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDivisionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchantId"] = o.MerchantId
	if !utils.IsNil(o.DivisionId) {
		toSerialize["divisionId"] = o.DivisionId
	}
	toSerialize["divisionName"] = o.DivisionName
	toSerialize["divisionAddress"] = o.DivisionAddress
	if !utils.IsNil(o.DivisionDescription) {
		toSerialize["divisionDescription"] = o.DivisionDescription
	}
	toSerialize["divisionType"] = o.DivisionType
	toSerialize["divisionIdType"] = o.DivisionIdType
	if !utils.IsNil(o.ExternalDivisionId) {
		toSerialize["externalDivisionId"] = o.ExternalDivisionId
	}
	toSerialize["newExternalDivisionId"] = o.NewExternalDivisionId
	if !utils.IsNil(o.LogoUrlMap) {
		toSerialize["logoUrlMap"] = o.LogoUrlMap
	}
	toSerialize["mccCodes"] = o.MccCodes
	toSerialize["extInfo"] = o.ExtInfo
	if !utils.IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !utils.IsNil(o.BusinessDocs) {
		toSerialize["businessDocs"] = o.BusinessDocs
	}
	if !utils.IsNil(o.BusinessEntity) {
		toSerialize["businessEntity"] = o.BusinessEntity
	}
	if !utils.IsNil(o.BusinessEndDate) {
		toSerialize["businessEndDate"] = o.BusinessEndDate
	}
	if !utils.IsNil(o.OwnerName) {
		toSerialize["ownerName"] = o.OwnerName
	}
	if !utils.IsNil(o.OwnerPhoneNumber) {
		toSerialize["ownerPhoneNumber"] = o.OwnerPhoneNumber
	}
	if !utils.IsNil(o.OwnerIdType) {
		toSerialize["ownerIdType"] = o.OwnerIdType
	}
	if !utils.IsNil(o.OwnerIdNo) {
		toSerialize["ownerIdNo"] = o.OwnerIdNo
	}
	if !utils.IsNil(o.OwnerAddress) {
		toSerialize["ownerAddress"] = o.OwnerAddress
	}
	if !utils.IsNil(o.DirectorPics) {
		toSerialize["directorPics"] = o.DirectorPics
	}
	if !utils.IsNil(o.NonDirectorPics) {
		toSerialize["nonDirectorPics"] = o.NonDirectorPics
	}
	if !utils.IsNil(o.SizeType) {
		toSerialize["sizeType"] = o.SizeType
	}
	if !utils.IsNil(o.PgDivisionFlag) {
		toSerialize["pgDivisionFlag"] = o.PgDivisionFlag
	}
	return toSerialize, nil
}

func (o *UpdateDivisionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchantId",
		"divisionName",
		"divisionAddress",
		"divisionType",
		"divisionIdType",
		"newExternalDivisionId",
		"mccCodes",
		"extInfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateDivisionRequest := _UpdateDivisionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateDivisionRequest)

	if err != nil {
		return err
	}

	*o = UpdateDivisionRequest(varUpdateDivisionRequest)

	return err
}

type NullableUpdateDivisionRequest struct {
	value *UpdateDivisionRequest
	isSet bool
}

func (v NullableUpdateDivisionRequest) Get() *UpdateDivisionRequest {
	return v.value
}

func (v *NullableUpdateDivisionRequest) Set(val *UpdateDivisionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDivisionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDivisionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDivisionRequest(val *UpdateDivisionRequest) *NullableUpdateDivisionRequest {
	return &NullableUpdateDivisionRequest{value: val, isSet: true}
}

func (v NullableUpdateDivisionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDivisionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


