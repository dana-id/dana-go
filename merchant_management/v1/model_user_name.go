// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package merchant_management

/*
Merchant Management API

API for merchant management operations in DANA

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the UserName type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &UserName{}

// UserName struct for UserName
type UserName struct {
	// First name
	FirstName *string `json:"firstName,omitempty"`
	// Last name
	LastName *string `json:"lastName,omitempty"`
}

// NewUserName instantiates a new UserName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserName() *UserName {
	this := UserName{}
	return &this
}

// NewUserNameWithDefaults instantiates a new UserName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserNameWithDefaults() *UserName {
	this := UserName{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserName) GetFirstName() string {
	if o == nil || utils.IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserName) GetFirstNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserName) HasFirstName() bool {
	if o != nil && !utils.IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserName) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UserName) GetLastName() string {
	if o == nil || utils.IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserName) GetLastNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UserName) HasLastName() bool {
	if o != nil && !utils.IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UserName) SetLastName(v string) {
	o.LastName = &v
}

func (o UserName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !utils.IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	return toSerialize, nil
}

type NullableUserName struct {
	value *UserName
	isSet bool
}

func (v NullableUserName) Get() *UserName {
	return v.value
}

func (v *NullableUserName) Set(val *UserName) {
	v.value = val
	v.isSet = true
}

func (v NullableUserName) IsSet() bool {
	return v.isSet
}

func (v *NullableUserName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserName(val *UserName) *NullableUserName {
	return &NullableUserName{value: val, isSet: true}
}

func (v NullableUserName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


