// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package merchant_management

/*
Merchant Management API

API for merchant management operations in DANA

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"fmt"
	"encoding/json"

	common "github.com/dana-id/dana-go/common"
	config "github.com/dana-id/dana-go/config"
	exceptions "github.com/dana-id/dana-go/exceptions"
	utils "github.com/dana-id/dana-go/utils"
)


// MerchantManagementAPIService MerchantManagementAPI service
type MerchantManagementAPIService struct {
	common.ClientInterface
	cfg *config.Configuration
}

// NewMerchantManagementAPIService creates a new MerchantManagementAPI with the provided client
func NewMerchantManagementAPIService(client common.ClientInterface) *MerchantManagementAPIService {
	var cfg *config.Configuration
	if provider, ok := client.(interface{ GetConfig() *config.Configuration }); ok {
		cfg = provider.GetConfig()
	}
	
	return &MerchantManagementAPIService{
		ClientInterface: client,
		cfg: cfg,
	}
}

type ApiCreateDivisionRequest struct {
	ctx context.Context
	ApiService *MerchantManagementAPIService
	createDivisionRequest *CreateDivisionRequest
}

func (r ApiCreateDivisionRequest) CreateDivisionRequest(createDivisionRequest CreateDivisionRequest) ApiCreateDivisionRequest {
	r.createDivisionRequest = &createDivisionRequest
	return r
}

func (r ApiCreateDivisionRequest) Execute() (*CreateDivisionResponse, *http.Response, error) {
	return r.ApiService.CreateDivisionExecute(r)
}

/*
CreateDivision Create Division

This API is used to create a new division

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDivisionRequest
*/
func (a *MerchantManagementAPIService) CreateDivision(ctx context.Context) ApiCreateDivisionRequest {
	return ApiCreateDivisionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateDivisionResponse
func (a *MerchantManagementAPIService) CreateDivisionExecute(r ApiCreateDivisionRequest) (*CreateDivisionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *CreateDivisionResponse
	)

	localBasePath, err := a.GetConfig().ServerURLWithContext(r.ctx, "MerchantManagementAPIService.CreateDivision")
	if err != nil {
		return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
			ErrorMsg: err.Error(),
		}
	}

	localVarPath := localBasePath + "/dana/merchant/division/createDivision.htm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createDivisionRequest == nil {
		return localVarReturnValue, nil, utils.ReportError("createDivisionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createDivisionRequest
	functionName := "dana.merchant.division.createDivision"

	// Create the full request structure for OPEN_API
	// Wrap the simplified body parameters in the proper DANA request format
	
	// Generate head parameters
	headParams := utils.GetOpenApiGeneratedHeaders("", a.cfg.APIKey, functionName)
	
	// Create the full request structure
	requestBody := map[string]interface{}{
		"request": map[string]interface{}{
			"head": headParams,
			"body": localVarPostBody,
		},
	}
	
	// Generate signature
	signature := ""
	if a.cfg.APIKey != nil && (a.cfg.APIKey.PRIVATE_KEY != "" || a.cfg.APIKey.PRIVATE_KEY_PATH != "") {
		bodyBytes, err := json.Marshal(requestBody["request"])
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to marshal request body for signature: %v", err),
			}
		}
		
		sig, err := utils.GenerateOpenApiSignature(string(bodyBytes), a.cfg.APIKey)
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to generate signature: %v", err),
			}
		}
		signature = sig
	}
	
	// Add signature to the request
	if signature != "" {
		requestBody["signature"] = signature
	}
	
	// Set the final request body
	localVarPostBody = requestBody
	
	// For OPEN_API, we don't need to set additional headers as the signature is already in the body

	req, err := a.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: localVarHTTPResponse.Status,
		}
		var v CreateDivisionResponse
		err = a.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.ErrorMsg = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.ModelData = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type ApiCreateShopRequest struct {
	ctx context.Context
	ApiService *MerchantManagementAPIService
	createShopRequest *CreateShopRequest
}

func (r ApiCreateShopRequest) CreateShopRequest(createShopRequest CreateShopRequest) ApiCreateShopRequest {
	r.createShopRequest = &createShopRequest
	return r
}

func (r ApiCreateShopRequest) Execute() (*CreateShopResponse, *http.Response, error) {
	return r.ApiService.CreateShopExecute(r)
}

/*
CreateShop Member â€“ Create Shop

Create shop under merchant or division

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateShopRequest
*/
func (a *MerchantManagementAPIService) CreateShop(ctx context.Context) ApiCreateShopRequest {
	return ApiCreateShopRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateShopResponse
func (a *MerchantManagementAPIService) CreateShopExecute(r ApiCreateShopRequest) (*CreateShopResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *CreateShopResponse
	)

	localBasePath, err := a.GetConfig().ServerURLWithContext(r.ctx, "MerchantManagementAPIService.CreateShop")
	if err != nil {
		return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
			ErrorMsg: err.Error(),
		}
	}

	localVarPath := localBasePath + "/dana/merchant/shop/createShop.htm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createShopRequest == nil {
		return localVarReturnValue, nil, utils.ReportError("createShopRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createShopRequest
	functionName := "dana.merchant.shop.createShop"

	// Create the full request structure for OPEN_API
	// Wrap the simplified body parameters in the proper DANA request format
	
	// Generate head parameters
	headParams := utils.GetOpenApiGeneratedHeaders("", a.cfg.APIKey, functionName)
	
	// Create the full request structure
	requestBody := map[string]interface{}{
		"request": map[string]interface{}{
			"head": headParams,
			"body": localVarPostBody,
		},
	}
	
	// Generate signature
	signature := ""
	if a.cfg.APIKey != nil && (a.cfg.APIKey.PRIVATE_KEY != "" || a.cfg.APIKey.PRIVATE_KEY_PATH != "") {
		bodyBytes, err := json.Marshal(requestBody["request"])
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to marshal request body for signature: %v", err),
			}
		}
		
		sig, err := utils.GenerateOpenApiSignature(string(bodyBytes), a.cfg.APIKey)
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to generate signature: %v", err),
			}
		}
		signature = sig
	}
	
	// Add signature to the request
	if signature != "" {
		requestBody["signature"] = signature
	}
	
	// Set the final request body
	localVarPostBody = requestBody
	
	// For OPEN_API, we don't need to set additional headers as the signature is already in the body

	req, err := a.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: localVarHTTPResponse.Status,
		}
		var v CreateShopResponse
		err = a.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.ErrorMsg = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.ModelData = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type ApiQueryDivisionRequest struct {
	ctx context.Context
	ApiService *MerchantManagementAPIService
	queryDivisionRequest *QueryDivisionRequest
}

func (r ApiQueryDivisionRequest) QueryDivisionRequest(queryDivisionRequest QueryDivisionRequest) ApiQueryDivisionRequest {
	r.queryDivisionRequest = &queryDivisionRequest
	return r
}

func (r ApiQueryDivisionRequest) Execute() (*QueryDivisionResponse, *http.Response, error) {
	return r.ApiService.QueryDivisionExecute(r)
}

/*
QueryDivision Query Division

This API is used to obtain information of division

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryDivisionRequest
*/
func (a *MerchantManagementAPIService) QueryDivision(ctx context.Context) ApiQueryDivisionRequest {
	return ApiQueryDivisionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryDivisionResponse
func (a *MerchantManagementAPIService) QueryDivisionExecute(r ApiQueryDivisionRequest) (*QueryDivisionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *QueryDivisionResponse
	)

	localBasePath, err := a.GetConfig().ServerURLWithContext(r.ctx, "MerchantManagementAPIService.QueryDivision")
	if err != nil {
		return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
			ErrorMsg: err.Error(),
		}
	}

	localVarPath := localBasePath + "/dana/merchant/division/queryDivision.htm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.queryDivisionRequest == nil {
		return localVarReturnValue, nil, utils.ReportError("queryDivisionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.queryDivisionRequest
	functionName := "dana.merchant.division.queryDivision"

	// Create the full request structure for OPEN_API
	// Wrap the simplified body parameters in the proper DANA request format
	
	// Generate head parameters
	headParams := utils.GetOpenApiGeneratedHeaders("", a.cfg.APIKey, functionName)
	
	// Create the full request structure
	requestBody := map[string]interface{}{
		"request": map[string]interface{}{
			"head": headParams,
			"body": localVarPostBody,
		},
	}
	
	// Generate signature
	signature := ""
	if a.cfg.APIKey != nil && (a.cfg.APIKey.PRIVATE_KEY != "" || a.cfg.APIKey.PRIVATE_KEY_PATH != "") {
		bodyBytes, err := json.Marshal(requestBody["request"])
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to marshal request body for signature: %v", err),
			}
		}
		
		sig, err := utils.GenerateOpenApiSignature(string(bodyBytes), a.cfg.APIKey)
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to generate signature: %v", err),
			}
		}
		signature = sig
	}
	
	// Add signature to the request
	if signature != "" {
		requestBody["signature"] = signature
	}
	
	// Set the final request body
	localVarPostBody = requestBody
	
	// For OPEN_API, we don't need to set additional headers as the signature is already in the body

	req, err := a.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: localVarHTTPResponse.Status,
		}
		var v QueryDivisionResponse
		err = a.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.ErrorMsg = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.ModelData = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type ApiQueryMerchantResourceRequest struct {
	ctx context.Context
	ApiService *MerchantManagementAPIService
	queryMerchantResourceRequest *QueryMerchantResourceRequest
}

func (r ApiQueryMerchantResourceRequest) QueryMerchantResourceRequest(queryMerchantResourceRequest QueryMerchantResourceRequest) ApiQueryMerchantResourceRequest {
	r.queryMerchantResourceRequest = &queryMerchantResourceRequest
	return r
}

func (r ApiQueryMerchantResourceRequest) Execute() (*QueryMerchantResourceResponse, *http.Response, error) {
	return r.ApiService.QueryMerchantResourceExecute(r)
}

/*
QueryMerchantResource Member â€“ Merchant Open API Check Disbursement Account

The interface is check merchant resource info (account balance merchant)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryMerchantResourceRequest
*/
func (a *MerchantManagementAPIService) QueryMerchantResource(ctx context.Context) ApiQueryMerchantResourceRequest {
	return ApiQueryMerchantResourceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryMerchantResourceResponse
func (a *MerchantManagementAPIService) QueryMerchantResourceExecute(r ApiQueryMerchantResourceRequest) (*QueryMerchantResourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *QueryMerchantResourceResponse
	)

	localBasePath, err := a.GetConfig().ServerURLWithContext(r.ctx, "MerchantManagementAPIService.QueryMerchantResource")
	if err != nil {
		return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
			ErrorMsg: err.Error(),
		}
	}

	localVarPath := localBasePath + "/dana/merchant/queryMerchantResource.htm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.queryMerchantResourceRequest == nil {
		return localVarReturnValue, nil, utils.ReportError("queryMerchantResourceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.queryMerchantResourceRequest
	functionName := "dana.merchant.queryMerchantResource"

	// Create the full request structure for OPEN_API
	// Wrap the simplified body parameters in the proper DANA request format
	
	// Generate head parameters
	headParams := utils.GetOpenApiGeneratedHeaders("", a.cfg.APIKey, functionName)
	
	// Create the full request structure
	requestBody := map[string]interface{}{
		"request": map[string]interface{}{
			"head": headParams,
			"body": localVarPostBody,
		},
	}
	
	// Generate signature
	signature := ""
	if a.cfg.APIKey != nil && (a.cfg.APIKey.PRIVATE_KEY != "" || a.cfg.APIKey.PRIVATE_KEY_PATH != "") {
		bodyBytes, err := json.Marshal(requestBody["request"])
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to marshal request body for signature: %v", err),
			}
		}
		
		sig, err := utils.GenerateOpenApiSignature(string(bodyBytes), a.cfg.APIKey)
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to generate signature: %v", err),
			}
		}
		signature = sig
	}
	
	// Add signature to the request
	if signature != "" {
		requestBody["signature"] = signature
	}
	
	// Set the final request body
	localVarPostBody = requestBody
	
	// For OPEN_API, we don't need to set additional headers as the signature is already in the body

	req, err := a.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: localVarHTTPResponse.Status,
		}
		var v QueryMerchantResourceResponse
		err = a.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.ErrorMsg = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.ModelData = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type ApiQueryShopRequest struct {
	ctx context.Context
	ApiService *MerchantManagementAPIService
	queryShopRequest *QueryShopRequest
}

func (r ApiQueryShopRequest) QueryShopRequest(queryShopRequest QueryShopRequest) ApiQueryShopRequest {
	r.queryShopRequest = &queryShopRequest
	return r
}

func (r ApiQueryShopRequest) Execute() (*QueryShopResponse, *http.Response, error) {
	return r.ApiService.QueryShopExecute(r)
}

/*
QueryShop Member â€“ Query Shop

This API is used to obtain information of shop information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQueryShopRequest
*/
func (a *MerchantManagementAPIService) QueryShop(ctx context.Context) ApiQueryShopRequest {
	return ApiQueryShopRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QueryShopResponse
func (a *MerchantManagementAPIService) QueryShopExecute(r ApiQueryShopRequest) (*QueryShopResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *QueryShopResponse
	)

	localBasePath, err := a.GetConfig().ServerURLWithContext(r.ctx, "MerchantManagementAPIService.QueryShop")
	if err != nil {
		return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
			ErrorMsg: err.Error(),
		}
	}

	localVarPath := localBasePath + "/dana/merchant/shop/queryShop.htm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.queryShopRequest == nil {
		return localVarReturnValue, nil, utils.ReportError("queryShopRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.queryShopRequest
	functionName := "dana.merchant.shop.queryShop"

	// Create the full request structure for OPEN_API
	// Wrap the simplified body parameters in the proper DANA request format
	
	// Generate head parameters
	headParams := utils.GetOpenApiGeneratedHeaders("", a.cfg.APIKey, functionName)
	
	// Create the full request structure
	requestBody := map[string]interface{}{
		"request": map[string]interface{}{
			"head": headParams,
			"body": localVarPostBody,
		},
	}
	
	// Generate signature
	signature := ""
	if a.cfg.APIKey != nil && (a.cfg.APIKey.PRIVATE_KEY != "" || a.cfg.APIKey.PRIVATE_KEY_PATH != "") {
		bodyBytes, err := json.Marshal(requestBody["request"])
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to marshal request body for signature: %v", err),
			}
		}
		
		sig, err := utils.GenerateOpenApiSignature(string(bodyBytes), a.cfg.APIKey)
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to generate signature: %v", err),
			}
		}
		signature = sig
	}
	
	// Add signature to the request
	if signature != "" {
		requestBody["signature"] = signature
	}
	
	// Set the final request body
	localVarPostBody = requestBody
	
	// For OPEN_API, we don't need to set additional headers as the signature is already in the body

	req, err := a.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: localVarHTTPResponse.Status,
		}
		var v QueryShopResponse
		err = a.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.ErrorMsg = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.ModelData = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type ApiUpdateDivisionRequest struct {
	ctx context.Context
	ApiService *MerchantManagementAPIService
	updateDivisionRequest *UpdateDivisionRequest
}

func (r ApiUpdateDivisionRequest) UpdateDivisionRequest(updateDivisionRequest UpdateDivisionRequest) ApiUpdateDivisionRequest {
	r.updateDivisionRequest = &updateDivisionRequest
	return r
}

func (r ApiUpdateDivisionRequest) Execute() (*UpdateDivisionResponse, *http.Response, error) {
	return r.ApiService.UpdateDivisionExecute(r)
}

/*
UpdateDivision Update Division

This API is used to update the division information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateDivisionRequest
*/
func (a *MerchantManagementAPIService) UpdateDivision(ctx context.Context) ApiUpdateDivisionRequest {
	return ApiUpdateDivisionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateDivisionResponse
func (a *MerchantManagementAPIService) UpdateDivisionExecute(r ApiUpdateDivisionRequest) (*UpdateDivisionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *UpdateDivisionResponse
	)

	localBasePath, err := a.GetConfig().ServerURLWithContext(r.ctx, "MerchantManagementAPIService.UpdateDivision")
	if err != nil {
		return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
			ErrorMsg: err.Error(),
		}
	}

	localVarPath := localBasePath + "/dana/merchant/division/updateDivision.htm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateDivisionRequest == nil {
		return localVarReturnValue, nil, utils.ReportError("updateDivisionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateDivisionRequest
	functionName := "dana.merchant.division.updateDivision"

	// Create the full request structure for OPEN_API
	// Wrap the simplified body parameters in the proper DANA request format
	
	// Generate head parameters
	headParams := utils.GetOpenApiGeneratedHeaders("", a.cfg.APIKey, functionName)
	
	// Create the full request structure
	requestBody := map[string]interface{}{
		"request": map[string]interface{}{
			"head": headParams,
			"body": localVarPostBody,
		},
	}
	
	// Generate signature
	signature := ""
	if a.cfg.APIKey != nil && (a.cfg.APIKey.PRIVATE_KEY != "" || a.cfg.APIKey.PRIVATE_KEY_PATH != "") {
		bodyBytes, err := json.Marshal(requestBody["request"])
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to marshal request body for signature: %v", err),
			}
		}
		
		sig, err := utils.GenerateOpenApiSignature(string(bodyBytes), a.cfg.APIKey)
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to generate signature: %v", err),
			}
		}
		signature = sig
	}
	
	// Add signature to the request
	if signature != "" {
		requestBody["signature"] = signature
	}
	
	// Set the final request body
	localVarPostBody = requestBody
	
	// For OPEN_API, we don't need to set additional headers as the signature is already in the body

	req, err := a.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: localVarHTTPResponse.Status,
		}
		var v UpdateDivisionResponse
		err = a.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.ErrorMsg = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.ModelData = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type ApiUpdateShopRequest struct {
	ctx context.Context
	ApiService *MerchantManagementAPIService
	updateShopRequest *UpdateShopRequest
}

func (r ApiUpdateShopRequest) UpdateShopRequest(updateShopRequest UpdateShopRequest) ApiUpdateShopRequest {
	r.updateShopRequest = &updateShopRequest
	return r
}

func (r ApiUpdateShopRequest) Execute() (*UpdateShopResponse, *http.Response, error) {
	return r.ApiService.UpdateShopExecute(r)
}

/*
UpdateShop Update Shop

This API is used to update the shop information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateShopRequest
*/
func (a *MerchantManagementAPIService) UpdateShop(ctx context.Context) ApiUpdateShopRequest {
	return ApiUpdateShopRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateShopResponse
func (a *MerchantManagementAPIService) UpdateShopExecute(r ApiUpdateShopRequest) (*UpdateShopResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []common.FormFile
		localVarReturnValue  *UpdateShopResponse
	)

	localBasePath, err := a.GetConfig().ServerURLWithContext(r.ctx, "MerchantManagementAPIService.UpdateShop")
	if err != nil {
		return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
			ErrorMsg: err.Error(),
		}
	}

	localVarPath := localBasePath + "/dana/merchant/shop/updateShop.htm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateShopRequest == nil {
		return localVarReturnValue, nil, utils.ReportError("updateShopRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := utils.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := utils.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateShopRequest
	functionName := "dana.merchant.shop.updateShop"

	// Create the full request structure for OPEN_API
	// Wrap the simplified body parameters in the proper DANA request format
	
	// Generate head parameters
	headParams := utils.GetOpenApiGeneratedHeaders("", a.cfg.APIKey, functionName)
	
	// Create the full request structure
	requestBody := map[string]interface{}{
		"request": map[string]interface{}{
			"head": headParams,
			"body": localVarPostBody,
		},
	}
	
	// Generate signature
	signature := ""
	if a.cfg.APIKey != nil && (a.cfg.APIKey.PRIVATE_KEY != "" || a.cfg.APIKey.PRIVATE_KEY_PATH != "") {
		bodyBytes, err := json.Marshal(requestBody["request"])
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to marshal request body for signature: %v", err),
			}
		}
		
		sig, err := utils.GenerateOpenApiSignature(string(bodyBytes), a.cfg.APIKey)
		if err != nil {
			return localVarReturnValue, nil, &exceptions.GenericOpenAPIError{
				ErrorMsg: fmt.Sprintf("Failed to generate signature: %v", err),
			}
		}
		signature = sig
	}
	
	// Add signature to the request
	if signature != "" {
		requestBody["signature"] = signature
	}
	
	// Set the final request body
	localVarPostBody = requestBody
	
	// For OPEN_API, we don't need to set additional headers as the signature is already in the body

	req, err := a.PrepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: localVarHTTPResponse.Status,
		}
		var v UpdateShopResponse
		err = a.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.ErrorMsg = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.ModelData = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &exceptions.GenericOpenAPIError{
			RawBody:  localVarBody,
			ErrorMsg: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
 
