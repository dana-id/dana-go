// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package merchant_management

/*
Merchant Management API

API for merchant management operations in DANA

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the BusinessDocs type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &BusinessDocs{}

// BusinessDocs struct for BusinessDocs
type BusinessDocs struct {
	// Document type. \"individu\" entity can only use KTP and SIM. Other entities can use SIUP and NIB
	DocType *string `json:"docType,omitempty"`
	// Document ID
	DocId *string `json:"docId,omitempty"`
	// Document file encoded in base64
	DocFile *string `json:"docFile,omitempty"`
}

// NewBusinessDocs instantiates a new BusinessDocs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessDocs() *BusinessDocs {
	this := BusinessDocs{}
	return &this
}

// NewBusinessDocsWithDefaults instantiates a new BusinessDocs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessDocsWithDefaults() *BusinessDocs {
	this := BusinessDocs{}
	return &this
}

// GetDocType returns the DocType field value if set, zero value otherwise.
func (o *BusinessDocs) GetDocType() string {
	if o == nil || utils.IsNil(o.DocType) {
		var ret string
		return ret
	}
	return *o.DocType
}

// GetDocTypeOk returns a tuple with the DocType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDocs) GetDocTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DocType) {
		return nil, false
	}
	return o.DocType, true
}

// HasDocType returns a boolean if a field has been set.
func (o *BusinessDocs) HasDocType() bool {
	if o != nil && !utils.IsNil(o.DocType) {
		return true
	}

	return false
}

// SetDocType gets a reference to the given string and assigns it to the DocType field.
func (o *BusinessDocs) SetDocType(v string) {
	o.DocType = &v
}

// GetDocId returns the DocId field value if set, zero value otherwise.
func (o *BusinessDocs) GetDocId() string {
	if o == nil || utils.IsNil(o.DocId) {
		var ret string
		return ret
	}
	return *o.DocId
}

// GetDocIdOk returns a tuple with the DocId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDocs) GetDocIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DocId) {
		return nil, false
	}
	return o.DocId, true
}

// HasDocId returns a boolean if a field has been set.
func (o *BusinessDocs) HasDocId() bool {
	if o != nil && !utils.IsNil(o.DocId) {
		return true
	}

	return false
}

// SetDocId gets a reference to the given string and assigns it to the DocId field.
func (o *BusinessDocs) SetDocId(v string) {
	o.DocId = &v
}

// GetDocFile returns the DocFile field value if set, zero value otherwise.
func (o *BusinessDocs) GetDocFile() string {
	if o == nil || utils.IsNil(o.DocFile) {
		var ret string
		return ret
	}
	return *o.DocFile
}

// GetDocFileOk returns a tuple with the DocFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDocs) GetDocFileOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DocFile) {
		return nil, false
	}
	return o.DocFile, true
}

// HasDocFile returns a boolean if a field has been set.
func (o *BusinessDocs) HasDocFile() bool {
	if o != nil && !utils.IsNil(o.DocFile) {
		return true
	}

	return false
}

// SetDocFile gets a reference to the given string and assigns it to the DocFile field.
func (o *BusinessDocs) SetDocFile(v string) {
	o.DocFile = &v
}

func (o BusinessDocs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BusinessDocs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.DocType) {
		toSerialize["docType"] = o.DocType
	}
	if !utils.IsNil(o.DocId) {
		toSerialize["docId"] = o.DocId
	}
	if !utils.IsNil(o.DocFile) {
		toSerialize["docFile"] = o.DocFile
	}
	return toSerialize, nil
}

type NullableBusinessDocs struct {
	value *BusinessDocs
	isSet bool
}

func (v NullableBusinessDocs) Get() *BusinessDocs {
	return v.value
}

func (v *NullableBusinessDocs) Set(val *BusinessDocs) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessDocs) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessDocs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessDocs(val *BusinessDocs) *NullableBusinessDocs {
	return &NullableBusinessDocs{value: val, isSet: true}
}

func (v NullableBusinessDocs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessDocs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


