// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package merchant_management

/*
Merchant Management API

API for merchant management operations in DANA

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the PicInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PicInfo{}

// PicInfo struct for PicInfo
type PicInfo struct {
	// PIC name
	PicName *string `json:"picName,omitempty"`
	// PIC position
	PicPosition *string `json:"picPosition,omitempty"`
}

// NewPicInfo instantiates a new PicInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPicInfo() *PicInfo {
	this := PicInfo{}
	return &this
}

// NewPicInfoWithDefaults instantiates a new PicInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPicInfoWithDefaults() *PicInfo {
	this := PicInfo{}
	return &this
}

// GetPicName returns the PicName field value if set, zero value otherwise.
func (o *PicInfo) GetPicName() string {
	if o == nil || utils.IsNil(o.PicName) {
		var ret string
		return ret
	}
	return *o.PicName
}

// GetPicNameOk returns a tuple with the PicName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PicInfo) GetPicNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PicName) {
		return nil, false
	}
	return o.PicName, true
}

// HasPicName returns a boolean if a field has been set.
func (o *PicInfo) HasPicName() bool {
	if o != nil && !utils.IsNil(o.PicName) {
		return true
	}

	return false
}

// SetPicName gets a reference to the given string and assigns it to the PicName field.
func (o *PicInfo) SetPicName(v string) {
	o.PicName = &v
}

// GetPicPosition returns the PicPosition field value if set, zero value otherwise.
func (o *PicInfo) GetPicPosition() string {
	if o == nil || utils.IsNil(o.PicPosition) {
		var ret string
		return ret
	}
	return *o.PicPosition
}

// GetPicPositionOk returns a tuple with the PicPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PicInfo) GetPicPositionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PicPosition) {
		return nil, false
	}
	return o.PicPosition, true
}

// HasPicPosition returns a boolean if a field has been set.
func (o *PicInfo) HasPicPosition() bool {
	if o != nil && !utils.IsNil(o.PicPosition) {
		return true
	}

	return false
}

// SetPicPosition gets a reference to the given string and assigns it to the PicPosition field.
func (o *PicInfo) SetPicPosition(v string) {
	o.PicPosition = &v
}

func (o PicInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PicInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PicName) {
		toSerialize["picName"] = o.PicName
	}
	if !utils.IsNil(o.PicPosition) {
		toSerialize["picPosition"] = o.PicPosition
	}
	return toSerialize, nil
}

type NullablePicInfo struct {
	value *PicInfo
	isSet bool
}

func (v NullablePicInfo) Get() *PicInfo {
	return v.value
}

func (v *NullablePicInfo) Set(val *PicInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePicInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePicInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePicInfo(val *PicInfo) *NullablePicInfo {
	return &NullablePicInfo{value: val, isSet: true}
}

func (v NullablePicInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePicInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


