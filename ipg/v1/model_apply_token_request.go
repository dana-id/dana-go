/*
IPG Cashier Pay API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipg

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
	utils "github.com/dana-id/go_client/utils"
)

// ApplyTokenRequest - This schema is a oneOf type with the following possible variants: - ApplyTokenAuthorizationCodeRequest - ApplyTokenRefreshTokenRequest 
type ApplyTokenRequest struct {
	ApplyTokenAuthorizationCodeRequest *ApplyTokenAuthorizationCodeRequest
	ApplyTokenRefreshTokenRequest *ApplyTokenRefreshTokenRequest
}

// ApplyTokenAuthorizationCodeRequestAsApplyTokenRequest is a convenience function that returns ApplyTokenAuthorizationCodeRequest wrapped in ApplyTokenRequest
func ApplyTokenAuthorizationCodeRequestAsApplyTokenRequest(v *ApplyTokenAuthorizationCodeRequest) ApplyTokenRequest {
	return ApplyTokenRequest{
		ApplyTokenAuthorizationCodeRequest: v,
	}
}

// ApplyTokenRefreshTokenRequestAsApplyTokenRequest is a convenience function that returns ApplyTokenRefreshTokenRequest wrapped in ApplyTokenRequest
func ApplyTokenRefreshTokenRequestAsApplyTokenRequest(v *ApplyTokenRefreshTokenRequest) ApplyTokenRequest {
	return ApplyTokenRequest{
		ApplyTokenRefreshTokenRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApplyTokenRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApplyTokenAuthorizationCodeRequest
	err = utils.NewStrictDecoder(data).Decode(&dst.ApplyTokenAuthorizationCodeRequest)
	if err == nil {
		jsonApplyTokenAuthorizationCodeRequest, _ := json.Marshal(dst.ApplyTokenAuthorizationCodeRequest)
		if string(jsonApplyTokenAuthorizationCodeRequest) == "{}" { // empty struct
			dst.ApplyTokenAuthorizationCodeRequest = nil
		} else {
			if err = validator.Validate(dst.ApplyTokenAuthorizationCodeRequest); err != nil {
				dst.ApplyTokenAuthorizationCodeRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApplyTokenAuthorizationCodeRequest = nil
	}

	// try to unmarshal data into ApplyTokenRefreshTokenRequest
	err = utils.NewStrictDecoder(data).Decode(&dst.ApplyTokenRefreshTokenRequest)
	if err == nil {
		jsonApplyTokenRefreshTokenRequest, _ := json.Marshal(dst.ApplyTokenRefreshTokenRequest)
		if string(jsonApplyTokenRefreshTokenRequest) == "{}" { // empty struct
			dst.ApplyTokenRefreshTokenRequest = nil
		} else {
			if err = validator.Validate(dst.ApplyTokenRefreshTokenRequest); err != nil {
				dst.ApplyTokenRefreshTokenRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApplyTokenRefreshTokenRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApplyTokenAuthorizationCodeRequest = nil
		dst.ApplyTokenRefreshTokenRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApplyTokenRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApplyTokenRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApplyTokenRequest) MarshalJSON() ([]byte, error) {
	if src.ApplyTokenAuthorizationCodeRequest != nil {
		return json.Marshal(&src.ApplyTokenAuthorizationCodeRequest)
	}

	if src.ApplyTokenRefreshTokenRequest != nil {
		return json.Marshal(&src.ApplyTokenRefreshTokenRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApplyTokenRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApplyTokenAuthorizationCodeRequest != nil {
		return obj.ApplyTokenAuthorizationCodeRequest
	}

	if obj.ApplyTokenRefreshTokenRequest != nil {
		return obj.ApplyTokenRefreshTokenRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ApplyTokenRequest) GetActualInstanceValue() (interface{}) {
	if obj.ApplyTokenAuthorizationCodeRequest != nil {
		return *obj.ApplyTokenAuthorizationCodeRequest
	}

	if obj.ApplyTokenRefreshTokenRequest != nil {
		return *obj.ApplyTokenRefreshTokenRequest
	}

	// all schemas are nil
	return nil
}

type NullableApplyTokenRequest struct {
	value *ApplyTokenRequest
	isSet bool
}

func (v NullableApplyTokenRequest) Get() *ApplyTokenRequest {
	return v.value
}

func (v *NullableApplyTokenRequest) Set(val *ApplyTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyTokenRequest(val *ApplyTokenRequest) *NullableApplyTokenRequest {
	return &NullableApplyTokenRequest{value: val, isSet: true}
}

func (v NullableApplyTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


