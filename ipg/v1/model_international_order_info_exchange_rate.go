/*
IPG Cashier Pay API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipg

import (
	"encoding/json"
	utils "github.com/dana-id/go_client/utils"
)

// checks if the InternationalOrderInfoExchangeRate type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &InternationalOrderInfoExchangeRate{}

// InternationalOrderInfoExchangeRate Define the detail of exchange rate information
type InternationalOrderInfoExchangeRate struct {
	// Rate of exchange value represents the relation between two currencies. For example, 15917.2690 indicates that one USD is equivalent to 15917.2690 IDR
	Rate *string `json:"rate,omitempty"`
	// Exchange rate between two currencies. For example USD/IDR, refers to how much of one currency (in this case, Indonesian Rupiah or IDR) can be exchanged for one unit of another currency (in this case, US Dollar or USD)
	ExchangeRelation *string `json:"exchangeRelation,omitempty"`
}

// NewInternationalOrderInfoExchangeRate instantiates a new InternationalOrderInfoExchangeRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternationalOrderInfoExchangeRate() *InternationalOrderInfoExchangeRate {
	this := InternationalOrderInfoExchangeRate{}
	return &this
}

// NewInternationalOrderInfoExchangeRateWithDefaults instantiates a new InternationalOrderInfoExchangeRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternationalOrderInfoExchangeRateWithDefaults() *InternationalOrderInfoExchangeRate {
	this := InternationalOrderInfoExchangeRate{}
	return &this
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *InternationalOrderInfoExchangeRate) GetRate() string {
	if o == nil || utils.IsNil(o.Rate) {
		var ret string
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalOrderInfoExchangeRate) GetRateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *InternationalOrderInfoExchangeRate) HasRate() bool {
	if o != nil && !utils.IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given string and assigns it to the Rate field.
func (o *InternationalOrderInfoExchangeRate) SetRate(v string) {
	o.Rate = &v
}

// GetExchangeRelation returns the ExchangeRelation field value if set, zero value otherwise.
func (o *InternationalOrderInfoExchangeRate) GetExchangeRelation() string {
	if o == nil || utils.IsNil(o.ExchangeRelation) {
		var ret string
		return ret
	}
	return *o.ExchangeRelation
}

// GetExchangeRelationOk returns a tuple with the ExchangeRelation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalOrderInfoExchangeRate) GetExchangeRelationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExchangeRelation) {
		return nil, false
	}
	return o.ExchangeRelation, true
}

// HasExchangeRelation returns a boolean if a field has been set.
func (o *InternationalOrderInfoExchangeRate) HasExchangeRelation() bool {
	if o != nil && !utils.IsNil(o.ExchangeRelation) {
		return true
	}

	return false
}

// SetExchangeRelation gets a reference to the given string and assigns it to the ExchangeRelation field.
func (o *InternationalOrderInfoExchangeRate) SetExchangeRelation(v string) {
	o.ExchangeRelation = &v
}

func (o InternationalOrderInfoExchangeRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InternationalOrderInfoExchangeRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !utils.IsNil(o.ExchangeRelation) {
		toSerialize["exchangeRelation"] = o.ExchangeRelation
	}
	return toSerialize, nil
}

type NullableInternationalOrderInfoExchangeRate struct {
	value *InternationalOrderInfoExchangeRate
	isSet bool
}

func (v NullableInternationalOrderInfoExchangeRate) Get() *InternationalOrderInfoExchangeRate {
	return v.value
}

func (v *NullableInternationalOrderInfoExchangeRate) Set(val *InternationalOrderInfoExchangeRate) {
	v.value = val
	v.isSet = true
}

func (v NullableInternationalOrderInfoExchangeRate) IsSet() bool {
	return v.isSet
}

func (v *NullableInternationalOrderInfoExchangeRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternationalOrderInfoExchangeRate(val *InternationalOrderInfoExchangeRate) *NullableInternationalOrderInfoExchangeRate {
	return &NullableInternationalOrderInfoExchangeRate{value: val, isSet: true}
}

func (v NullableInternationalOrderInfoExchangeRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternationalOrderInfoExchangeRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


