/*
IPG Cashier Pay API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipg

import (
	"encoding/json"
	utils "github.com/dana-id/go_client/utils"
)

// checks if the ServiceInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ServiceInfo{}

// ServiceInfo struct for ServiceInfo
type ServiceInfo struct {
	ServiceType *string `json:"serviceType,omitempty"`
	ServiceScenario *string `json:"serviceScenario,omitempty"`
	// Extend information
	ExtendInfo *string `json:"extendInfo,omitempty"`
}

// NewServiceInfo instantiates a new ServiceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceInfo() *ServiceInfo {
	this := ServiceInfo{}
	return &this
}

// NewServiceInfoWithDefaults instantiates a new ServiceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceInfoWithDefaults() *ServiceInfo {
	this := ServiceInfo{}
	return &this
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *ServiceInfo) GetServiceType() string {
	if o == nil || utils.IsNil(o.ServiceType) {
		var ret string
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInfo) GetServiceTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *ServiceInfo) HasServiceType() bool {
	if o != nil && !utils.IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given string and assigns it to the ServiceType field.
func (o *ServiceInfo) SetServiceType(v string) {
	o.ServiceType = &v
}

// GetServiceScenario returns the ServiceScenario field value if set, zero value otherwise.
func (o *ServiceInfo) GetServiceScenario() string {
	if o == nil || utils.IsNil(o.ServiceScenario) {
		var ret string
		return ret
	}
	return *o.ServiceScenario
}

// GetServiceScenarioOk returns a tuple with the ServiceScenario field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInfo) GetServiceScenarioOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ServiceScenario) {
		return nil, false
	}
	return o.ServiceScenario, true
}

// HasServiceScenario returns a boolean if a field has been set.
func (o *ServiceInfo) HasServiceScenario() bool {
	if o != nil && !utils.IsNil(o.ServiceScenario) {
		return true
	}

	return false
}

// SetServiceScenario gets a reference to the given string and assigns it to the ServiceScenario field.
func (o *ServiceInfo) SetServiceScenario(v string) {
	o.ServiceScenario = &v
}

// GetExtendInfo returns the ExtendInfo field value if set, zero value otherwise.
func (o *ServiceInfo) GetExtendInfo() string {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		var ret string
		return ret
	}
	return *o.ExtendInfo
}

// GetExtendInfoOk returns a tuple with the ExtendInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInfo) GetExtendInfoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		return nil, false
	}
	return o.ExtendInfo, true
}

// HasExtendInfo returns a boolean if a field has been set.
func (o *ServiceInfo) HasExtendInfo() bool {
	if o != nil && !utils.IsNil(o.ExtendInfo) {
		return true
	}

	return false
}

// SetExtendInfo gets a reference to the given string and assigns it to the ExtendInfo field.
func (o *ServiceInfo) SetExtendInfo(v string) {
	o.ExtendInfo = &v
}

func (o ServiceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ServiceType) {
		toSerialize["serviceType"] = o.ServiceType
	}
	if !utils.IsNil(o.ServiceScenario) {
		toSerialize["serviceScenario"] = o.ServiceScenario
	}
	if !utils.IsNil(o.ExtendInfo) {
		toSerialize["extendInfo"] = o.ExtendInfo
	}
	return toSerialize, nil
}

type NullableServiceInfo struct {
	value *ServiceInfo
	isSet bool
}

func (v NullableServiceInfo) Get() *ServiceInfo {
	return v.value
}

func (v *NullableServiceInfo) Set(val *ServiceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceInfo(val *ServiceInfo) *NullableServiceInfo {
	return &NullableServiceInfo{value: val, isSet: true}
}

func (v NullableServiceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


