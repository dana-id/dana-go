/*
IPG Cashier Pay API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipg

import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the ApplyTokenResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApplyTokenResponse{}

// ApplyTokenResponse struct for ApplyTokenResponse
type ApplyTokenResponse struct {
	// Response code. Refer to https://dashboard.dana.id/api-docs/read/110#HTML-ApplyToken-ResponseCodeandMessage
	ResponseCode string `json:"responseCode"`
	// Response message. Refer to https://dashboard.dana.id/api-docs/read/110#HTML-ApplyToken-ResponseCodeandMessage
	ResponseMessage string `json:"responseMessage"`
	// Token type. Present if successfully processed
	TokenType *string `json:"tokenType,omitempty"`
	// This token is called Customer Token that will be used as a parameter on header in other API “Authorization-Customer”. Present if successfully processed
	AccessToken string `json:"accessToken"`
	// Expiry time for access token was given to user, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time). Present if successfully processed
	AccessTokenExpiryTime *string `json:"accessTokenExpiryTime,omitempty" validate:"regexp=^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\+07:00$"`
	// This token is used for refresh session if existing token has been expired. Present if successfully processed
	RefreshToken *string `json:"refreshToken,omitempty"`
	// Expiry time for refresh token was given to user, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time). Present if successfully processed
	RefreshTokenExpiryTime *string `json:"refreshTokenExpiryTime,omitempty" validate:"regexp=^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\+07:00$"`
	// Additional information
	AdditionalInfo *ApplyTokenResponseAdditionalInfo `json:"additionalInfo,omitempty"`
}

type _ApplyTokenResponse ApplyTokenResponse

// NewApplyTokenResponse instantiates a new ApplyTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplyTokenResponse(responseCode string, responseMessage string, accessToken string) *ApplyTokenResponse {
	this := ApplyTokenResponse{}
	this.ResponseCode = responseCode
	this.ResponseMessage = responseMessage
	this.AccessToken = accessToken
	return &this
}

// NewApplyTokenResponseWithDefaults instantiates a new ApplyTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyTokenResponseWithDefaults() *ApplyTokenResponse {
	this := ApplyTokenResponse{}
	return &this
}

// GetResponseCode returns the ResponseCode field value
func (o *ApplyTokenResponse) GetResponseCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value
// and a boolean to check if the value has been set.
func (o *ApplyTokenResponse) GetResponseCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseCode, true
}

// SetResponseCode sets field value
func (o *ApplyTokenResponse) SetResponseCode(v string) {
	o.ResponseCode = v
}

// GetResponseMessage returns the ResponseMessage field value
func (o *ApplyTokenResponse) GetResponseMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseMessage
}

// GetResponseMessageOk returns a tuple with the ResponseMessage field value
// and a boolean to check if the value has been set.
func (o *ApplyTokenResponse) GetResponseMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseMessage, true
}

// SetResponseMessage sets field value
func (o *ApplyTokenResponse) SetResponseMessage(v string) {
	o.ResponseMessage = v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *ApplyTokenResponse) GetTokenType() string {
	if o == nil || utils.IsNil(o.TokenType) {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTokenResponse) GetTokenTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TokenType) {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *ApplyTokenResponse) HasTokenType() bool {
	if o != nil && !utils.IsNil(o.TokenType) {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *ApplyTokenResponse) SetTokenType(v string) {
	o.TokenType = &v
}

// GetAccessToken returns the AccessToken field value
func (o *ApplyTokenResponse) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *ApplyTokenResponse) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *ApplyTokenResponse) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetAccessTokenExpiryTime returns the AccessTokenExpiryTime field value if set, zero value otherwise.
func (o *ApplyTokenResponse) GetAccessTokenExpiryTime() string {
	if o == nil || utils.IsNil(o.AccessTokenExpiryTime) {
		var ret string
		return ret
	}
	return *o.AccessTokenExpiryTime
}

// GetAccessTokenExpiryTimeOk returns a tuple with the AccessTokenExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTokenResponse) GetAccessTokenExpiryTimeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AccessTokenExpiryTime) {
		return nil, false
	}
	return o.AccessTokenExpiryTime, true
}

// HasAccessTokenExpiryTime returns a boolean if a field has been set.
func (o *ApplyTokenResponse) HasAccessTokenExpiryTime() bool {
	if o != nil && !utils.IsNil(o.AccessTokenExpiryTime) {
		return true
	}

	return false
}

// SetAccessTokenExpiryTime gets a reference to the given string and assigns it to the AccessTokenExpiryTime field.
func (o *ApplyTokenResponse) SetAccessTokenExpiryTime(v string) {
	o.AccessTokenExpiryTime = &v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *ApplyTokenResponse) GetRefreshToken() string {
	if o == nil || utils.IsNil(o.RefreshToken) {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTokenResponse) GetRefreshTokenOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RefreshToken) {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *ApplyTokenResponse) HasRefreshToken() bool {
	if o != nil && !utils.IsNil(o.RefreshToken) {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *ApplyTokenResponse) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetRefreshTokenExpiryTime returns the RefreshTokenExpiryTime field value if set, zero value otherwise.
func (o *ApplyTokenResponse) GetRefreshTokenExpiryTime() string {
	if o == nil || utils.IsNil(o.RefreshTokenExpiryTime) {
		var ret string
		return ret
	}
	return *o.RefreshTokenExpiryTime
}

// GetRefreshTokenExpiryTimeOk returns a tuple with the RefreshTokenExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTokenResponse) GetRefreshTokenExpiryTimeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RefreshTokenExpiryTime) {
		return nil, false
	}
	return o.RefreshTokenExpiryTime, true
}

// HasRefreshTokenExpiryTime returns a boolean if a field has been set.
func (o *ApplyTokenResponse) HasRefreshTokenExpiryTime() bool {
	if o != nil && !utils.IsNil(o.RefreshTokenExpiryTime) {
		return true
	}

	return false
}

// SetRefreshTokenExpiryTime gets a reference to the given string and assigns it to the RefreshTokenExpiryTime field.
func (o *ApplyTokenResponse) SetRefreshTokenExpiryTime(v string) {
	o.RefreshTokenExpiryTime = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *ApplyTokenResponse) GetAdditionalInfo() ApplyTokenResponseAdditionalInfo {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		var ret ApplyTokenResponseAdditionalInfo
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTokenResponse) GetAdditionalInfoOk() (*ApplyTokenResponseAdditionalInfo, bool) {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *ApplyTokenResponse) HasAdditionalInfo() bool {
	if o != nil && !utils.IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given ApplyTokenResponseAdditionalInfo and assigns it to the AdditionalInfo field.
func (o *ApplyTokenResponse) SetAdditionalInfo(v ApplyTokenResponseAdditionalInfo) {
	o.AdditionalInfo = &v
}

func (o ApplyTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["responseCode"] = o.ResponseCode
	toSerialize["responseMessage"] = o.ResponseMessage
	if !utils.IsNil(o.TokenType) {
		toSerialize["tokenType"] = o.TokenType
	}
	toSerialize["accessToken"] = o.AccessToken
	if !utils.IsNil(o.AccessTokenExpiryTime) {
		toSerialize["accessTokenExpiryTime"] = o.AccessTokenExpiryTime
	}
	if !utils.IsNil(o.RefreshToken) {
		toSerialize["refreshToken"] = o.RefreshToken
	}
	if !utils.IsNil(o.RefreshTokenExpiryTime) {
		toSerialize["refreshTokenExpiryTime"] = o.RefreshTokenExpiryTime
	}
	if !utils.IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	return toSerialize, nil
}

func (o *ApplyTokenResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"responseCode",
		"responseMessage",
		"accessToken",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplyTokenResponse := _ApplyTokenResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplyTokenResponse)

	if err != nil {
		return err
	}

	*o = ApplyTokenResponse(varApplyTokenResponse)

	return err
}

type NullableApplyTokenResponse struct {
	value *ApplyTokenResponse
	isSet bool
}

func (v NullableApplyTokenResponse) Get() *ApplyTokenResponse {
	return v.value
}

func (v *NullableApplyTokenResponse) Set(val *ApplyTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyTokenResponse(val *ApplyTokenResponse) *NullableApplyTokenResponse {
	return &NullableApplyTokenResponse{value: val, isSet: true}
}

func (v NullableApplyTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


