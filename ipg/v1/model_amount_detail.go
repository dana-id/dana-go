/*
IPG Cashier Pay API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipg

import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/go_client/utils"
)

// checks if the AmountDetail type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AmountDetail{}

// AmountDetail struct for AmountDetail
type AmountDetail struct {
	// Order amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	OrderAmount Money `json:"orderAmount"`
	// Pay amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	PayAmount *Money `json:"payAmount,omitempty"`
	// Void amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	VoidAmount *Money `json:"voidAmount,omitempty"`
	// Confirm amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	ConfirmAmount *Money `json:"confirmAmount,omitempty"`
	// Refund amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	RefundAmount *Money `json:"refundAmount,omitempty"`
	// Chargeback amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	ChargebackAmount *Money `json:"chargebackAmount,omitempty"`
	// Charge amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	ChargeAmount *Money `json:"chargeAmount,omitempty"`
}

type _AmountDetail AmountDetail

// NewAmountDetail instantiates a new AmountDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmountDetail(orderAmount Money) *AmountDetail {
	this := AmountDetail{}
	this.OrderAmount = orderAmount
	return &this
}

// NewAmountDetailWithDefaults instantiates a new AmountDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmountDetailWithDefaults() *AmountDetail {
	this := AmountDetail{}
	return &this
}

// GetOrderAmount returns the OrderAmount field value
func (o *AmountDetail) GetOrderAmount() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.OrderAmount
}

// GetOrderAmountOk returns a tuple with the OrderAmount field value
// and a boolean to check if the value has been set.
func (o *AmountDetail) GetOrderAmountOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderAmount, true
}

// SetOrderAmount sets field value
func (o *AmountDetail) SetOrderAmount(v Money) {
	o.OrderAmount = v
}

// GetPayAmount returns the PayAmount field value if set, zero value otherwise.
func (o *AmountDetail) GetPayAmount() Money {
	if o == nil || utils.IsNil(o.PayAmount) {
		var ret Money
		return ret
	}
	return *o.PayAmount
}

// GetPayAmountOk returns a tuple with the PayAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountDetail) GetPayAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.PayAmount) {
		return nil, false
	}
	return o.PayAmount, true
}

// HasPayAmount returns a boolean if a field has been set.
func (o *AmountDetail) HasPayAmount() bool {
	if o != nil && !utils.IsNil(o.PayAmount) {
		return true
	}

	return false
}

// SetPayAmount gets a reference to the given Money and assigns it to the PayAmount field.
func (o *AmountDetail) SetPayAmount(v Money) {
	o.PayAmount = &v
}

// GetVoidAmount returns the VoidAmount field value if set, zero value otherwise.
func (o *AmountDetail) GetVoidAmount() Money {
	if o == nil || utils.IsNil(o.VoidAmount) {
		var ret Money
		return ret
	}
	return *o.VoidAmount
}

// GetVoidAmountOk returns a tuple with the VoidAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountDetail) GetVoidAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.VoidAmount) {
		return nil, false
	}
	return o.VoidAmount, true
}

// HasVoidAmount returns a boolean if a field has been set.
func (o *AmountDetail) HasVoidAmount() bool {
	if o != nil && !utils.IsNil(o.VoidAmount) {
		return true
	}

	return false
}

// SetVoidAmount gets a reference to the given Money and assigns it to the VoidAmount field.
func (o *AmountDetail) SetVoidAmount(v Money) {
	o.VoidAmount = &v
}

// GetConfirmAmount returns the ConfirmAmount field value if set, zero value otherwise.
func (o *AmountDetail) GetConfirmAmount() Money {
	if o == nil || utils.IsNil(o.ConfirmAmount) {
		var ret Money
		return ret
	}
	return *o.ConfirmAmount
}

// GetConfirmAmountOk returns a tuple with the ConfirmAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountDetail) GetConfirmAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.ConfirmAmount) {
		return nil, false
	}
	return o.ConfirmAmount, true
}

// HasConfirmAmount returns a boolean if a field has been set.
func (o *AmountDetail) HasConfirmAmount() bool {
	if o != nil && !utils.IsNil(o.ConfirmAmount) {
		return true
	}

	return false
}

// SetConfirmAmount gets a reference to the given Money and assigns it to the ConfirmAmount field.
func (o *AmountDetail) SetConfirmAmount(v Money) {
	o.ConfirmAmount = &v
}

// GetRefundAmount returns the RefundAmount field value if set, zero value otherwise.
func (o *AmountDetail) GetRefundAmount() Money {
	if o == nil || utils.IsNil(o.RefundAmount) {
		var ret Money
		return ret
	}
	return *o.RefundAmount
}

// GetRefundAmountOk returns a tuple with the RefundAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountDetail) GetRefundAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.RefundAmount) {
		return nil, false
	}
	return o.RefundAmount, true
}

// HasRefundAmount returns a boolean if a field has been set.
func (o *AmountDetail) HasRefundAmount() bool {
	if o != nil && !utils.IsNil(o.RefundAmount) {
		return true
	}

	return false
}

// SetRefundAmount gets a reference to the given Money and assigns it to the RefundAmount field.
func (o *AmountDetail) SetRefundAmount(v Money) {
	o.RefundAmount = &v
}

// GetChargebackAmount returns the ChargebackAmount field value if set, zero value otherwise.
func (o *AmountDetail) GetChargebackAmount() Money {
	if o == nil || utils.IsNil(o.ChargebackAmount) {
		var ret Money
		return ret
	}
	return *o.ChargebackAmount
}

// GetChargebackAmountOk returns a tuple with the ChargebackAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountDetail) GetChargebackAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.ChargebackAmount) {
		return nil, false
	}
	return o.ChargebackAmount, true
}

// HasChargebackAmount returns a boolean if a field has been set.
func (o *AmountDetail) HasChargebackAmount() bool {
	if o != nil && !utils.IsNil(o.ChargebackAmount) {
		return true
	}

	return false
}

// SetChargebackAmount gets a reference to the given Money and assigns it to the ChargebackAmount field.
func (o *AmountDetail) SetChargebackAmount(v Money) {
	o.ChargebackAmount = &v
}

// GetChargeAmount returns the ChargeAmount field value if set, zero value otherwise.
func (o *AmountDetail) GetChargeAmount() Money {
	if o == nil || utils.IsNil(o.ChargeAmount) {
		var ret Money
		return ret
	}
	return *o.ChargeAmount
}

// GetChargeAmountOk returns a tuple with the ChargeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountDetail) GetChargeAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.ChargeAmount) {
		return nil, false
	}
	return o.ChargeAmount, true
}

// HasChargeAmount returns a boolean if a field has been set.
func (o *AmountDetail) HasChargeAmount() bool {
	if o != nil && !utils.IsNil(o.ChargeAmount) {
		return true
	}

	return false
}

// SetChargeAmount gets a reference to the given Money and assigns it to the ChargeAmount field.
func (o *AmountDetail) SetChargeAmount(v Money) {
	o.ChargeAmount = &v
}

func (o AmountDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AmountDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["orderAmount"] = o.OrderAmount
	if !utils.IsNil(o.PayAmount) {
		toSerialize["payAmount"] = o.PayAmount
	}
	if !utils.IsNil(o.VoidAmount) {
		toSerialize["voidAmount"] = o.VoidAmount
	}
	if !utils.IsNil(o.ConfirmAmount) {
		toSerialize["confirmAmount"] = o.ConfirmAmount
	}
	if !utils.IsNil(o.RefundAmount) {
		toSerialize["refundAmount"] = o.RefundAmount
	}
	if !utils.IsNil(o.ChargebackAmount) {
		toSerialize["chargebackAmount"] = o.ChargebackAmount
	}
	if !utils.IsNil(o.ChargeAmount) {
		toSerialize["chargeAmount"] = o.ChargeAmount
	}
	return toSerialize, nil
}

func (o *AmountDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"orderAmount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAmountDetail := _AmountDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAmountDetail)

	if err != nil {
		return err
	}

	*o = AmountDetail(varAmountDetail)

	return err
}

type NullableAmountDetail struct {
	value *AmountDetail
	isSet bool
}

func (v NullableAmountDetail) Get() *AmountDetail {
	return v.value
}

func (v *NullableAmountDetail) Set(val *AmountDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAmountDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAmountDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmountDetail(val *AmountDetail) *NullableAmountDetail {
	return &NullableAmountDetail{value: val, isSet: true}
}

func (v NullableAmountDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmountDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


