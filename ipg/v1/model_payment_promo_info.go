/*
IPG Cashier Pay API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipg

import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the PaymentPromoInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PaymentPromoInfo{}

// PaymentPromoInfo Information about the payment promotion that was applied
type PaymentPromoInfo struct {
	// Promotion identifier
	PromoId string `json:"promoId"`
	// Promotion name
	PromoName string `json:"promoName"`
	// Type of promotion
	PromoType string `json:"promoType"`
	// Savings amount from this promotion. Contains value (amount including cents) and currency (code based on ISO)
	SavingsAmount Money `json:"savingsAmount"`
}

type _PaymentPromoInfo PaymentPromoInfo

// NewPaymentPromoInfo instantiates a new PaymentPromoInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentPromoInfo(promoId string, promoName string, promoType string, savingsAmount Money) *PaymentPromoInfo {
	this := PaymentPromoInfo{}
	this.PromoId = promoId
	this.PromoName = promoName
	this.PromoType = promoType
	this.SavingsAmount = savingsAmount
	return &this
}

// NewPaymentPromoInfoWithDefaults instantiates a new PaymentPromoInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentPromoInfoWithDefaults() *PaymentPromoInfo {
	this := PaymentPromoInfo{}
	return &this
}

// GetPromoId returns the PromoId field value
func (o *PaymentPromoInfo) GetPromoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PromoId
}

// GetPromoIdOk returns a tuple with the PromoId field value
// and a boolean to check if the value has been set.
func (o *PaymentPromoInfo) GetPromoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PromoId, true
}

// SetPromoId sets field value
func (o *PaymentPromoInfo) SetPromoId(v string) {
	o.PromoId = v
}

// GetPromoName returns the PromoName field value
func (o *PaymentPromoInfo) GetPromoName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PromoName
}

// GetPromoNameOk returns a tuple with the PromoName field value
// and a boolean to check if the value has been set.
func (o *PaymentPromoInfo) GetPromoNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PromoName, true
}

// SetPromoName sets field value
func (o *PaymentPromoInfo) SetPromoName(v string) {
	o.PromoName = v
}

// GetPromoType returns the PromoType field value
func (o *PaymentPromoInfo) GetPromoType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PromoType
}

// GetPromoTypeOk returns a tuple with the PromoType field value
// and a boolean to check if the value has been set.
func (o *PaymentPromoInfo) GetPromoTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PromoType, true
}

// SetPromoType sets field value
func (o *PaymentPromoInfo) SetPromoType(v string) {
	o.PromoType = v
}

// GetSavingsAmount returns the SavingsAmount field value
func (o *PaymentPromoInfo) GetSavingsAmount() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.SavingsAmount
}

// GetSavingsAmountOk returns a tuple with the SavingsAmount field value
// and a boolean to check if the value has been set.
func (o *PaymentPromoInfo) GetSavingsAmountOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SavingsAmount, true
}

// SetSavingsAmount sets field value
func (o *PaymentPromoInfo) SetSavingsAmount(v Money) {
	o.SavingsAmount = v
}

func (o PaymentPromoInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentPromoInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["promoId"] = o.PromoId
	toSerialize["promoName"] = o.PromoName
	toSerialize["promoType"] = o.PromoType
	toSerialize["savingsAmount"] = o.SavingsAmount
	return toSerialize, nil
}

func (o *PaymentPromoInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"promoId",
		"promoName",
		"promoType",
		"savingsAmount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentPromoInfo := _PaymentPromoInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentPromoInfo)

	if err != nil {
		return err
	}

	*o = PaymentPromoInfo(varPaymentPromoInfo)

	return err
}

type NullablePaymentPromoInfo struct {
	value *PaymentPromoInfo
	isSet bool
}

func (v NullablePaymentPromoInfo) Get() *PaymentPromoInfo {
	return v.value
}

func (v *NullablePaymentPromoInfo) Set(val *PaymentPromoInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentPromoInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentPromoInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentPromoInfo(val *PaymentPromoInfo) *NullablePaymentPromoInfo {
	return &NullablePaymentPromoInfo{value: val, isSet: true}
}

func (v NullablePaymentPromoInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentPromoInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


