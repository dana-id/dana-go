/*
IPG Cashier Pay API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipg

import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the AccountUnbindingRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AccountUnbindingRequest{}

// AccountUnbindingRequest struct for AccountUnbindingRequest
type AccountUnbindingRequest struct {
	// Merchant identifier that is unique per each merchant
	MerchantId string `json:"merchantId"`
	// Information of sub merchant identifier
	SubMerchantId *string `json:"subMerchantId,omitempty"`
	// Unique transaction identifier on partner system which assigned to each transaction
	PartnerReferenceNo *string `json:"partnerReferenceNo,omitempty"`
	// Information of link identifier
	LinkId *string `json:"linkId,omitempty"`
	// Information of token identifier
	TokenId *string `json:"tokenId,omitempty"`
	// Additional information
	AdditionalInfo AccountUnbindingRequestAdditionalInfo `json:"additionalInfo"`
}

type _AccountUnbindingRequest AccountUnbindingRequest

// NewAccountUnbindingRequest instantiates a new AccountUnbindingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountUnbindingRequest(merchantId string, additionalInfo AccountUnbindingRequestAdditionalInfo) *AccountUnbindingRequest {
	this := AccountUnbindingRequest{}
	this.MerchantId = merchantId
	this.AdditionalInfo = additionalInfo
	return &this
}

// NewAccountUnbindingRequestWithDefaults instantiates a new AccountUnbindingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountUnbindingRequestWithDefaults() *AccountUnbindingRequest {
	this := AccountUnbindingRequest{}
	return &this
}

// GetMerchantId returns the MerchantId field value
func (o *AccountUnbindingRequest) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *AccountUnbindingRequest) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *AccountUnbindingRequest) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetSubMerchantId returns the SubMerchantId field value if set, zero value otherwise.
func (o *AccountUnbindingRequest) GetSubMerchantId() string {
	if o == nil || utils.IsNil(o.SubMerchantId) {
		var ret string
		return ret
	}
	return *o.SubMerchantId
}

// GetSubMerchantIdOk returns a tuple with the SubMerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUnbindingRequest) GetSubMerchantIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SubMerchantId) {
		return nil, false
	}
	return o.SubMerchantId, true
}

// HasSubMerchantId returns a boolean if a field has been set.
func (o *AccountUnbindingRequest) HasSubMerchantId() bool {
	if o != nil && !utils.IsNil(o.SubMerchantId) {
		return true
	}

	return false
}

// SetSubMerchantId gets a reference to the given string and assigns it to the SubMerchantId field.
func (o *AccountUnbindingRequest) SetSubMerchantId(v string) {
	o.SubMerchantId = &v
}

// GetPartnerReferenceNo returns the PartnerReferenceNo field value if set, zero value otherwise.
func (o *AccountUnbindingRequest) GetPartnerReferenceNo() string {
	if o == nil || utils.IsNil(o.PartnerReferenceNo) {
		var ret string
		return ret
	}
	return *o.PartnerReferenceNo
}

// GetPartnerReferenceNoOk returns a tuple with the PartnerReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUnbindingRequest) GetPartnerReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PartnerReferenceNo) {
		return nil, false
	}
	return o.PartnerReferenceNo, true
}

// HasPartnerReferenceNo returns a boolean if a field has been set.
func (o *AccountUnbindingRequest) HasPartnerReferenceNo() bool {
	if o != nil && !utils.IsNil(o.PartnerReferenceNo) {
		return true
	}

	return false
}

// SetPartnerReferenceNo gets a reference to the given string and assigns it to the PartnerReferenceNo field.
func (o *AccountUnbindingRequest) SetPartnerReferenceNo(v string) {
	o.PartnerReferenceNo = &v
}

// GetLinkId returns the LinkId field value if set, zero value otherwise.
func (o *AccountUnbindingRequest) GetLinkId() string {
	if o == nil || utils.IsNil(o.LinkId) {
		var ret string
		return ret
	}
	return *o.LinkId
}

// GetLinkIdOk returns a tuple with the LinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUnbindingRequest) GetLinkIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.LinkId) {
		return nil, false
	}
	return o.LinkId, true
}

// HasLinkId returns a boolean if a field has been set.
func (o *AccountUnbindingRequest) HasLinkId() bool {
	if o != nil && !utils.IsNil(o.LinkId) {
		return true
	}

	return false
}

// SetLinkId gets a reference to the given string and assigns it to the LinkId field.
func (o *AccountUnbindingRequest) SetLinkId(v string) {
	o.LinkId = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *AccountUnbindingRequest) GetTokenId() string {
	if o == nil || utils.IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUnbindingRequest) GetTokenIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *AccountUnbindingRequest) HasTokenId() bool {
	if o != nil && !utils.IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *AccountUnbindingRequest) SetTokenId(v string) {
	o.TokenId = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value
func (o *AccountUnbindingRequest) GetAdditionalInfo() AccountUnbindingRequestAdditionalInfo {
	if o == nil {
		var ret AccountUnbindingRequestAdditionalInfo
		return ret
	}

	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value
// and a boolean to check if the value has been set.
func (o *AccountUnbindingRequest) GetAdditionalInfoOk() (*AccountUnbindingRequestAdditionalInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdditionalInfo, true
}

// SetAdditionalInfo sets field value
func (o *AccountUnbindingRequest) SetAdditionalInfo(v AccountUnbindingRequestAdditionalInfo) {
	o.AdditionalInfo = v
}

func (o AccountUnbindingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountUnbindingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchantId"] = o.MerchantId
	if !utils.IsNil(o.SubMerchantId) {
		toSerialize["subMerchantId"] = o.SubMerchantId
	}
	if !utils.IsNil(o.PartnerReferenceNo) {
		toSerialize["partnerReferenceNo"] = o.PartnerReferenceNo
	}
	if !utils.IsNil(o.LinkId) {
		toSerialize["linkId"] = o.LinkId
	}
	if !utils.IsNil(o.TokenId) {
		toSerialize["tokenId"] = o.TokenId
	}
	toSerialize["additionalInfo"] = o.AdditionalInfo
	return toSerialize, nil
}

func (o *AccountUnbindingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchantId",
		"additionalInfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountUnbindingRequest := _AccountUnbindingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountUnbindingRequest)

	if err != nil {
		return err
	}

	*o = AccountUnbindingRequest(varAccountUnbindingRequest)

	return err
}

type NullableAccountUnbindingRequest struct {
	value *AccountUnbindingRequest
	isSet bool
}

func (v NullableAccountUnbindingRequest) Get() *AccountUnbindingRequest {
	return v.value
}

func (v *NullableAccountUnbindingRequest) Set(val *AccountUnbindingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountUnbindingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountUnbindingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountUnbindingRequest(val *AccountUnbindingRequest) *NullableAccountUnbindingRequest {
	return &NullableAccountUnbindingRequest{value: val, isSet: true}
}

func (v NullableAccountUnbindingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountUnbindingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


