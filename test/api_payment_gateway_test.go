/*
Payment Gateway API

Testing PaymentGatewayAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"testing"

	"github.com/dana-id/go_client/test/fixtures"
	"github.com/joho/godotenv"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	payment_gateway "github.com/dana-id/go_client/payment_gateway/v1"
	webhook "github.com/dana-id/go_client/webhook"
)

func init() {
	// Get the current working directory
	cwd, err := os.Getwd()
	if err != nil {
		log.Println("Error getting current directory:", err)
		return
	}

	// Navigate to the root dana-api-client-generator directory
	// From /sdk/dana-go-api-client/test we need to go up three levels
	rootDir := filepath.Dir(filepath.Dir(filepath.Dir(cwd)))

	// Load the .env file from dana-api-client-generator directory
	envPath := filepath.Join(rootDir, ".env")
	err = godotenv.Load(envPath)
	if err != nil {
		log.Printf("Warning: Could not load .env file from %s: %v\n", envPath, err)
		log.Println("Using environment variables from the system.")
	} else {
		log.Printf("Successfully loaded environment variables from %s\n", envPath)
	}
}

func TestPaymentGatewayAPIService(t *testing.T) {
	// Get API client fixture
	apiFixture := fixtures.GetApiClient()

	t.Run("Test PaymentGatewayAPIService ConsultPay", func(t *testing.T) {

		// Skip test in CI environments with no credentials
		if apiFixture.Client == nil {
			t.Skip("Skipping test: No API client credentials")
		}

		// Get ConsultPay request fixture
		consultPayRequest := fixtures.GetConsultPayRequest()

		resp, httpRes, err := apiFixture.Client.PaymentGatewayAPI.
			ConsultPay(apiFixture.Ctx).
			ConsultPayRequest(consultPayRequest).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		// Check for expected fields
		dump, _ := json.Marshal(resp)
		responseMap := make(map[string]interface{})
		err = json.Unmarshal(dump, &responseMap)
		require.Nil(t, err)

		assert.Contains(t, responseMap, "responseCode")
		assert.Contains(t, responseMap, "responseMessage")
	})

	t.Run("Test PaymentGatewayAPIService CreateOrder and QueryPayment", func(t *testing.T) {
		// Skip test in CI environments with no credentials
		if apiFixture.Client == nil {
			t.Skip("Skipping test: No API client credentials")
		}

		// Get CreateOrderByApi request fixture
		createOrderByApiRequest := fixtures.GetCreateOrderByApiRequest()
		createOrderRequest := payment_gateway.CreateOrderRequest{
			CreateOrderByApiRequest: &createOrderByApiRequest,
		}

		respCreateOrder, httpResCreateOrder, err := apiFixture.Client.PaymentGatewayAPI.
			CreateOrder(apiFixture.Ctx).
			CreateOrderRequest(createOrderRequest).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, respCreateOrder)
		assert.Equal(t, 200, httpResCreateOrder.StatusCode)

		// Check for expected data
		assert.Equal(t, createOrderByApiRequest.GetPartnerReferenceNo(), respCreateOrder.GetPartnerReferenceNo())
		assert.NotEmpty(t, respCreateOrder.GetReferenceNo())

		// Get CreateOrderByApi request fixture to use its reference number
		queryPaymentRequest := fixtures.GetQueryPaymentRequest(&createOrderByApiRequest, respCreateOrder)

		respQueryPayment, httpResQueryPayment, err := apiFixture.Client.PaymentGatewayAPI.
			QueryPayment(apiFixture.Ctx).
			QueryPaymentRequest(queryPaymentRequest).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, respQueryPayment)
		assert.Equal(t, 200, httpResQueryPayment.StatusCode)

		// Check for expected data
		assert.Equal(t, createOrderByApiRequest.GetPartnerReferenceNo(), respQueryPayment.GetOriginalPartnerReferenceNo())
	})

	t.Run("Test PaymentGatewayAPIService CancelOrder", func(t *testing.T) {
		// Skip test in CI environments with no credentials
		if apiFixture.Client == nil {
			t.Skip("Skipping test: No API client credentials")
		}

		// Get CreateOrderByApi request fixture
		createOrderByApiRequest := fixtures.GetCreateOrderByApiRequest()
		createOrderRequest := payment_gateway.CreateOrderRequest{
			CreateOrderByApiRequest: &createOrderByApiRequest,
		}

		// First create an order
		respCreateOrder, httpResCreateOrder, err := apiFixture.Client.PaymentGatewayAPI.
			CreateOrder(apiFixture.Ctx).
			CreateOrderRequest(createOrderRequest).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, respCreateOrder)
		assert.Equal(t, 200, httpResCreateOrder.StatusCode)

		// Get CancelOrder request fixture
		cancelOrderRequest := fixtures.GetCancelOrderRequest(&createOrderByApiRequest)

		// Then cancel the order
		respCancelOrder, httpResCancelOrder, err := apiFixture.Client.PaymentGatewayAPI.
			CancelOrder(apiFixture.Ctx).
			CancelOrderRequest(cancelOrderRequest).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, respCancelOrder)
		assert.Equal(t, 200, httpResCancelOrder.StatusCode)

		assert.Equal(t, cancelOrderRequest.GetOriginalPartnerReferenceNo(), respCancelOrder.GetOriginalPartnerReferenceNo())
	})

	// t.Run("Test PaymentGatewayAPIService RefundOrder", func(t *testing.T) {
	// 	// Skip test in CI environments with no credentials
	// 	if apiFixture.Client == nil {
	// 		t.Skip("Skipping test: No API client credentials")
	// 	}

	// 	// Get CreateOrderByApi request fixture
	// 	createOrderByApiRequest := fixtures.GetCreateOrderByApiRequest()
	// 	createOrderRequest := payment_gateway.CreateOrderRequest{
	// 		CreateOrderByApiRequest: &createOrderByApiRequest,
	// 	}

	// 	// First create an order
	// 	respCreateOrder, httpResCreateOrder, err := apiFixture.Client.PaymentGatewayAPI.
	// 		CreateOrder(apiFixture.Ctx).
	// 		CreateOrderRequest(createOrderRequest).
	// 		Execute()

	// 	require.Nil(t, err)
	// 	require.NotNil(t, respCreateOrder)
	// 	assert.Equal(t, 200, httpResCreateOrder.StatusCode)

	// 	// First, make a special query payment request to prepare for refund
	// 	specialQueryRequest := fixtures.GetSpecialQueryPaymentRequest(&createOrderByApiRequest)

	// 	// Execute the special query payment request
	// 	t.Log("Executing special query payment request for refund preparation...")
	// 	queryResponse, queryHttpRes, queryErr := apiFixture.Client.PaymentGatewayAPI.
	// 		QueryPayment(apiFixture.Ctx).
	// 		QueryPaymentRequest(specialQueryRequest).
	// 		Execute()

	// 	// Log the query response or error
	// 	if queryErr != nil {
	// 		t.Logf("Special query payment request error (may be expected in test environment): %v", queryErr)
	// 	} else {
	// 		t.Logf("Special query payment request succeeded with status code: %d", queryHttpRes.StatusCode)
	// 		t.Logf("Response code: %s, message: %s", queryResponse.GetResponseCode(), queryResponse.GetResponseMessage())
	// 	}

	// 	// Get RefundOrder request fixture with additional info fields
	// 	refundOrderRequest := fixtures.GetRefundOrderRequest(&createOrderByApiRequest)

	// 	// Then attempt to refund the order
	// 	t.Log("Executing refund order request...")
	// 	_, httpResRefundOrder, err := apiFixture.Client.PaymentGatewayAPI.
	// 		RefundOrder(apiFixture.Ctx).
	// 		RefundOrderRequest(refundOrderRequest).
	// 		Execute()

	// 	// In a real environment, we might still get an error, but we're testing the API integration
	// 	// so we'll consider any response a success for the test
	// 	if err != nil {
	// 		errorStr := err.Error()
	// 		t.Logf("Refund order request error: %v", err)

	// 		// If we get a 404 with "Invalid Transaction Status", that's expected in test environment
	// 		if httpResRefundOrder != nil && httpResRefundOrder.StatusCode == 404 {
	// 			if strings.Contains(errorStr, "Invalid Transaction Status") {
	// 				t.Log("Received expected 'Invalid Transaction Status' error")
	// 			}
	// 		}

	// 		// We'll consider this a pass since we're just testing the API integration
	// 		return
	// 	}

	// 	// If we get here, the refund succeeded (unlikely in test environment)
	// 	t.Logf("Refund order request succeeded with status code: %d", httpResRefundOrder.StatusCode)
	// })
}

func TestWebhookParser_ParseWebhook(t *testing.T) {
	webhookHttpMethod := "POST"
	webhookRelativeURL := "/v1.0/debit/notify"
	webhookBodyMap := map[string]interface{}{
		"originalPartnerReferenceNo": "TESTPN20240101001",
		"originalReferenceNo":        "TESTREF20240101001",
		"merchantId":                 "TESTMERCH001",
		"subMerchantId":              "TESTSUBMERCH001",
		"amount": map[string]string{
			"value":    "15000.00",
			"currency": "IDR",
		},
		"latestTransactionStatus": "00",
		"transactionStatusDesc":   "Success",
		"createdTime":             "2024-01-01T10:00:00+07:00",
		"finishedTime":            "2024-01-01T10:00:05+07:00",
	}

	webhookBodyBytes, err := json.Marshal(webhookBodyMap)
	assert.NoError(t, err, "Error marshaling webhook body")
	webhookBodyStr := string(webhookBodyBytes)

	minifiedWebhookBodyStr, err := webhook.MinifyJSON(webhookBodyStr)
	assert.NoError(t, err, "Error minifying webhook body")

	generatedHeaders, err := fixtures.GenerateSnapAuthHeaders(webhookHttpMethod, webhookRelativeURL, minifiedWebhookBodyStr)
	assert.NoError(t, err, "Error generating SNAP headers")
	assert.NotEmpty(t, generatedHeaders["X-SIGNATURE"], "X-SIGNATURE should not be empty")
	assert.NotEmpty(t, generatedHeaders["X-TIMESTAMP"], "X-TIMESTAMP should not be empty")

	parser, err := webhook.NewWebhookParser(os.Getenv("WEBHOOK_PUBLIC_KEY"))
	assert.NoError(t, err, "Error creating WebhookParser")
	assert.NotNil(t, parser, "WebhookParser should not be nil")

	reqURL, err := url.Parse(webhookRelativeURL)
	assert.NoError(t, err, "Error parsing webhook URL")

	req, err := http.NewRequest(
		webhookHttpMethod,
		reqURL.String(),
		bytes.NewBufferString(webhookBodyStr),
	)
	assert.NoError(t, err, "Error creating http.Request")

	req.Header.Set("X-SIGNATURE", generatedHeaders["X-SIGNATURE"])
	req.Header.Set("X-TIMESTAMP", generatedHeaders["X-TIMESTAMP"])

	extractedMethod := req.Method
	extractedPath := req.URL.Path

	bodyBytes, err := ioutil.ReadAll(req.Body)
	assert.NoError(t, err, "Error reading request body for test")
	defer req.Body.Close()
	extractedBodyStr := string(bodyBytes)

	parsedData, err := parser.ParseWebhook(
		extractedMethod,
		extractedPath,
		req.Header,
		extractedBodyStr,
	)
	assert.NoError(t, err, "Webhook parsing/verification failed")
	if err == nil {
		assert.NotNil(t, parsedData, "Parsed data should not be nil")

		assert.Equal(t, webhookBodyMap["originalPartnerReferenceNo"], parsedData.OriginalPartnerReferenceNo)
		assert.Equal(t, webhookBodyMap["originalReferenceNo"], parsedData.OriginalReferenceNo)
		amountMap := webhookBodyMap["amount"].(map[string]string)
		assert.Equal(t, amountMap["value"], parsedData.Amount.Value)
		assert.Equal(t, amountMap["currency"], parsedData.Amount.Currency)
		assert.Equal(t, webhookBodyMap["latestTransactionStatus"], parsedData.LatestTransactionStatus)
	}
}
