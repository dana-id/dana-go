/*
Payment Gateway API

Testing PaymentGatewayAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"encoding/json"
	"log"
	"os"
	"path/filepath"
	"testing"

	"github.com/dana-id/go_client/test/fixtures"
	"github.com/joho/godotenv"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	payment_gateway "github.com/dana-id/go_client/payment_gateway/v1"
)

func init() {
	// Get the current working directory
	cwd, err := os.Getwd()
	if err != nil {
		log.Println("Error getting current directory:", err)
		return
	}

	// Navigate to the root dana-api-client-generator directory
	// From /sdk/dana-go-api-client/test we need to go up three levels
	rootDir := filepath.Dir(filepath.Dir(filepath.Dir(cwd)))

	// Load the .env file from dana-api-client-generator directory
	envPath := filepath.Join(rootDir, ".env")
	err = godotenv.Load(envPath)
	if err != nil {
		log.Printf("Warning: Could not load .env file from %s: %v\n", envPath, err)
		log.Println("Using environment variables from the system.")
	} else {
		log.Printf("Successfully loaded environment variables from %s\n", envPath)
	}
}

func TestPaymentGatewayAPIService(t *testing.T) {
	// Get API client fixture
	apiFixture := fixtures.GetApiClient()

	t.Run("Test PaymentGatewayAPIService ConsultPay", func(t *testing.T) {

		// Skip test in CI environments with no credentials
		if apiFixture.Client == nil {
			t.Skip("Skipping test: No API client credentials")
		}

		// Get ConsultPay request fixture
		consultPayRequest := fixtures.GetConsultPayRequest()

		resp, httpRes, err := apiFixture.Client.PaymentGatewayAPI.
			ConsultPay(apiFixture.Ctx).
			ConsultPayRequest(consultPayRequest).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		// Check for expected fields
		dump, _ := json.Marshal(resp)
		responseMap := make(map[string]interface{})
		err = json.Unmarshal(dump, &responseMap)
		require.Nil(t, err)

		assert.Contains(t, responseMap, "responseCode")
		assert.Contains(t, responseMap, "responseMessage")
	})

	t.Run("Test PaymentGatewayAPIService CreateOrder and QueryPayment", func(t *testing.T) {
		// Skip test in CI environments with no credentials
		if apiFixture.Client == nil {
			t.Skip("Skipping test: No API client credentials")
		}

		// Get CreateOrderByApi request fixture
		createOrderByApiRequest := fixtures.GetCreateOrderByApiRequest()
		createOrderRequest := payment_gateway.CreateOrderRequest{
			CreateOrderByApiRequest: &createOrderByApiRequest,
		}

		respCreateOrder, httpResCreateOrder, err := apiFixture.Client.PaymentGatewayAPI.
			CreateOrder(apiFixture.Ctx).
			CreateOrderRequest(createOrderRequest).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, respCreateOrder)
		assert.Equal(t, 200, httpResCreateOrder.StatusCode)

		// Check for expected data
		assert.Equal(t, createOrderByApiRequest.GetPartnerReferenceNo(), respCreateOrder.GetPartnerReferenceNo())
		assert.NotEmpty(t, respCreateOrder.GetReferenceNo())

		// Get CreateOrderByApi request fixture to use its reference number
		queryPaymentRequest := fixtures.GetQueryPaymentRequest(&createOrderByApiRequest, respCreateOrder)

		respQueryPayment, httpResQueryPayment, err := apiFixture.Client.PaymentGatewayAPI.
			QueryPayment(apiFixture.Ctx).
			QueryPaymentRequest(queryPaymentRequest).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, respQueryPayment)
		assert.Equal(t, 200, httpResQueryPayment.StatusCode)

		// Check for expected data
		assert.Equal(t, createOrderByApiRequest.GetPartnerReferenceNo(), respQueryPayment.GetOriginalPartnerReferenceNo())
	})
}
