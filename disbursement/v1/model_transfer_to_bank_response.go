// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package disbursement

/*
Disbursement API

API for doing disbursement operations in DANA, including DANA account inquiry, transfer to DANA, and transfer to bank disbursement

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the TransferToBankResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TransferToBankResponse{}

// TransferToBankResponse struct for TransferToBankResponse
type TransferToBankResponse struct {
	// Refer to response code list
	ResponseCode string `json:"responseCode"`
	// Refer to response code list
	ResponseMessage string `json:"responseMessage"`
	// Transaction identifier on DANA system
	ReferenceNo *string `json:"referenceNo,omitempty"`
	// Unique transaction identifier on partner system which assigned to each transaction<br> Notes:<br> If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before 
	PartnerReferenceNo *string `json:"partnerReferenceNo,omitempty"`
	// Transaction date, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
	TransactionDate *string `json:"transactionDate,omitempty" validate:"regexp=^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\+07:00$"`
	// Reference number
	ReferenceNumber *string `json:"referenceNumber,omitempty"`
	// Additional information
	AdditionalInfo map[string]interface{} `json:"additionalInfo,omitempty"`
}

type _TransferToBankResponse TransferToBankResponse

// NewTransferToBankResponse instantiates a new TransferToBankResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferToBankResponse(responseCode string, responseMessage string) *TransferToBankResponse {
	this := TransferToBankResponse{}
	this.ResponseCode = responseCode
	this.ResponseMessage = responseMessage
	return &this
}

// NewTransferToBankResponseWithDefaults instantiates a new TransferToBankResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferToBankResponseWithDefaults() *TransferToBankResponse {
	this := TransferToBankResponse{}
	return &this
}

// GetResponseCode returns the ResponseCode field value
func (o *TransferToBankResponse) GetResponseCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value
// and a boolean to check if the value has been set.
func (o *TransferToBankResponse) GetResponseCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseCode, true
}

// SetResponseCode sets field value
func (o *TransferToBankResponse) SetResponseCode(v string) {
	o.ResponseCode = v
}

// GetResponseMessage returns the ResponseMessage field value
func (o *TransferToBankResponse) GetResponseMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseMessage
}

// GetResponseMessageOk returns a tuple with the ResponseMessage field value
// and a boolean to check if the value has been set.
func (o *TransferToBankResponse) GetResponseMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseMessage, true
}

// SetResponseMessage sets field value
func (o *TransferToBankResponse) SetResponseMessage(v string) {
	o.ResponseMessage = v
}

// GetReferenceNo returns the ReferenceNo field value if set, zero value otherwise.
func (o *TransferToBankResponse) GetReferenceNo() string {
	if o == nil || utils.IsNil(o.ReferenceNo) {
		var ret string
		return ret
	}
	return *o.ReferenceNo
}

// GetReferenceNoOk returns a tuple with the ReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToBankResponse) GetReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReferenceNo) {
		return nil, false
	}
	return o.ReferenceNo, true
}

// HasReferenceNo returns a boolean if a field has been set.
func (o *TransferToBankResponse) HasReferenceNo() bool {
	if o != nil && !utils.IsNil(o.ReferenceNo) {
		return true
	}

	return false
}

// SetReferenceNo gets a reference to the given string and assigns it to the ReferenceNo field.
func (o *TransferToBankResponse) SetReferenceNo(v string) {
	o.ReferenceNo = &v
}

// GetPartnerReferenceNo returns the PartnerReferenceNo field value if set, zero value otherwise.
func (o *TransferToBankResponse) GetPartnerReferenceNo() string {
	if o == nil || utils.IsNil(o.PartnerReferenceNo) {
		var ret string
		return ret
	}
	return *o.PartnerReferenceNo
}

// GetPartnerReferenceNoOk returns a tuple with the PartnerReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToBankResponse) GetPartnerReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PartnerReferenceNo) {
		return nil, false
	}
	return o.PartnerReferenceNo, true
}

// HasPartnerReferenceNo returns a boolean if a field has been set.
func (o *TransferToBankResponse) HasPartnerReferenceNo() bool {
	if o != nil && !utils.IsNil(o.PartnerReferenceNo) {
		return true
	}

	return false
}

// SetPartnerReferenceNo gets a reference to the given string and assigns it to the PartnerReferenceNo field.
func (o *TransferToBankResponse) SetPartnerReferenceNo(v string) {
	o.PartnerReferenceNo = &v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *TransferToBankResponse) GetTransactionDate() string {
	if o == nil || utils.IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToBankResponse) GetTransactionDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *TransferToBankResponse) HasTransactionDate() bool {
	if o != nil && !utils.IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *TransferToBankResponse) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetReferenceNumber returns the ReferenceNumber field value if set, zero value otherwise.
func (o *TransferToBankResponse) GetReferenceNumber() string {
	if o == nil || utils.IsNil(o.ReferenceNumber) {
		var ret string
		return ret
	}
	return *o.ReferenceNumber
}

// GetReferenceNumberOk returns a tuple with the ReferenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToBankResponse) GetReferenceNumberOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReferenceNumber) {
		return nil, false
	}
	return o.ReferenceNumber, true
}

// HasReferenceNumber returns a boolean if a field has been set.
func (o *TransferToBankResponse) HasReferenceNumber() bool {
	if o != nil && !utils.IsNil(o.ReferenceNumber) {
		return true
	}

	return false
}

// SetReferenceNumber gets a reference to the given string and assigns it to the ReferenceNumber field.
func (o *TransferToBankResponse) SetReferenceNumber(v string) {
	o.ReferenceNumber = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *TransferToBankResponse) GetAdditionalInfo() map[string]interface{} {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToBankResponse) GetAdditionalInfoOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *TransferToBankResponse) HasAdditionalInfo() bool {
	if o != nil && !utils.IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given map[string]interface{} and assigns it to the AdditionalInfo field.
func (o *TransferToBankResponse) SetAdditionalInfo(v map[string]interface{}) {
	o.AdditionalInfo = v
}

func (o TransferToBankResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferToBankResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["responseCode"] = o.ResponseCode
	toSerialize["responseMessage"] = o.ResponseMessage
	if !utils.IsNil(o.ReferenceNo) {
		toSerialize["referenceNo"] = o.ReferenceNo
	}
	if !utils.IsNil(o.PartnerReferenceNo) {
		toSerialize["partnerReferenceNo"] = o.PartnerReferenceNo
	}
	if !utils.IsNil(o.TransactionDate) {
		toSerialize["transactionDate"] = o.TransactionDate
	}
	if !utils.IsNil(o.ReferenceNumber) {
		toSerialize["referenceNumber"] = o.ReferenceNumber
	}
	if !utils.IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	return toSerialize, nil
}

func (o *TransferToBankResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"responseCode",
		"responseMessage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransferToBankResponse := _TransferToBankResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransferToBankResponse)

	if err != nil {
		return err
	}

	*o = TransferToBankResponse(varTransferToBankResponse)

	return err
}

type NullableTransferToBankResponse struct {
	value *TransferToBankResponse
	isSet bool
}

func (v NullableTransferToBankResponse) Get() *TransferToBankResponse {
	return v.value
}

func (v *NullableTransferToBankResponse) Set(val *TransferToBankResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferToBankResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferToBankResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferToBankResponse(val *TransferToBankResponse) *NullableTransferToBankResponse {
	return &NullableTransferToBankResponse{value: val, isSet: true}
}

func (v NullableTransferToBankResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferToBankResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


