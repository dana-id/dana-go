// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package disbursement

/*
Disbursement API

API for doing disbursement operations in DANA, including DANA account inquiry, transfer to DANA, and transfer to bank disbursement

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the TransferToDanaInquiryStatusResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TransferToDanaInquiryStatusResponse{}

// TransferToDanaInquiryStatusResponse struct for TransferToDanaInquiryStatusResponse
type TransferToDanaInquiryStatusResponse struct {
	// Refer to response code list
	ResponseCode string `json:"responseCode"`
	// Refer to response code list
	ResponseMessage string `json:"responseMessage"`
	// Original transaction identifier on partner system
	OriginalPartnerReferenceNo string `json:"originalPartnerReferenceNo"`
	// Original transaction identifier on DANA system
	OriginalReferenceNo *string `json:"originalReferenceNo,omitempty"`
	// Original external identifier on header message
	OriginalExternalId *string `json:"originalExternalId,omitempty"`
	// Transaction type indicator is based on the service code of the original transaction request, value always 38
	ServiceCode string `json:"serviceCode"`
	// Amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO 
	Amount Money `json:"amount"`
	// Status of latest transaction:<br> 00 - Success<br> 01 - Initiated<br> 02 - Paying<br> 03 - Pending<br> 04 - Refunded<br> 05 - Cancelled<br> 06 - Failed<br> 07 - Not found 
	LatestTransactionStatus string `json:"latestTransactionStatus"`
	// Description of transaction status
	TransactionStatusDesc string `json:"transactionStatusDesc"`
	// Additional information
	AdditionalInfo map[string]interface{} `json:"additionalInfo,omitempty"`
}

type _TransferToDanaInquiryStatusResponse TransferToDanaInquiryStatusResponse

// NewTransferToDanaInquiryStatusResponse instantiates a new TransferToDanaInquiryStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferToDanaInquiryStatusResponse(responseCode string, responseMessage string, originalPartnerReferenceNo string, serviceCode string, amount Money, latestTransactionStatus string, transactionStatusDesc string) *TransferToDanaInquiryStatusResponse {
	this := TransferToDanaInquiryStatusResponse{}
	this.ResponseCode = responseCode
	this.ResponseMessage = responseMessage
	this.OriginalPartnerReferenceNo = originalPartnerReferenceNo
	this.ServiceCode = serviceCode
	this.Amount = amount
	this.LatestTransactionStatus = latestTransactionStatus
	this.TransactionStatusDesc = transactionStatusDesc
	return &this
}

// NewTransferToDanaInquiryStatusResponseWithDefaults instantiates a new TransferToDanaInquiryStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferToDanaInquiryStatusResponseWithDefaults() *TransferToDanaInquiryStatusResponse {
	this := TransferToDanaInquiryStatusResponse{}
	var serviceCode string = "38"
	this.ServiceCode = serviceCode
	return &this
}

// GetResponseCode returns the ResponseCode field value
func (o *TransferToDanaInquiryStatusResponse) GetResponseCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value
// and a boolean to check if the value has been set.
func (o *TransferToDanaInquiryStatusResponse) GetResponseCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseCode, true
}

// SetResponseCode sets field value
func (o *TransferToDanaInquiryStatusResponse) SetResponseCode(v string) {
	o.ResponseCode = v
}

// GetResponseMessage returns the ResponseMessage field value
func (o *TransferToDanaInquiryStatusResponse) GetResponseMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseMessage
}

// GetResponseMessageOk returns a tuple with the ResponseMessage field value
// and a boolean to check if the value has been set.
func (o *TransferToDanaInquiryStatusResponse) GetResponseMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseMessage, true
}

// SetResponseMessage sets field value
func (o *TransferToDanaInquiryStatusResponse) SetResponseMessage(v string) {
	o.ResponseMessage = v
}

// GetOriginalPartnerReferenceNo returns the OriginalPartnerReferenceNo field value
func (o *TransferToDanaInquiryStatusResponse) GetOriginalPartnerReferenceNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalPartnerReferenceNo
}

// GetOriginalPartnerReferenceNoOk returns a tuple with the OriginalPartnerReferenceNo field value
// and a boolean to check if the value has been set.
func (o *TransferToDanaInquiryStatusResponse) GetOriginalPartnerReferenceNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalPartnerReferenceNo, true
}

// SetOriginalPartnerReferenceNo sets field value
func (o *TransferToDanaInquiryStatusResponse) SetOriginalPartnerReferenceNo(v string) {
	o.OriginalPartnerReferenceNo = v
}

// GetOriginalReferenceNo returns the OriginalReferenceNo field value if set, zero value otherwise.
func (o *TransferToDanaInquiryStatusResponse) GetOriginalReferenceNo() string {
	if o == nil || utils.IsNil(o.OriginalReferenceNo) {
		var ret string
		return ret
	}
	return *o.OriginalReferenceNo
}

// GetOriginalReferenceNoOk returns a tuple with the OriginalReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToDanaInquiryStatusResponse) GetOriginalReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OriginalReferenceNo) {
		return nil, false
	}
	return o.OriginalReferenceNo, true
}

// HasOriginalReferenceNo returns a boolean if a field has been set.
func (o *TransferToDanaInquiryStatusResponse) HasOriginalReferenceNo() bool {
	if o != nil && !utils.IsNil(o.OriginalReferenceNo) {
		return true
	}

	return false
}

// SetOriginalReferenceNo gets a reference to the given string and assigns it to the OriginalReferenceNo field.
func (o *TransferToDanaInquiryStatusResponse) SetOriginalReferenceNo(v string) {
	o.OriginalReferenceNo = &v
}

// GetOriginalExternalId returns the OriginalExternalId field value if set, zero value otherwise.
func (o *TransferToDanaInquiryStatusResponse) GetOriginalExternalId() string {
	if o == nil || utils.IsNil(o.OriginalExternalId) {
		var ret string
		return ret
	}
	return *o.OriginalExternalId
}

// GetOriginalExternalIdOk returns a tuple with the OriginalExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToDanaInquiryStatusResponse) GetOriginalExternalIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OriginalExternalId) {
		return nil, false
	}
	return o.OriginalExternalId, true
}

// HasOriginalExternalId returns a boolean if a field has been set.
func (o *TransferToDanaInquiryStatusResponse) HasOriginalExternalId() bool {
	if o != nil && !utils.IsNil(o.OriginalExternalId) {
		return true
	}

	return false
}

// SetOriginalExternalId gets a reference to the given string and assigns it to the OriginalExternalId field.
func (o *TransferToDanaInquiryStatusResponse) SetOriginalExternalId(v string) {
	o.OriginalExternalId = &v
}

// GetServiceCode returns the ServiceCode field value
func (o *TransferToDanaInquiryStatusResponse) GetServiceCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceCode
}

// GetServiceCodeOk returns a tuple with the ServiceCode field value
// and a boolean to check if the value has been set.
func (o *TransferToDanaInquiryStatusResponse) GetServiceCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceCode, true
}

// SetServiceCode sets field value
func (o *TransferToDanaInquiryStatusResponse) SetServiceCode(v string) {
	o.ServiceCode = v
}

// GetAmount returns the Amount field value
func (o *TransferToDanaInquiryStatusResponse) GetAmount() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransferToDanaInquiryStatusResponse) GetAmountOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransferToDanaInquiryStatusResponse) SetAmount(v Money) {
	o.Amount = v
}

// GetLatestTransactionStatus returns the LatestTransactionStatus field value
func (o *TransferToDanaInquiryStatusResponse) GetLatestTransactionStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LatestTransactionStatus
}

// GetLatestTransactionStatusOk returns a tuple with the LatestTransactionStatus field value
// and a boolean to check if the value has been set.
func (o *TransferToDanaInquiryStatusResponse) GetLatestTransactionStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LatestTransactionStatus, true
}

// SetLatestTransactionStatus sets field value
func (o *TransferToDanaInquiryStatusResponse) SetLatestTransactionStatus(v string) {
	o.LatestTransactionStatus = v
}

// GetTransactionStatusDesc returns the TransactionStatusDesc field value
func (o *TransferToDanaInquiryStatusResponse) GetTransactionStatusDesc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionStatusDesc
}

// GetTransactionStatusDescOk returns a tuple with the TransactionStatusDesc field value
// and a boolean to check if the value has been set.
func (o *TransferToDanaInquiryStatusResponse) GetTransactionStatusDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionStatusDesc, true
}

// SetTransactionStatusDesc sets field value
func (o *TransferToDanaInquiryStatusResponse) SetTransactionStatusDesc(v string) {
	o.TransactionStatusDesc = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *TransferToDanaInquiryStatusResponse) GetAdditionalInfo() map[string]interface{} {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToDanaInquiryStatusResponse) GetAdditionalInfoOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *TransferToDanaInquiryStatusResponse) HasAdditionalInfo() bool {
	if o != nil && !utils.IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given map[string]interface{} and assigns it to the AdditionalInfo field.
func (o *TransferToDanaInquiryStatusResponse) SetAdditionalInfo(v map[string]interface{}) {
	o.AdditionalInfo = v
}

func (o TransferToDanaInquiryStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferToDanaInquiryStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["responseCode"] = o.ResponseCode
	toSerialize["responseMessage"] = o.ResponseMessage
	toSerialize["originalPartnerReferenceNo"] = o.OriginalPartnerReferenceNo
	if !utils.IsNil(o.OriginalReferenceNo) {
		toSerialize["originalReferenceNo"] = o.OriginalReferenceNo
	}
	if !utils.IsNil(o.OriginalExternalId) {
		toSerialize["originalExternalId"] = o.OriginalExternalId
	}
	toSerialize["serviceCode"] = o.ServiceCode
	toSerialize["amount"] = o.Amount
	toSerialize["latestTransactionStatus"] = o.LatestTransactionStatus
	toSerialize["transactionStatusDesc"] = o.TransactionStatusDesc
	if !utils.IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	return toSerialize, nil
}

func (o *TransferToDanaInquiryStatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"responseCode",
		"responseMessage",
		"originalPartnerReferenceNo",
		"serviceCode",
		"amount",
		"latestTransactionStatus",
		"transactionStatusDesc",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransferToDanaInquiryStatusResponse := _TransferToDanaInquiryStatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransferToDanaInquiryStatusResponse)

	if err != nil {
		return err
	}

	*o = TransferToDanaInquiryStatusResponse(varTransferToDanaInquiryStatusResponse)

	return err
}

type NullableTransferToDanaInquiryStatusResponse struct {
	value *TransferToDanaInquiryStatusResponse
	isSet bool
}

func (v NullableTransferToDanaInquiryStatusResponse) Get() *TransferToDanaInquiryStatusResponse {
	return v.value
}

func (v *NullableTransferToDanaInquiryStatusResponse) Set(val *TransferToDanaInquiryStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferToDanaInquiryStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferToDanaInquiryStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferToDanaInquiryStatusResponse(val *TransferToDanaInquiryStatusResponse) *NullableTransferToDanaInquiryStatusResponse {
	return &NullableTransferToDanaInquiryStatusResponse{value: val, isSet: true}
}

func (v NullableTransferToDanaInquiryStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferToDanaInquiryStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


