// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package disbursement

/*
Disbursement API

API for doing disbursement operations in DANA, including DANA account inquiry, transfer to DANA, and transfer to bank disbursement

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the DanaAccountInquiryRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DanaAccountInquiryRequest{}

// DanaAccountInquiryRequest struct for DanaAccountInquiryRequest
type DanaAccountInquiryRequest struct {
	// Unique transaction identifier on partner system which assigned to each transaction<br> Notes:<br> If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before 
	PartnerReferenceNo *string `json:"partnerReferenceNo,omitempty"`
	// Customer account number, in format 628xxx
	CustomerNumber *string `json:"customerNumber,omitempty"`
	// Amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO 
	Amount Money `json:"amount"`
	// Transaction date, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
	TransactionDate *string `json:"transactionDate,omitempty" validate:"regexp=^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\+07:00$"`
	AdditionalInfo DanaAccountInquiryRequestAdditionalInfo `json:"additionalInfo"`
}

type _DanaAccountInquiryRequest DanaAccountInquiryRequest

// NewDanaAccountInquiryRequest instantiates a new DanaAccountInquiryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDanaAccountInquiryRequest(amount Money, additionalInfo DanaAccountInquiryRequestAdditionalInfo) *DanaAccountInquiryRequest {
	this := DanaAccountInquiryRequest{}
	this.Amount = amount
	this.AdditionalInfo = additionalInfo
	return &this
}

// NewDanaAccountInquiryRequestWithDefaults instantiates a new DanaAccountInquiryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDanaAccountInquiryRequestWithDefaults() *DanaAccountInquiryRequest {
	this := DanaAccountInquiryRequest{}
	return &this
}

// GetPartnerReferenceNo returns the PartnerReferenceNo field value if set, zero value otherwise.
func (o *DanaAccountInquiryRequest) GetPartnerReferenceNo() string {
	if o == nil || utils.IsNil(o.PartnerReferenceNo) {
		var ret string
		return ret
	}
	return *o.PartnerReferenceNo
}

// GetPartnerReferenceNoOk returns a tuple with the PartnerReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DanaAccountInquiryRequest) GetPartnerReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PartnerReferenceNo) {
		return nil, false
	}
	return o.PartnerReferenceNo, true
}

// HasPartnerReferenceNo returns a boolean if a field has been set.
func (o *DanaAccountInquiryRequest) HasPartnerReferenceNo() bool {
	if o != nil && !utils.IsNil(o.PartnerReferenceNo) {
		return true
	}

	return false
}

// SetPartnerReferenceNo gets a reference to the given string and assigns it to the PartnerReferenceNo field.
func (o *DanaAccountInquiryRequest) SetPartnerReferenceNo(v string) {
	o.PartnerReferenceNo = &v
}

// GetCustomerNumber returns the CustomerNumber field value if set, zero value otherwise.
func (o *DanaAccountInquiryRequest) GetCustomerNumber() string {
	if o == nil || utils.IsNil(o.CustomerNumber) {
		var ret string
		return ret
	}
	return *o.CustomerNumber
}

// GetCustomerNumberOk returns a tuple with the CustomerNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DanaAccountInquiryRequest) GetCustomerNumberOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CustomerNumber) {
		return nil, false
	}
	return o.CustomerNumber, true
}

// HasCustomerNumber returns a boolean if a field has been set.
func (o *DanaAccountInquiryRequest) HasCustomerNumber() bool {
	if o != nil && !utils.IsNil(o.CustomerNumber) {
		return true
	}

	return false
}

// SetCustomerNumber gets a reference to the given string and assigns it to the CustomerNumber field.
func (o *DanaAccountInquiryRequest) SetCustomerNumber(v string) {
	o.CustomerNumber = &v
}

// GetAmount returns the Amount field value
func (o *DanaAccountInquiryRequest) GetAmount() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *DanaAccountInquiryRequest) GetAmountOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *DanaAccountInquiryRequest) SetAmount(v Money) {
	o.Amount = v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *DanaAccountInquiryRequest) GetTransactionDate() string {
	if o == nil || utils.IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DanaAccountInquiryRequest) GetTransactionDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *DanaAccountInquiryRequest) HasTransactionDate() bool {
	if o != nil && !utils.IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *DanaAccountInquiryRequest) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value
func (o *DanaAccountInquiryRequest) GetAdditionalInfo() DanaAccountInquiryRequestAdditionalInfo {
	if o == nil {
		var ret DanaAccountInquiryRequestAdditionalInfo
		return ret
	}

	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value
// and a boolean to check if the value has been set.
func (o *DanaAccountInquiryRequest) GetAdditionalInfoOk() (*DanaAccountInquiryRequestAdditionalInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdditionalInfo, true
}

// SetAdditionalInfo sets field value
func (o *DanaAccountInquiryRequest) SetAdditionalInfo(v DanaAccountInquiryRequestAdditionalInfo) {
	o.AdditionalInfo = v
}

func (o DanaAccountInquiryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DanaAccountInquiryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PartnerReferenceNo) {
		toSerialize["partnerReferenceNo"] = o.PartnerReferenceNo
	}
	if !utils.IsNil(o.CustomerNumber) {
		toSerialize["customerNumber"] = o.CustomerNumber
	}
	toSerialize["amount"] = o.Amount
	if !utils.IsNil(o.TransactionDate) {
		toSerialize["transactionDate"] = o.TransactionDate
	}
	toSerialize["additionalInfo"] = o.AdditionalInfo
	return toSerialize, nil
}

func (o *DanaAccountInquiryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"additionalInfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDanaAccountInquiryRequest := _DanaAccountInquiryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDanaAccountInquiryRequest)

	if err != nil {
		return err
	}

	*o = DanaAccountInquiryRequest(varDanaAccountInquiryRequest)

	return err
}

type NullableDanaAccountInquiryRequest struct {
	value *DanaAccountInquiryRequest
	isSet bool
}

func (v NullableDanaAccountInquiryRequest) Get() *DanaAccountInquiryRequest {
	return v.value
}

func (v *NullableDanaAccountInquiryRequest) Set(val *DanaAccountInquiryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDanaAccountInquiryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDanaAccountInquiryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDanaAccountInquiryRequest(val *DanaAccountInquiryRequest) *NullableDanaAccountInquiryRequest {
	return &NullableDanaAccountInquiryRequest{value: val, isSet: true}
}

func (v NullableDanaAccountInquiryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDanaAccountInquiryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


