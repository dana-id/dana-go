// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package disbursement

/*
Disbursement API

API for doing disbursement operations in DANA, including DANA account inquiry, transfer to DANA, and transfer to bank disbursement

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the BankAccountInquiryResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &BankAccountInquiryResponse{}

// BankAccountInquiryResponse struct for BankAccountInquiryResponse
type BankAccountInquiryResponse struct {
	// Refer to response code list
	ResponseCode string `json:"responseCode"`
	// Refer to response code list
	ResponseMessage string `json:"responseMessage"`
	// Transaction identifier on DANA system
	ReferenceNo *string `json:"referenceNo,omitempty"`
	// Unique transaction identifier on partner system which assigned to each transaction<br> Notes:<br> If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before 
	PartnerReferenceNo *string `json:"partnerReferenceNo,omitempty"`
	// Customer account type
	AccountType *string `json:"accountType,omitempty"`
	// Beneficiary account number
	BeneficiaryAccountNumber string `json:"beneficiaryAccountNumber"`
	// Beneficiary account name
	BeneficiaryAccountName string `json:"beneficiaryAccountName"`
	// Beneficiary Bank code
	BeneficiaryBankCode *string `json:"beneficiaryBankCode,omitempty"`
	// Beneficiary Bank short name
	BeneficiaryBankShortName *string `json:"beneficiaryBankShortName,omitempty"`
	// Beneficiary Bank name
	BeneficiaryBankName *string `json:"beneficiaryBankName,omitempty"`
	// Amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO 
	Amount Money `json:"amount"`
	AdditionalInfo *BankAccountInquiryResponseAdditionalInfo `json:"additionalInfo,omitempty"`
}

type _BankAccountInquiryResponse BankAccountInquiryResponse

// NewBankAccountInquiryResponse instantiates a new BankAccountInquiryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankAccountInquiryResponse(responseCode string, responseMessage string, beneficiaryAccountNumber string, beneficiaryAccountName string, amount Money) *BankAccountInquiryResponse {
	this := BankAccountInquiryResponse{}
	this.ResponseCode = responseCode
	this.ResponseMessage = responseMessage
	this.BeneficiaryAccountNumber = beneficiaryAccountNumber
	this.BeneficiaryAccountName = beneficiaryAccountName
	this.Amount = amount
	return &this
}

// NewBankAccountInquiryResponseWithDefaults instantiates a new BankAccountInquiryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankAccountInquiryResponseWithDefaults() *BankAccountInquiryResponse {
	this := BankAccountInquiryResponse{}
	return &this
}

// GetResponseCode returns the ResponseCode field value
func (o *BankAccountInquiryResponse) GetResponseCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetResponseCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseCode, true
}

// SetResponseCode sets field value
func (o *BankAccountInquiryResponse) SetResponseCode(v string) {
	o.ResponseCode = v
}

// GetResponseMessage returns the ResponseMessage field value
func (o *BankAccountInquiryResponse) GetResponseMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseMessage
}

// GetResponseMessageOk returns a tuple with the ResponseMessage field value
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetResponseMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseMessage, true
}

// SetResponseMessage sets field value
func (o *BankAccountInquiryResponse) SetResponseMessage(v string) {
	o.ResponseMessage = v
}

// GetReferenceNo returns the ReferenceNo field value if set, zero value otherwise.
func (o *BankAccountInquiryResponse) GetReferenceNo() string {
	if o == nil || utils.IsNil(o.ReferenceNo) {
		var ret string
		return ret
	}
	return *o.ReferenceNo
}

// GetReferenceNoOk returns a tuple with the ReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReferenceNo) {
		return nil, false
	}
	return o.ReferenceNo, true
}

// HasReferenceNo returns a boolean if a field has been set.
func (o *BankAccountInquiryResponse) HasReferenceNo() bool {
	if o != nil && !utils.IsNil(o.ReferenceNo) {
		return true
	}

	return false
}

// SetReferenceNo gets a reference to the given string and assigns it to the ReferenceNo field.
func (o *BankAccountInquiryResponse) SetReferenceNo(v string) {
	o.ReferenceNo = &v
}

// GetPartnerReferenceNo returns the PartnerReferenceNo field value if set, zero value otherwise.
func (o *BankAccountInquiryResponse) GetPartnerReferenceNo() string {
	if o == nil || utils.IsNil(o.PartnerReferenceNo) {
		var ret string
		return ret
	}
	return *o.PartnerReferenceNo
}

// GetPartnerReferenceNoOk returns a tuple with the PartnerReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetPartnerReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PartnerReferenceNo) {
		return nil, false
	}
	return o.PartnerReferenceNo, true
}

// HasPartnerReferenceNo returns a boolean if a field has been set.
func (o *BankAccountInquiryResponse) HasPartnerReferenceNo() bool {
	if o != nil && !utils.IsNil(o.PartnerReferenceNo) {
		return true
	}

	return false
}

// SetPartnerReferenceNo gets a reference to the given string and assigns it to the PartnerReferenceNo field.
func (o *BankAccountInquiryResponse) SetPartnerReferenceNo(v string) {
	o.PartnerReferenceNo = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *BankAccountInquiryResponse) GetAccountType() string {
	if o == nil || utils.IsNil(o.AccountType) {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetAccountTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *BankAccountInquiryResponse) HasAccountType() bool {
	if o != nil && !utils.IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *BankAccountInquiryResponse) SetAccountType(v string) {
	o.AccountType = &v
}

// GetBeneficiaryAccountNumber returns the BeneficiaryAccountNumber field value
func (o *BankAccountInquiryResponse) GetBeneficiaryAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BeneficiaryAccountNumber
}

// GetBeneficiaryAccountNumberOk returns a tuple with the BeneficiaryAccountNumber field value
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetBeneficiaryAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BeneficiaryAccountNumber, true
}

// SetBeneficiaryAccountNumber sets field value
func (o *BankAccountInquiryResponse) SetBeneficiaryAccountNumber(v string) {
	o.BeneficiaryAccountNumber = v
}

// GetBeneficiaryAccountName returns the BeneficiaryAccountName field value
func (o *BankAccountInquiryResponse) GetBeneficiaryAccountName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BeneficiaryAccountName
}

// GetBeneficiaryAccountNameOk returns a tuple with the BeneficiaryAccountName field value
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetBeneficiaryAccountNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BeneficiaryAccountName, true
}

// SetBeneficiaryAccountName sets field value
func (o *BankAccountInquiryResponse) SetBeneficiaryAccountName(v string) {
	o.BeneficiaryAccountName = v
}

// GetBeneficiaryBankCode returns the BeneficiaryBankCode field value if set, zero value otherwise.
func (o *BankAccountInquiryResponse) GetBeneficiaryBankCode() string {
	if o == nil || utils.IsNil(o.BeneficiaryBankCode) {
		var ret string
		return ret
	}
	return *o.BeneficiaryBankCode
}

// GetBeneficiaryBankCodeOk returns a tuple with the BeneficiaryBankCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetBeneficiaryBankCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BeneficiaryBankCode) {
		return nil, false
	}
	return o.BeneficiaryBankCode, true
}

// HasBeneficiaryBankCode returns a boolean if a field has been set.
func (o *BankAccountInquiryResponse) HasBeneficiaryBankCode() bool {
	if o != nil && !utils.IsNil(o.BeneficiaryBankCode) {
		return true
	}

	return false
}

// SetBeneficiaryBankCode gets a reference to the given string and assigns it to the BeneficiaryBankCode field.
func (o *BankAccountInquiryResponse) SetBeneficiaryBankCode(v string) {
	o.BeneficiaryBankCode = &v
}

// GetBeneficiaryBankShortName returns the BeneficiaryBankShortName field value if set, zero value otherwise.
func (o *BankAccountInquiryResponse) GetBeneficiaryBankShortName() string {
	if o == nil || utils.IsNil(o.BeneficiaryBankShortName) {
		var ret string
		return ret
	}
	return *o.BeneficiaryBankShortName
}

// GetBeneficiaryBankShortNameOk returns a tuple with the BeneficiaryBankShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetBeneficiaryBankShortNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BeneficiaryBankShortName) {
		return nil, false
	}
	return o.BeneficiaryBankShortName, true
}

// HasBeneficiaryBankShortName returns a boolean if a field has been set.
func (o *BankAccountInquiryResponse) HasBeneficiaryBankShortName() bool {
	if o != nil && !utils.IsNil(o.BeneficiaryBankShortName) {
		return true
	}

	return false
}

// SetBeneficiaryBankShortName gets a reference to the given string and assigns it to the BeneficiaryBankShortName field.
func (o *BankAccountInquiryResponse) SetBeneficiaryBankShortName(v string) {
	o.BeneficiaryBankShortName = &v
}

// GetBeneficiaryBankName returns the BeneficiaryBankName field value if set, zero value otherwise.
func (o *BankAccountInquiryResponse) GetBeneficiaryBankName() string {
	if o == nil || utils.IsNil(o.BeneficiaryBankName) {
		var ret string
		return ret
	}
	return *o.BeneficiaryBankName
}

// GetBeneficiaryBankNameOk returns a tuple with the BeneficiaryBankName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetBeneficiaryBankNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BeneficiaryBankName) {
		return nil, false
	}
	return o.BeneficiaryBankName, true
}

// HasBeneficiaryBankName returns a boolean if a field has been set.
func (o *BankAccountInquiryResponse) HasBeneficiaryBankName() bool {
	if o != nil && !utils.IsNil(o.BeneficiaryBankName) {
		return true
	}

	return false
}

// SetBeneficiaryBankName gets a reference to the given string and assigns it to the BeneficiaryBankName field.
func (o *BankAccountInquiryResponse) SetBeneficiaryBankName(v string) {
	o.BeneficiaryBankName = &v
}

// GetAmount returns the Amount field value
func (o *BankAccountInquiryResponse) GetAmount() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetAmountOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *BankAccountInquiryResponse) SetAmount(v Money) {
	o.Amount = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *BankAccountInquiryResponse) GetAdditionalInfo() BankAccountInquiryResponseAdditionalInfo {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		var ret BankAccountInquiryResponseAdditionalInfo
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccountInquiryResponse) GetAdditionalInfoOk() (*BankAccountInquiryResponseAdditionalInfo, bool) {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *BankAccountInquiryResponse) HasAdditionalInfo() bool {
	if o != nil && !utils.IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given BankAccountInquiryResponseAdditionalInfo and assigns it to the AdditionalInfo field.
func (o *BankAccountInquiryResponse) SetAdditionalInfo(v BankAccountInquiryResponseAdditionalInfo) {
	o.AdditionalInfo = &v
}

func (o BankAccountInquiryResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BankAccountInquiryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["responseCode"] = o.ResponseCode
	toSerialize["responseMessage"] = o.ResponseMessage
	if !utils.IsNil(o.ReferenceNo) {
		toSerialize["referenceNo"] = o.ReferenceNo
	}
	if !utils.IsNil(o.PartnerReferenceNo) {
		toSerialize["partnerReferenceNo"] = o.PartnerReferenceNo
	}
	if !utils.IsNil(o.AccountType) {
		toSerialize["accountType"] = o.AccountType
	}
	toSerialize["beneficiaryAccountNumber"] = o.BeneficiaryAccountNumber
	toSerialize["beneficiaryAccountName"] = o.BeneficiaryAccountName
	if !utils.IsNil(o.BeneficiaryBankCode) {
		toSerialize["beneficiaryBankCode"] = o.BeneficiaryBankCode
	}
	if !utils.IsNil(o.BeneficiaryBankShortName) {
		toSerialize["beneficiaryBankShortName"] = o.BeneficiaryBankShortName
	}
	if !utils.IsNil(o.BeneficiaryBankName) {
		toSerialize["beneficiaryBankName"] = o.BeneficiaryBankName
	}
	toSerialize["amount"] = o.Amount
	if !utils.IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	return toSerialize, nil
}

func (o *BankAccountInquiryResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"responseCode",
		"responseMessage",
		"beneficiaryAccountNumber",
		"beneficiaryAccountName",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBankAccountInquiryResponse := _BankAccountInquiryResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBankAccountInquiryResponse)

	if err != nil {
		return err
	}

	*o = BankAccountInquiryResponse(varBankAccountInquiryResponse)

	return err
}

type NullableBankAccountInquiryResponse struct {
	value *BankAccountInquiryResponse
	isSet bool
}

func (v NullableBankAccountInquiryResponse) Get() *BankAccountInquiryResponse {
	return v.value
}

func (v *NullableBankAccountInquiryResponse) Set(val *BankAccountInquiryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBankAccountInquiryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBankAccountInquiryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankAccountInquiryResponse(val *BankAccountInquiryResponse) *NullableBankAccountInquiryResponse {
	return &NullableBankAccountInquiryResponse{value: val, isSet: true}
}

func (v NullableBankAccountInquiryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankAccountInquiryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


