// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package disbursement

/*
Disbursement API

API for doing disbursement operations in DANA, including DANA account inquiry, transfer to DANA, and transfer to bank disbursement

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the TransferToDanaResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TransferToDanaResponse{}

// TransferToDanaResponse struct for TransferToDanaResponse
type TransferToDanaResponse struct {
	// Refer to response code list
	ResponseCode string `json:"responseCode"`
	// Refer to response code list
	ResponseMessage string `json:"responseMessage"`
	// Transaction identifier on DANA system
	ReferenceNo *string `json:"referenceNo,omitempty"`
	// Unique transaction identifier on partner system which assigned to each transaction<br> Notes:<br> If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before 
	PartnerReferenceNo string `json:"partnerReferenceNo"`
	// Session identifier
	SessionId *string `json:"sessionId,omitempty"`
	// Customer account number, in format 628xxx
	CustomerNumber *string `json:"customerNumber,omitempty"`
	// Amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO 
	Amount Money `json:"amount"`
	// Additional information
	AdditionalInfo map[string]interface{} `json:"additionalInfo,omitempty"`
}

type _TransferToDanaResponse TransferToDanaResponse

// NewTransferToDanaResponse instantiates a new TransferToDanaResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferToDanaResponse(responseCode string, responseMessage string, partnerReferenceNo string, amount Money) *TransferToDanaResponse {
	this := TransferToDanaResponse{}
	this.ResponseCode = responseCode
	this.ResponseMessage = responseMessage
	this.PartnerReferenceNo = partnerReferenceNo
	this.Amount = amount
	return &this
}

// NewTransferToDanaResponseWithDefaults instantiates a new TransferToDanaResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferToDanaResponseWithDefaults() *TransferToDanaResponse {
	this := TransferToDanaResponse{}
	return &this
}

// GetResponseCode returns the ResponseCode field value
func (o *TransferToDanaResponse) GetResponseCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value
// and a boolean to check if the value has been set.
func (o *TransferToDanaResponse) GetResponseCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseCode, true
}

// SetResponseCode sets field value
func (o *TransferToDanaResponse) SetResponseCode(v string) {
	o.ResponseCode = v
}

// GetResponseMessage returns the ResponseMessage field value
func (o *TransferToDanaResponse) GetResponseMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseMessage
}

// GetResponseMessageOk returns a tuple with the ResponseMessage field value
// and a boolean to check if the value has been set.
func (o *TransferToDanaResponse) GetResponseMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseMessage, true
}

// SetResponseMessage sets field value
func (o *TransferToDanaResponse) SetResponseMessage(v string) {
	o.ResponseMessage = v
}

// GetReferenceNo returns the ReferenceNo field value if set, zero value otherwise.
func (o *TransferToDanaResponse) GetReferenceNo() string {
	if o == nil || utils.IsNil(o.ReferenceNo) {
		var ret string
		return ret
	}
	return *o.ReferenceNo
}

// GetReferenceNoOk returns a tuple with the ReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToDanaResponse) GetReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReferenceNo) {
		return nil, false
	}
	return o.ReferenceNo, true
}

// HasReferenceNo returns a boolean if a field has been set.
func (o *TransferToDanaResponse) HasReferenceNo() bool {
	if o != nil && !utils.IsNil(o.ReferenceNo) {
		return true
	}

	return false
}

// SetReferenceNo gets a reference to the given string and assigns it to the ReferenceNo field.
func (o *TransferToDanaResponse) SetReferenceNo(v string) {
	o.ReferenceNo = &v
}

// GetPartnerReferenceNo returns the PartnerReferenceNo field value
func (o *TransferToDanaResponse) GetPartnerReferenceNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PartnerReferenceNo
}

// GetPartnerReferenceNoOk returns a tuple with the PartnerReferenceNo field value
// and a boolean to check if the value has been set.
func (o *TransferToDanaResponse) GetPartnerReferenceNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartnerReferenceNo, true
}

// SetPartnerReferenceNo sets field value
func (o *TransferToDanaResponse) SetPartnerReferenceNo(v string) {
	o.PartnerReferenceNo = v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *TransferToDanaResponse) GetSessionId() string {
	if o == nil || utils.IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToDanaResponse) GetSessionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *TransferToDanaResponse) HasSessionId() bool {
	if o != nil && !utils.IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *TransferToDanaResponse) SetSessionId(v string) {
	o.SessionId = &v
}

// GetCustomerNumber returns the CustomerNumber field value if set, zero value otherwise.
func (o *TransferToDanaResponse) GetCustomerNumber() string {
	if o == nil || utils.IsNil(o.CustomerNumber) {
		var ret string
		return ret
	}
	return *o.CustomerNumber
}

// GetCustomerNumberOk returns a tuple with the CustomerNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToDanaResponse) GetCustomerNumberOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CustomerNumber) {
		return nil, false
	}
	return o.CustomerNumber, true
}

// HasCustomerNumber returns a boolean if a field has been set.
func (o *TransferToDanaResponse) HasCustomerNumber() bool {
	if o != nil && !utils.IsNil(o.CustomerNumber) {
		return true
	}

	return false
}

// SetCustomerNumber gets a reference to the given string and assigns it to the CustomerNumber field.
func (o *TransferToDanaResponse) SetCustomerNumber(v string) {
	o.CustomerNumber = &v
}

// GetAmount returns the Amount field value
func (o *TransferToDanaResponse) GetAmount() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransferToDanaResponse) GetAmountOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransferToDanaResponse) SetAmount(v Money) {
	o.Amount = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *TransferToDanaResponse) GetAdditionalInfo() map[string]interface{} {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferToDanaResponse) GetAdditionalInfoOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *TransferToDanaResponse) HasAdditionalInfo() bool {
	if o != nil && !utils.IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given map[string]interface{} and assigns it to the AdditionalInfo field.
func (o *TransferToDanaResponse) SetAdditionalInfo(v map[string]interface{}) {
	o.AdditionalInfo = v
}

func (o TransferToDanaResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferToDanaResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["responseCode"] = o.ResponseCode
	toSerialize["responseMessage"] = o.ResponseMessage
	if !utils.IsNil(o.ReferenceNo) {
		toSerialize["referenceNo"] = o.ReferenceNo
	}
	toSerialize["partnerReferenceNo"] = o.PartnerReferenceNo
	if !utils.IsNil(o.SessionId) {
		toSerialize["sessionId"] = o.SessionId
	}
	if !utils.IsNil(o.CustomerNumber) {
		toSerialize["customerNumber"] = o.CustomerNumber
	}
	toSerialize["amount"] = o.Amount
	if !utils.IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	return toSerialize, nil
}

func (o *TransferToDanaResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"responseCode",
		"responseMessage",
		"partnerReferenceNo",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransferToDanaResponse := _TransferToDanaResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransferToDanaResponse)

	if err != nil {
		return err
	}

	*o = TransferToDanaResponse(varTransferToDanaResponse)

	return err
}

type NullableTransferToDanaResponse struct {
	value *TransferToDanaResponse
	isSet bool
}

func (v NullableTransferToDanaResponse) Get() *TransferToDanaResponse {
	return v.value
}

func (v *NullableTransferToDanaResponse) Set(val *TransferToDanaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferToDanaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferToDanaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferToDanaResponse(val *TransferToDanaResponse) *NullableTransferToDanaResponse {
	return &NullableTransferToDanaResponse{value: val, isSet: true}
}

func (v NullableTransferToDanaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferToDanaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


