/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payment_gateway

import (
	"encoding/json"
	utils "github.com/dana-id/go_client/utils"
)

// checks if the AuditInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AuditInfo{}

// AuditInfo struct for AuditInfo
type AuditInfo struct {
	// Action trigger reason
	ActionReason *string `json:"actionReason,omitempty"`
	// Third party client identifier
	ThirdClientId *string `json:"thirdClientId,omitempty"`
}

// NewAuditInfo instantiates a new AuditInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditInfo() *AuditInfo {
	this := AuditInfo{}
	return &this
}

// NewAuditInfoWithDefaults instantiates a new AuditInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditInfoWithDefaults() *AuditInfo {
	this := AuditInfo{}
	return &this
}

// GetActionReason returns the ActionReason field value if set, zero value otherwise.
func (o *AuditInfo) GetActionReason() string {
	if o == nil || utils.IsNil(o.ActionReason) {
		var ret string
		return ret
	}
	return *o.ActionReason
}

// GetActionReasonOk returns a tuple with the ActionReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditInfo) GetActionReasonOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ActionReason) {
		return nil, false
	}
	return o.ActionReason, true
}

// HasActionReason returns a boolean if a field has been set.
func (o *AuditInfo) HasActionReason() bool {
	if o != nil && !utils.IsNil(o.ActionReason) {
		return true
	}

	return false
}

// SetActionReason gets a reference to the given string and assigns it to the ActionReason field.
func (o *AuditInfo) SetActionReason(v string) {
	o.ActionReason = &v
}

// GetThirdClientId returns the ThirdClientId field value if set, zero value otherwise.
func (o *AuditInfo) GetThirdClientId() string {
	if o == nil || utils.IsNil(o.ThirdClientId) {
		var ret string
		return ret
	}
	return *o.ThirdClientId
}

// GetThirdClientIdOk returns a tuple with the ThirdClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditInfo) GetThirdClientIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ThirdClientId) {
		return nil, false
	}
	return o.ThirdClientId, true
}

// HasThirdClientId returns a boolean if a field has been set.
func (o *AuditInfo) HasThirdClientId() bool {
	if o != nil && !utils.IsNil(o.ThirdClientId) {
		return true
	}

	return false
}

// SetThirdClientId gets a reference to the given string and assigns it to the ThirdClientId field.
func (o *AuditInfo) SetThirdClientId(v string) {
	o.ThirdClientId = &v
}

func (o AuditInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ActionReason) {
		toSerialize["actionReason"] = o.ActionReason
	}
	if !utils.IsNil(o.ThirdClientId) {
		toSerialize["thirdClientId"] = o.ThirdClientId
	}
	return toSerialize, nil
}

type NullableAuditInfo struct {
	value *AuditInfo
	isSet bool
}

func (v NullableAuditInfo) Get() *AuditInfo {
	return v.value
}

func (v *NullableAuditInfo) Set(val *AuditInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditInfo(val *AuditInfo) *NullableAuditInfo {
	return &NullableAuditInfo{value: val, isSet: true}
}

func (v NullableAuditInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


