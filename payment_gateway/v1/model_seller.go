// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package payment_gateway

/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the Seller type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Seller{}

// Seller struct for Seller
type Seller struct {
	// Type of external user. Required if externalUserId is filled
	ExternalUserType *string `json:"externalUserType,omitempty"`
	// Nickname, user's nick name in DANA's
	Nickname *string `json:"nickname,omitempty"`
	// External user identifier. Required if externalUserType is filled
	ExternalUserId *string `json:"externalUserId,omitempty"`
	// DANA's user identifier
	UserId *string `json:"userId,omitempty"`
}

// NewSeller instantiates a new Seller object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeller() *Seller {
	this := Seller{}
	return &this
}

// NewSellerWithDefaults instantiates a new Seller object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSellerWithDefaults() *Seller {
	this := Seller{}
	return &this
}

// GetExternalUserType returns the ExternalUserType field value if set, zero value otherwise.
func (o *Seller) GetExternalUserType() string {
	if o == nil || utils.IsNil(o.ExternalUserType) {
		var ret string
		return ret
	}
	return *o.ExternalUserType
}

// GetExternalUserTypeOk returns a tuple with the ExternalUserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seller) GetExternalUserTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExternalUserType) {
		return nil, false
	}
	return o.ExternalUserType, true
}

// HasExternalUserType returns a boolean if a field has been set.
func (o *Seller) HasExternalUserType() bool {
	if o != nil && !utils.IsNil(o.ExternalUserType) {
		return true
	}

	return false
}

// SetExternalUserType gets a reference to the given string and assigns it to the ExternalUserType field.
func (o *Seller) SetExternalUserType(v string) {
	o.ExternalUserType = &v
}

// GetNickname returns the Nickname field value if set, zero value otherwise.
func (o *Seller) GetNickname() string {
	if o == nil || utils.IsNil(o.Nickname) {
		var ret string
		return ret
	}
	return *o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seller) GetNicknameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Nickname) {
		return nil, false
	}
	return o.Nickname, true
}

// HasNickname returns a boolean if a field has been set.
func (o *Seller) HasNickname() bool {
	if o != nil && !utils.IsNil(o.Nickname) {
		return true
	}

	return false
}

// SetNickname gets a reference to the given string and assigns it to the Nickname field.
func (o *Seller) SetNickname(v string) {
	o.Nickname = &v
}

// GetExternalUserId returns the ExternalUserId field value if set, zero value otherwise.
func (o *Seller) GetExternalUserId() string {
	if o == nil || utils.IsNil(o.ExternalUserId) {
		var ret string
		return ret
	}
	return *o.ExternalUserId
}

// GetExternalUserIdOk returns a tuple with the ExternalUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seller) GetExternalUserIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExternalUserId) {
		return nil, false
	}
	return o.ExternalUserId, true
}

// HasExternalUserId returns a boolean if a field has been set.
func (o *Seller) HasExternalUserId() bool {
	if o != nil && !utils.IsNil(o.ExternalUserId) {
		return true
	}

	return false
}

// SetExternalUserId gets a reference to the given string and assigns it to the ExternalUserId field.
func (o *Seller) SetExternalUserId(v string) {
	o.ExternalUserId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Seller) GetUserId() string {
	if o == nil || utils.IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seller) GetUserIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Seller) HasUserId() bool {
	if o != nil && !utils.IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Seller) SetUserId(v string) {
	o.UserId = &v
}

func (o Seller) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Seller) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ExternalUserType) {
		toSerialize["externalUserType"] = o.ExternalUserType
	}
	if !utils.IsNil(o.Nickname) {
		toSerialize["nickname"] = o.Nickname
	}
	if !utils.IsNil(o.ExternalUserId) {
		toSerialize["externalUserId"] = o.ExternalUserId
	}
	if !utils.IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableSeller struct {
	value *Seller
	isSet bool
}

func (v NullableSeller) Get() *Seller {
	return v.value
}

func (v *NullableSeller) Set(val *Seller) {
	v.value = val
	v.isSet = true
}

func (v NullableSeller) IsSet() bool {
	return v.isSet
}

func (v *NullableSeller) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeller(val *Seller) *NullableSeller {
	return &NullableSeller{value: val, isSet: true}
}

func (v NullableSeller) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeller) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


