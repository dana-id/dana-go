/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payment_gateway

import (
	"encoding/json"
	utils "github.com/dana-id/go_client/utils"
)

// checks if the Buyer type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Buyer{}

// Buyer struct for Buyer
type Buyer struct {
	// Type of external user. Required if externalUserId is filled
	ExternalUserType *string `json:"externalUserType,omitempty"`
	// Nickname, user's nick name in DANA's
	Nickname *string `json:"nickname,omitempty"`
	// External user identifier. Required if externalUserType is filled
	ExternalUserId *string `json:"externalUserId,omitempty"`
	// DANA's user identifier
	UserId *string `json:"userId,omitempty"`
}

// NewBuyer instantiates a new Buyer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuyer() *Buyer {
	this := Buyer{}
	return &this
}

// NewBuyerWithDefaults instantiates a new Buyer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuyerWithDefaults() *Buyer {
	this := Buyer{}
	return &this
}

// GetExternalUserType returns the ExternalUserType field value if set, zero value otherwise.
func (o *Buyer) GetExternalUserType() string {
	if o == nil || utils.IsNil(o.ExternalUserType) {
		var ret string
		return ret
	}
	return *o.ExternalUserType
}

// GetExternalUserTypeOk returns a tuple with the ExternalUserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Buyer) GetExternalUserTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExternalUserType) {
		return nil, false
	}
	return o.ExternalUserType, true
}

// HasExternalUserType returns a boolean if a field has been set.
func (o *Buyer) HasExternalUserType() bool {
	if o != nil && !utils.IsNil(o.ExternalUserType) {
		return true
	}

	return false
}

// SetExternalUserType gets a reference to the given string and assigns it to the ExternalUserType field.
func (o *Buyer) SetExternalUserType(v string) {
	o.ExternalUserType = &v
}

// GetNickname returns the Nickname field value if set, zero value otherwise.
func (o *Buyer) GetNickname() string {
	if o == nil || utils.IsNil(o.Nickname) {
		var ret string
		return ret
	}
	return *o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Buyer) GetNicknameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Nickname) {
		return nil, false
	}
	return o.Nickname, true
}

// HasNickname returns a boolean if a field has been set.
func (o *Buyer) HasNickname() bool {
	if o != nil && !utils.IsNil(o.Nickname) {
		return true
	}

	return false
}

// SetNickname gets a reference to the given string and assigns it to the Nickname field.
func (o *Buyer) SetNickname(v string) {
	o.Nickname = &v
}

// GetExternalUserId returns the ExternalUserId field value if set, zero value otherwise.
func (o *Buyer) GetExternalUserId() string {
	if o == nil || utils.IsNil(o.ExternalUserId) {
		var ret string
		return ret
	}
	return *o.ExternalUserId
}

// GetExternalUserIdOk returns a tuple with the ExternalUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Buyer) GetExternalUserIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExternalUserId) {
		return nil, false
	}
	return o.ExternalUserId, true
}

// HasExternalUserId returns a boolean if a field has been set.
func (o *Buyer) HasExternalUserId() bool {
	if o != nil && !utils.IsNil(o.ExternalUserId) {
		return true
	}

	return false
}

// SetExternalUserId gets a reference to the given string and assigns it to the ExternalUserId field.
func (o *Buyer) SetExternalUserId(v string) {
	o.ExternalUserId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Buyer) GetUserId() string {
	if o == nil || utils.IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Buyer) GetUserIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Buyer) HasUserId() bool {
	if o != nil && !utils.IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Buyer) SetUserId(v string) {
	o.UserId = &v
}

func (o Buyer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Buyer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ExternalUserType) {
		toSerialize["externalUserType"] = o.ExternalUserType
	}
	if !utils.IsNil(o.Nickname) {
		toSerialize["nickname"] = o.Nickname
	}
	if !utils.IsNil(o.ExternalUserId) {
		toSerialize["externalUserId"] = o.ExternalUserId
	}
	if !utils.IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableBuyer struct {
	value *Buyer
	isSet bool
}

func (v NullableBuyer) Get() *Buyer {
	return v.value
}

func (v *NullableBuyer) Set(val *Buyer) {
	v.value = val
	v.isSet = true
}

func (v NullableBuyer) IsSet() bool {
	return v.isSet
}

func (v *NullableBuyer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuyer(val *Buyer) *NullableBuyer {
	return &NullableBuyer{value: val, isSet: true}
}

func (v NullableBuyer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuyer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


