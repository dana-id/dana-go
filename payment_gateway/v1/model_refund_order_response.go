/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payment_gateway

import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/go_client/utils"
)

// checks if the RefundOrderResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RefundOrderResponse{}

// RefundOrderResponse struct for RefundOrderResponse
type RefundOrderResponse struct {
	// Response code. Refer to https://dashboard.dana.id/api-docs/read/127#HTML-API-RefundOrder-ResponseCodeandMessage
	ResponseCode string `json:"responseCode"`
	// Response message. Refer to https://dashboard.dana.id/api-docs/read/127#HTML-API-RefundOrder-ResponseCodeandMessage
	ResponseMessage string `json:"responseMessage"`
	// Original transaction identifier on DANA system
	OriginalReferenceNo *string `json:"originalReferenceNo,omitempty"`
	// Original transaction identifier on partner system
	OriginalPartnerReferenceNo string `json:"originalPartnerReferenceNo"`
	// Original external identifier on header message
	OriginalExternalId *string `json:"originalExternalId,omitempty"`
	// DANA's capture identifier. Use to refund the corresponding capture order
	OriginalCaptureNo *string `json:"originalCaptureNo,omitempty"`
	// Refund number identifier on DANA system
	RefundNo *string `json:"refundNo,omitempty"`
	// Reference number from merchant for the refund
	PartnerRefundNo string `json:"partnerRefundNo"`
	// Refund amount. Contains two sub-fields - 1. Value (Amount, including the cents) and 2. Currency (Currency code based on ISO)
	RefundAmount Money `json:"refundAmount"`
	// Refund time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
	RefundTime *string `json:"refundTime,omitempty" validate:"regexp=^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\+07:00$"`
	// Additional information
	AdditionalInfo map[string]interface{} `json:"additionalInfo,omitempty"`
}

type _RefundOrderResponse RefundOrderResponse

// NewRefundOrderResponse instantiates a new RefundOrderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundOrderResponse(responseCode string, responseMessage string, originalPartnerReferenceNo string, partnerRefundNo string, refundAmount Money) *RefundOrderResponse {
	this := RefundOrderResponse{}
	this.ResponseCode = responseCode
	this.ResponseMessage = responseMessage
	this.OriginalPartnerReferenceNo = originalPartnerReferenceNo
	this.PartnerRefundNo = partnerRefundNo
	this.RefundAmount = refundAmount
	return &this
}

// NewRefundOrderResponseWithDefaults instantiates a new RefundOrderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundOrderResponseWithDefaults() *RefundOrderResponse {
	this := RefundOrderResponse{}
	return &this
}

// GetResponseCode returns the ResponseCode field value
func (o *RefundOrderResponse) GetResponseCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value
// and a boolean to check if the value has been set.
func (o *RefundOrderResponse) GetResponseCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseCode, true
}

// SetResponseCode sets field value
func (o *RefundOrderResponse) SetResponseCode(v string) {
	o.ResponseCode = v
}

// GetResponseMessage returns the ResponseMessage field value
func (o *RefundOrderResponse) GetResponseMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseMessage
}

// GetResponseMessageOk returns a tuple with the ResponseMessage field value
// and a boolean to check if the value has been set.
func (o *RefundOrderResponse) GetResponseMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseMessage, true
}

// SetResponseMessage sets field value
func (o *RefundOrderResponse) SetResponseMessage(v string) {
	o.ResponseMessage = v
}

// GetOriginalReferenceNo returns the OriginalReferenceNo field value if set, zero value otherwise.
func (o *RefundOrderResponse) GetOriginalReferenceNo() string {
	if o == nil || utils.IsNil(o.OriginalReferenceNo) {
		var ret string
		return ret
	}
	return *o.OriginalReferenceNo
}

// GetOriginalReferenceNoOk returns a tuple with the OriginalReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderResponse) GetOriginalReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OriginalReferenceNo) {
		return nil, false
	}
	return o.OriginalReferenceNo, true
}

// HasOriginalReferenceNo returns a boolean if a field has been set.
func (o *RefundOrderResponse) HasOriginalReferenceNo() bool {
	if o != nil && !utils.IsNil(o.OriginalReferenceNo) {
		return true
	}

	return false
}

// SetOriginalReferenceNo gets a reference to the given string and assigns it to the OriginalReferenceNo field.
func (o *RefundOrderResponse) SetOriginalReferenceNo(v string) {
	o.OriginalReferenceNo = &v
}

// GetOriginalPartnerReferenceNo returns the OriginalPartnerReferenceNo field value
func (o *RefundOrderResponse) GetOriginalPartnerReferenceNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalPartnerReferenceNo
}

// GetOriginalPartnerReferenceNoOk returns a tuple with the OriginalPartnerReferenceNo field value
// and a boolean to check if the value has been set.
func (o *RefundOrderResponse) GetOriginalPartnerReferenceNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalPartnerReferenceNo, true
}

// SetOriginalPartnerReferenceNo sets field value
func (o *RefundOrderResponse) SetOriginalPartnerReferenceNo(v string) {
	o.OriginalPartnerReferenceNo = v
}

// GetOriginalExternalId returns the OriginalExternalId field value if set, zero value otherwise.
func (o *RefundOrderResponse) GetOriginalExternalId() string {
	if o == nil || utils.IsNil(o.OriginalExternalId) {
		var ret string
		return ret
	}
	return *o.OriginalExternalId
}

// GetOriginalExternalIdOk returns a tuple with the OriginalExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderResponse) GetOriginalExternalIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OriginalExternalId) {
		return nil, false
	}
	return o.OriginalExternalId, true
}

// HasOriginalExternalId returns a boolean if a field has been set.
func (o *RefundOrderResponse) HasOriginalExternalId() bool {
	if o != nil && !utils.IsNil(o.OriginalExternalId) {
		return true
	}

	return false
}

// SetOriginalExternalId gets a reference to the given string and assigns it to the OriginalExternalId field.
func (o *RefundOrderResponse) SetOriginalExternalId(v string) {
	o.OriginalExternalId = &v
}

// GetOriginalCaptureNo returns the OriginalCaptureNo field value if set, zero value otherwise.
func (o *RefundOrderResponse) GetOriginalCaptureNo() string {
	if o == nil || utils.IsNil(o.OriginalCaptureNo) {
		var ret string
		return ret
	}
	return *o.OriginalCaptureNo
}

// GetOriginalCaptureNoOk returns a tuple with the OriginalCaptureNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderResponse) GetOriginalCaptureNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OriginalCaptureNo) {
		return nil, false
	}
	return o.OriginalCaptureNo, true
}

// HasOriginalCaptureNo returns a boolean if a field has been set.
func (o *RefundOrderResponse) HasOriginalCaptureNo() bool {
	if o != nil && !utils.IsNil(o.OriginalCaptureNo) {
		return true
	}

	return false
}

// SetOriginalCaptureNo gets a reference to the given string and assigns it to the OriginalCaptureNo field.
func (o *RefundOrderResponse) SetOriginalCaptureNo(v string) {
	o.OriginalCaptureNo = &v
}

// GetRefundNo returns the RefundNo field value if set, zero value otherwise.
func (o *RefundOrderResponse) GetRefundNo() string {
	if o == nil || utils.IsNil(o.RefundNo) {
		var ret string
		return ret
	}
	return *o.RefundNo
}

// GetRefundNoOk returns a tuple with the RefundNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderResponse) GetRefundNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RefundNo) {
		return nil, false
	}
	return o.RefundNo, true
}

// HasRefundNo returns a boolean if a field has been set.
func (o *RefundOrderResponse) HasRefundNo() bool {
	if o != nil && !utils.IsNil(o.RefundNo) {
		return true
	}

	return false
}

// SetRefundNo gets a reference to the given string and assigns it to the RefundNo field.
func (o *RefundOrderResponse) SetRefundNo(v string) {
	o.RefundNo = &v
}

// GetPartnerRefundNo returns the PartnerRefundNo field value
func (o *RefundOrderResponse) GetPartnerRefundNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PartnerRefundNo
}

// GetPartnerRefundNoOk returns a tuple with the PartnerRefundNo field value
// and a boolean to check if the value has been set.
func (o *RefundOrderResponse) GetPartnerRefundNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartnerRefundNo, true
}

// SetPartnerRefundNo sets field value
func (o *RefundOrderResponse) SetPartnerRefundNo(v string) {
	o.PartnerRefundNo = v
}

// GetRefundAmount returns the RefundAmount field value
func (o *RefundOrderResponse) GetRefundAmount() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.RefundAmount
}

// GetRefundAmountOk returns a tuple with the RefundAmount field value
// and a boolean to check if the value has been set.
func (o *RefundOrderResponse) GetRefundAmountOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefundAmount, true
}

// SetRefundAmount sets field value
func (o *RefundOrderResponse) SetRefundAmount(v Money) {
	o.RefundAmount = v
}

// GetRefundTime returns the RefundTime field value if set, zero value otherwise.
func (o *RefundOrderResponse) GetRefundTime() string {
	if o == nil || utils.IsNil(o.RefundTime) {
		var ret string
		return ret
	}
	return *o.RefundTime
}

// GetRefundTimeOk returns a tuple with the RefundTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderResponse) GetRefundTimeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RefundTime) {
		return nil, false
	}
	return o.RefundTime, true
}

// HasRefundTime returns a boolean if a field has been set.
func (o *RefundOrderResponse) HasRefundTime() bool {
	if o != nil && !utils.IsNil(o.RefundTime) {
		return true
	}

	return false
}

// SetRefundTime gets a reference to the given string and assigns it to the RefundTime field.
func (o *RefundOrderResponse) SetRefundTime(v string) {
	o.RefundTime = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *RefundOrderResponse) GetAdditionalInfo() map[string]interface{} {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderResponse) GetAdditionalInfoOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *RefundOrderResponse) HasAdditionalInfo() bool {
	if o != nil && !utils.IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given map[string]interface{} and assigns it to the AdditionalInfo field.
func (o *RefundOrderResponse) SetAdditionalInfo(v map[string]interface{}) {
	o.AdditionalInfo = v
}

func (o RefundOrderResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefundOrderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["responseCode"] = o.ResponseCode
	toSerialize["responseMessage"] = o.ResponseMessage
	if !utils.IsNil(o.OriginalReferenceNo) {
		toSerialize["originalReferenceNo"] = o.OriginalReferenceNo
	}
	toSerialize["originalPartnerReferenceNo"] = o.OriginalPartnerReferenceNo
	if !utils.IsNil(o.OriginalExternalId) {
		toSerialize["originalExternalId"] = o.OriginalExternalId
	}
	if !utils.IsNil(o.OriginalCaptureNo) {
		toSerialize["originalCaptureNo"] = o.OriginalCaptureNo
	}
	if !utils.IsNil(o.RefundNo) {
		toSerialize["refundNo"] = o.RefundNo
	}
	toSerialize["partnerRefundNo"] = o.PartnerRefundNo
	toSerialize["refundAmount"] = o.RefundAmount
	if !utils.IsNil(o.RefundTime) {
		toSerialize["refundTime"] = o.RefundTime
	}
	if !utils.IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	return toSerialize, nil
}

func (o *RefundOrderResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"responseCode",
		"responseMessage",
		"originalPartnerReferenceNo",
		"partnerRefundNo",
		"refundAmount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRefundOrderResponse := _RefundOrderResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRefundOrderResponse)

	if err != nil {
		return err
	}

	*o = RefundOrderResponse(varRefundOrderResponse)

	return err
}

type NullableRefundOrderResponse struct {
	value *RefundOrderResponse
	isSet bool
}

func (v NullableRefundOrderResponse) Get() *RefundOrderResponse {
	return v.value
}

func (v *NullableRefundOrderResponse) Set(val *RefundOrderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundOrderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundOrderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundOrderResponse(val *RefundOrderResponse) *NullableRefundOrderResponse {
	return &NullableRefundOrderResponse{value: val, isSet: true}
}

func (v NullableRefundOrderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundOrderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


