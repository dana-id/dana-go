/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payment_gateway

import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the CreateOrderBaseRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CreateOrderBaseRequest{}

// CreateOrderBaseRequest struct for CreateOrderBaseRequest
type CreateOrderBaseRequest struct {
	// Transaction identifier on partner system
	PartnerReferenceNo string `json:"partnerReferenceNo"`
	// Merchant identifier that is unique per each merchant
	MerchantId string `json:"merchantId"`
	// Information of sub merchant identifier
	SubMerchantId *string `json:"subMerchantId,omitempty"`
	// Amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	Amount Money `json:"amount"`
	// Store identifier to indicate to which store this payment belongs to
	ExternalStoreId *string `json:"externalStoreId,omitempty"`
	// The time when the payment will be automatically expired, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
	ValidUpTo *string `json:"validUpTo,omitempty" validate:"regexp=^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\+07:00$"`
	// Payment method(s) that cannot be used for this
	DisabledPayMethods *string `json:"disabledPayMethods,omitempty"`
	// Notify URL that DANA must send the payment notification to
	UrlParams []UrlParam `json:"urlParams"`
}

type _CreateOrderBaseRequest CreateOrderBaseRequest

// NewCreateOrderBaseRequest instantiates a new CreateOrderBaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrderBaseRequest(partnerReferenceNo string, merchantId string, amount Money, urlParams []UrlParam) *CreateOrderBaseRequest {
	this := CreateOrderBaseRequest{}
	this.PartnerReferenceNo = partnerReferenceNo
	this.MerchantId = merchantId
	this.Amount = amount
	this.UrlParams = urlParams
	return &this
}

// NewCreateOrderBaseRequestWithDefaults instantiates a new CreateOrderBaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrderBaseRequestWithDefaults() *CreateOrderBaseRequest {
	this := CreateOrderBaseRequest{}
	return &this
}

// GetPartnerReferenceNo returns the PartnerReferenceNo field value
func (o *CreateOrderBaseRequest) GetPartnerReferenceNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PartnerReferenceNo
}

// GetPartnerReferenceNoOk returns a tuple with the PartnerReferenceNo field value
// and a boolean to check if the value has been set.
func (o *CreateOrderBaseRequest) GetPartnerReferenceNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartnerReferenceNo, true
}

// SetPartnerReferenceNo sets field value
func (o *CreateOrderBaseRequest) SetPartnerReferenceNo(v string) {
	o.PartnerReferenceNo = v
}

// GetMerchantId returns the MerchantId field value
func (o *CreateOrderBaseRequest) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *CreateOrderBaseRequest) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *CreateOrderBaseRequest) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetSubMerchantId returns the SubMerchantId field value if set, zero value otherwise.
func (o *CreateOrderBaseRequest) GetSubMerchantId() string {
	if o == nil || utils.IsNil(o.SubMerchantId) {
		var ret string
		return ret
	}
	return *o.SubMerchantId
}

// GetSubMerchantIdOk returns a tuple with the SubMerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrderBaseRequest) GetSubMerchantIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SubMerchantId) {
		return nil, false
	}
	return o.SubMerchantId, true
}

// HasSubMerchantId returns a boolean if a field has been set.
func (o *CreateOrderBaseRequest) HasSubMerchantId() bool {
	if o != nil && !utils.IsNil(o.SubMerchantId) {
		return true
	}

	return false
}

// SetSubMerchantId gets a reference to the given string and assigns it to the SubMerchantId field.
func (o *CreateOrderBaseRequest) SetSubMerchantId(v string) {
	o.SubMerchantId = &v
}

// GetAmount returns the Amount field value
func (o *CreateOrderBaseRequest) GetAmount() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CreateOrderBaseRequest) GetAmountOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CreateOrderBaseRequest) SetAmount(v Money) {
	o.Amount = v
}

// GetExternalStoreId returns the ExternalStoreId field value if set, zero value otherwise.
func (o *CreateOrderBaseRequest) GetExternalStoreId() string {
	if o == nil || utils.IsNil(o.ExternalStoreId) {
		var ret string
		return ret
	}
	return *o.ExternalStoreId
}

// GetExternalStoreIdOk returns a tuple with the ExternalStoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrderBaseRequest) GetExternalStoreIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExternalStoreId) {
		return nil, false
	}
	return o.ExternalStoreId, true
}

// HasExternalStoreId returns a boolean if a field has been set.
func (o *CreateOrderBaseRequest) HasExternalStoreId() bool {
	if o != nil && !utils.IsNil(o.ExternalStoreId) {
		return true
	}

	return false
}

// SetExternalStoreId gets a reference to the given string and assigns it to the ExternalStoreId field.
func (o *CreateOrderBaseRequest) SetExternalStoreId(v string) {
	o.ExternalStoreId = &v
}

// GetValidUpTo returns the ValidUpTo field value if set, zero value otherwise.
func (o *CreateOrderBaseRequest) GetValidUpTo() string {
	if o == nil || utils.IsNil(o.ValidUpTo) {
		var ret string
		return ret
	}
	return *o.ValidUpTo
}

// GetValidUpToOk returns a tuple with the ValidUpTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrderBaseRequest) GetValidUpToOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ValidUpTo) {
		return nil, false
	}
	return o.ValidUpTo, true
}

// HasValidUpTo returns a boolean if a field has been set.
func (o *CreateOrderBaseRequest) HasValidUpTo() bool {
	if o != nil && !utils.IsNil(o.ValidUpTo) {
		return true
	}

	return false
}

// SetValidUpTo gets a reference to the given string and assigns it to the ValidUpTo field.
func (o *CreateOrderBaseRequest) SetValidUpTo(v string) {
	o.ValidUpTo = &v
}

// GetDisabledPayMethods returns the DisabledPayMethods field value if set, zero value otherwise.
func (o *CreateOrderBaseRequest) GetDisabledPayMethods() string {
	if o == nil || utils.IsNil(o.DisabledPayMethods) {
		var ret string
		return ret
	}
	return *o.DisabledPayMethods
}

// GetDisabledPayMethodsOk returns a tuple with the DisabledPayMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrderBaseRequest) GetDisabledPayMethodsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DisabledPayMethods) {
		return nil, false
	}
	return o.DisabledPayMethods, true
}

// HasDisabledPayMethods returns a boolean if a field has been set.
func (o *CreateOrderBaseRequest) HasDisabledPayMethods() bool {
	if o != nil && !utils.IsNil(o.DisabledPayMethods) {
		return true
	}

	return false
}

// SetDisabledPayMethods gets a reference to the given string and assigns it to the DisabledPayMethods field.
func (o *CreateOrderBaseRequest) SetDisabledPayMethods(v string) {
	o.DisabledPayMethods = &v
}

// GetUrlParams returns the UrlParams field value
func (o *CreateOrderBaseRequest) GetUrlParams() []UrlParam {
	if o == nil {
		var ret []UrlParam
		return ret
	}

	return o.UrlParams
}

// GetUrlParamsOk returns a tuple with the UrlParams field value
// and a boolean to check if the value has been set.
func (o *CreateOrderBaseRequest) GetUrlParamsOk() ([]UrlParam, bool) {
	if o == nil {
		return nil, false
	}
	return o.UrlParams, true
}

// SetUrlParams sets field value
func (o *CreateOrderBaseRequest) SetUrlParams(v []UrlParam) {
	o.UrlParams = v
}

func (o CreateOrderBaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOrderBaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["partnerReferenceNo"] = o.PartnerReferenceNo
	toSerialize["merchantId"] = o.MerchantId
	if !utils.IsNil(o.SubMerchantId) {
		toSerialize["subMerchantId"] = o.SubMerchantId
	}
	toSerialize["amount"] = o.Amount
	if !utils.IsNil(o.ExternalStoreId) {
		toSerialize["externalStoreId"] = o.ExternalStoreId
	}
	if !utils.IsNil(o.ValidUpTo) {
		toSerialize["validUpTo"] = o.ValidUpTo
	}
	if !utils.IsNil(o.DisabledPayMethods) {
		toSerialize["disabledPayMethods"] = o.DisabledPayMethods
	}
	toSerialize["urlParams"] = o.UrlParams
	return toSerialize, nil
}

func (o *CreateOrderBaseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"partnerReferenceNo",
		"merchantId",
		"amount",
		"urlParams",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateOrderBaseRequest := _CreateOrderBaseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateOrderBaseRequest)

	if err != nil {
		return err
	}

	*o = CreateOrderBaseRequest(varCreateOrderBaseRequest)

	return err
}

type NullableCreateOrderBaseRequest struct {
	value *CreateOrderBaseRequest
	isSet bool
}

func (v NullableCreateOrderBaseRequest) Get() *CreateOrderBaseRequest {
	return v.value
}

func (v *NullableCreateOrderBaseRequest) Set(val *CreateOrderBaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrderBaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrderBaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrderBaseRequest(val *CreateOrderBaseRequest) *NullableCreateOrderBaseRequest {
	return &NullableCreateOrderBaseRequest{value: val, isSet: true}
}

func (v NullableCreateOrderBaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrderBaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


