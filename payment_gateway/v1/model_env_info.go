/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payment_gateway

import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/go_client/utils"
)

// checks if the EnvInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &EnvInfo{}

// EnvInfo struct for EnvInfo
type EnvInfo struct {
	SessionId *string `json:"sessionId,omitempty"`
	TokenId *string `json:"tokenId,omitempty"`
	WebsiteLanguage *string `json:"websiteLanguage,omitempty"`
	ClientIp *string `json:"clientIp,omitempty"`
	OsType *string `json:"osType,omitempty"`
	AppVersion *string `json:"appVersion,omitempty"`
	SdkVersion *string `json:"sdkVersion,omitempty"`
	SourcePlatform string `json:"sourcePlatform"`
	OrderOsType *string `json:"orderOsType,omitempty"`
	MerchantAppVersion *string `json:"merchantAppVersion,omitempty"`
	TerminalType string `json:"terminalType"`
	OrderTerminalType *string `json:"orderTerminalType,omitempty"`
	ExtendInfo *string `json:"extendInfo,omitempty"`
}

type _EnvInfo EnvInfo

// NewEnvInfo instantiates a new EnvInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvInfo(sourcePlatform string, terminalType string) *EnvInfo {
	this := EnvInfo{}
	this.SourcePlatform = sourcePlatform
	this.TerminalType = terminalType
	return &this
}

// NewEnvInfoWithDefaults instantiates a new EnvInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvInfoWithDefaults() *EnvInfo {
	this := EnvInfo{}
	return &this
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *EnvInfo) GetSessionId() string {
	if o == nil || utils.IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetSessionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *EnvInfo) HasSessionId() bool {
	if o != nil && !utils.IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *EnvInfo) SetSessionId(v string) {
	o.SessionId = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *EnvInfo) GetTokenId() string {
	if o == nil || utils.IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetTokenIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *EnvInfo) HasTokenId() bool {
	if o != nil && !utils.IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *EnvInfo) SetTokenId(v string) {
	o.TokenId = &v
}

// GetWebsiteLanguage returns the WebsiteLanguage field value if set, zero value otherwise.
func (o *EnvInfo) GetWebsiteLanguage() string {
	if o == nil || utils.IsNil(o.WebsiteLanguage) {
		var ret string
		return ret
	}
	return *o.WebsiteLanguage
}

// GetWebsiteLanguageOk returns a tuple with the WebsiteLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetWebsiteLanguageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.WebsiteLanguage) {
		return nil, false
	}
	return o.WebsiteLanguage, true
}

// HasWebsiteLanguage returns a boolean if a field has been set.
func (o *EnvInfo) HasWebsiteLanguage() bool {
	if o != nil && !utils.IsNil(o.WebsiteLanguage) {
		return true
	}

	return false
}

// SetWebsiteLanguage gets a reference to the given string and assigns it to the WebsiteLanguage field.
func (o *EnvInfo) SetWebsiteLanguage(v string) {
	o.WebsiteLanguage = &v
}

// GetClientIp returns the ClientIp field value if set, zero value otherwise.
func (o *EnvInfo) GetClientIp() string {
	if o == nil || utils.IsNil(o.ClientIp) {
		var ret string
		return ret
	}
	return *o.ClientIp
}

// GetClientIpOk returns a tuple with the ClientIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetClientIpOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ClientIp) {
		return nil, false
	}
	return o.ClientIp, true
}

// HasClientIp returns a boolean if a field has been set.
func (o *EnvInfo) HasClientIp() bool {
	if o != nil && !utils.IsNil(o.ClientIp) {
		return true
	}

	return false
}

// SetClientIp gets a reference to the given string and assigns it to the ClientIp field.
func (o *EnvInfo) SetClientIp(v string) {
	o.ClientIp = &v
}

// GetOsType returns the OsType field value if set, zero value otherwise.
func (o *EnvInfo) GetOsType() string {
	if o == nil || utils.IsNil(o.OsType) {
		var ret string
		return ret
	}
	return *o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetOsTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OsType) {
		return nil, false
	}
	return o.OsType, true
}

// HasOsType returns a boolean if a field has been set.
func (o *EnvInfo) HasOsType() bool {
	if o != nil && !utils.IsNil(o.OsType) {
		return true
	}

	return false
}

// SetOsType gets a reference to the given string and assigns it to the OsType field.
func (o *EnvInfo) SetOsType(v string) {
	o.OsType = &v
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise.
func (o *EnvInfo) GetAppVersion() string {
	if o == nil || utils.IsNil(o.AppVersion) {
		var ret string
		return ret
	}
	return *o.AppVersion
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetAppVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AppVersion) {
		return nil, false
	}
	return o.AppVersion, true
}

// HasAppVersion returns a boolean if a field has been set.
func (o *EnvInfo) HasAppVersion() bool {
	if o != nil && !utils.IsNil(o.AppVersion) {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given string and assigns it to the AppVersion field.
func (o *EnvInfo) SetAppVersion(v string) {
	o.AppVersion = &v
}

// GetSdkVersion returns the SdkVersion field value if set, zero value otherwise.
func (o *EnvInfo) GetSdkVersion() string {
	if o == nil || utils.IsNil(o.SdkVersion) {
		var ret string
		return ret
	}
	return *o.SdkVersion
}

// GetSdkVersionOk returns a tuple with the SdkVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetSdkVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SdkVersion) {
		return nil, false
	}
	return o.SdkVersion, true
}

// HasSdkVersion returns a boolean if a field has been set.
func (o *EnvInfo) HasSdkVersion() bool {
	if o != nil && !utils.IsNil(o.SdkVersion) {
		return true
	}

	return false
}

// SetSdkVersion gets a reference to the given string and assigns it to the SdkVersion field.
func (o *EnvInfo) SetSdkVersion(v string) {
	o.SdkVersion = &v
}

// GetSourcePlatform returns the SourcePlatform field value
func (o *EnvInfo) GetSourcePlatform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourcePlatform
}

// GetSourcePlatformOk returns a tuple with the SourcePlatform field value
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetSourcePlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourcePlatform, true
}

// SetSourcePlatform sets field value
func (o *EnvInfo) SetSourcePlatform(v string) {
	o.SourcePlatform = v
}

// GetOrderOsType returns the OrderOsType field value if set, zero value otherwise.
func (o *EnvInfo) GetOrderOsType() string {
	if o == nil || utils.IsNil(o.OrderOsType) {
		var ret string
		return ret
	}
	return *o.OrderOsType
}

// GetOrderOsTypeOk returns a tuple with the OrderOsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetOrderOsTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OrderOsType) {
		return nil, false
	}
	return o.OrderOsType, true
}

// HasOrderOsType returns a boolean if a field has been set.
func (o *EnvInfo) HasOrderOsType() bool {
	if o != nil && !utils.IsNil(o.OrderOsType) {
		return true
	}

	return false
}

// SetOrderOsType gets a reference to the given string and assigns it to the OrderOsType field.
func (o *EnvInfo) SetOrderOsType(v string) {
	o.OrderOsType = &v
}

// GetMerchantAppVersion returns the MerchantAppVersion field value if set, zero value otherwise.
func (o *EnvInfo) GetMerchantAppVersion() string {
	if o == nil || utils.IsNil(o.MerchantAppVersion) {
		var ret string
		return ret
	}
	return *o.MerchantAppVersion
}

// GetMerchantAppVersionOk returns a tuple with the MerchantAppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetMerchantAppVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MerchantAppVersion) {
		return nil, false
	}
	return o.MerchantAppVersion, true
}

// HasMerchantAppVersion returns a boolean if a field has been set.
func (o *EnvInfo) HasMerchantAppVersion() bool {
	if o != nil && !utils.IsNil(o.MerchantAppVersion) {
		return true
	}

	return false
}

// SetMerchantAppVersion gets a reference to the given string and assigns it to the MerchantAppVersion field.
func (o *EnvInfo) SetMerchantAppVersion(v string) {
	o.MerchantAppVersion = &v
}

// GetTerminalType returns the TerminalType field value
func (o *EnvInfo) GetTerminalType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TerminalType
}

// GetTerminalTypeOk returns a tuple with the TerminalType field value
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetTerminalTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TerminalType, true
}

// SetTerminalType sets field value
func (o *EnvInfo) SetTerminalType(v string) {
	o.TerminalType = v
}

// GetOrderTerminalType returns the OrderTerminalType field value if set, zero value otherwise.
func (o *EnvInfo) GetOrderTerminalType() string {
	if o == nil || utils.IsNil(o.OrderTerminalType) {
		var ret string
		return ret
	}
	return *o.OrderTerminalType
}

// GetOrderTerminalTypeOk returns a tuple with the OrderTerminalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetOrderTerminalTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OrderTerminalType) {
		return nil, false
	}
	return o.OrderTerminalType, true
}

// HasOrderTerminalType returns a boolean if a field has been set.
func (o *EnvInfo) HasOrderTerminalType() bool {
	if o != nil && !utils.IsNil(o.OrderTerminalType) {
		return true
	}

	return false
}

// SetOrderTerminalType gets a reference to the given string and assigns it to the OrderTerminalType field.
func (o *EnvInfo) SetOrderTerminalType(v string) {
	o.OrderTerminalType = &v
}

// GetExtendInfo returns the ExtendInfo field value if set, zero value otherwise.
func (o *EnvInfo) GetExtendInfo() string {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		var ret string
		return ret
	}
	return *o.ExtendInfo
}

// GetExtendInfoOk returns a tuple with the ExtendInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvInfo) GetExtendInfoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		return nil, false
	}
	return o.ExtendInfo, true
}

// HasExtendInfo returns a boolean if a field has been set.
func (o *EnvInfo) HasExtendInfo() bool {
	if o != nil && !utils.IsNil(o.ExtendInfo) {
		return true
	}

	return false
}

// SetExtendInfo gets a reference to the given string and assigns it to the ExtendInfo field.
func (o *EnvInfo) SetExtendInfo(v string) {
	o.ExtendInfo = &v
}

func (o EnvInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.SessionId) {
		toSerialize["sessionId"] = o.SessionId
	}
	if !utils.IsNil(o.TokenId) {
		toSerialize["tokenId"] = o.TokenId
	}
	if !utils.IsNil(o.WebsiteLanguage) {
		toSerialize["websiteLanguage"] = o.WebsiteLanguage
	}
	if !utils.IsNil(o.ClientIp) {
		toSerialize["clientIp"] = o.ClientIp
	}
	if !utils.IsNil(o.OsType) {
		toSerialize["osType"] = o.OsType
	}
	if !utils.IsNil(o.AppVersion) {
		toSerialize["appVersion"] = o.AppVersion
	}
	if !utils.IsNil(o.SdkVersion) {
		toSerialize["sdkVersion"] = o.SdkVersion
	}
	toSerialize["sourcePlatform"] = o.SourcePlatform
	if !utils.IsNil(o.OrderOsType) {
		toSerialize["orderOsType"] = o.OrderOsType
	}
	if !utils.IsNil(o.MerchantAppVersion) {
		toSerialize["merchantAppVersion"] = o.MerchantAppVersion
	}
	toSerialize["terminalType"] = o.TerminalType
	if !utils.IsNil(o.OrderTerminalType) {
		toSerialize["orderTerminalType"] = o.OrderTerminalType
	}
	if !utils.IsNil(o.ExtendInfo) {
		toSerialize["extendInfo"] = o.ExtendInfo
	}
	return toSerialize, nil
}

func (o *EnvInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sourcePlatform",
		"terminalType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvInfo := _EnvInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnvInfo)

	if err != nil {
		return err
	}

	*o = EnvInfo(varEnvInfo)

	return err
}

type NullableEnvInfo struct {
	value *EnvInfo
	isSet bool
}

func (v NullableEnvInfo) Get() *EnvInfo {
	return v.value
}

func (v *NullableEnvInfo) Set(val *EnvInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvInfo(val *EnvInfo) *NullableEnvInfo {
	return &NullableEnvInfo{value: val, isSet: true}
}

func (v NullableEnvInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


