/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payment_gateway

import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the RefundOrderRequestAdditionalInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RefundOrderRequestAdditionalInfo{}

// RefundOrderRequestAdditionalInfo struct for RefundOrderRequestAdditionalInfo
type RefundOrderRequestAdditionalInfo struct {
	// Additional information of payout account number. This param need to be filled if want to refund to specific payout account not that specified by DANA
	PayoutAccountNo *string `json:"payoutAccountNo,omitempty"`
	// Additional information of refund applied time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
	RefundAppliedTime *string `json:"refundAppliedTime,omitempty"`
	// Additional information of actor type. The enums:<br> * USER - User<br> * MERCHANT - Merchant<br * MERCHANT_OPERATOR - Merchant operator<br> * BACK_OFFICE - Back office<br> * SYSTEM - System<br> 
	ActorType *string `json:"actorType,omitempty"`
	// Additional information of return charge to payer
	ReturnChargeToPayer *string `json:"returnChargeToPayer,omitempty"`
	// Additional information of destination
	Destination *string `json:"destination,omitempty"`
	// Additional information of environment
	EnvInfo *EnvInfo `json:"envInfo,omitempty"`
	// Additional information of audit
	AuditInfo *AuditInfo `json:"auditInfo,omitempty"`
	// Additional information of actor context
	ActorContext *ActorContext `json:"actorContext,omitempty"`
	// Additional information of refund option bill
	RefundOptionBill []RefundOptionBill `json:"refundOptionBill,omitempty"`
	// Additional information of extend
	ExtendInfo *string `json:"extendInfo,omitempty"`
	// Additional information of async refund to determine the process of refund whether sync or async. The values is true/false
	AsyncRefund *string `json:"asyncRefund,omitempty"`
}

// NewRefundOrderRequestAdditionalInfo instantiates a new RefundOrderRequestAdditionalInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundOrderRequestAdditionalInfo() *RefundOrderRequestAdditionalInfo {
	this := RefundOrderRequestAdditionalInfo{}
	return &this
}

// NewRefundOrderRequestAdditionalInfoWithDefaults instantiates a new RefundOrderRequestAdditionalInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundOrderRequestAdditionalInfoWithDefaults() *RefundOrderRequestAdditionalInfo {
	this := RefundOrderRequestAdditionalInfo{}
	return &this
}

// GetPayoutAccountNo returns the PayoutAccountNo field value if set, zero value otherwise.
func (o *RefundOrderRequestAdditionalInfo) GetPayoutAccountNo() string {
	if o == nil || utils.IsNil(o.PayoutAccountNo) {
		var ret string
		return ret
	}
	return *o.PayoutAccountNo
}

// GetPayoutAccountNoOk returns a tuple with the PayoutAccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderRequestAdditionalInfo) GetPayoutAccountNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PayoutAccountNo) {
		return nil, false
	}
	return o.PayoutAccountNo, true
}

// HasPayoutAccountNo returns a boolean if a field has been set.
func (o *RefundOrderRequestAdditionalInfo) HasPayoutAccountNo() bool {
	if o != nil && !utils.IsNil(o.PayoutAccountNo) {
		return true
	}

	return false
}

// SetPayoutAccountNo gets a reference to the given string and assigns it to the PayoutAccountNo field.
func (o *RefundOrderRequestAdditionalInfo) SetPayoutAccountNo(v string) {
	o.PayoutAccountNo = &v
}

// GetRefundAppliedTime returns the RefundAppliedTime field value if set, zero value otherwise.
func (o *RefundOrderRequestAdditionalInfo) GetRefundAppliedTime() string {
	if o == nil || utils.IsNil(o.RefundAppliedTime) {
		var ret string
		return ret
	}
	return *o.RefundAppliedTime
}

// GetRefundAppliedTimeOk returns a tuple with the RefundAppliedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderRequestAdditionalInfo) GetRefundAppliedTimeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RefundAppliedTime) {
		return nil, false
	}
	return o.RefundAppliedTime, true
}

// HasRefundAppliedTime returns a boolean if a field has been set.
func (o *RefundOrderRequestAdditionalInfo) HasRefundAppliedTime() bool {
	if o != nil && !utils.IsNil(o.RefundAppliedTime) {
		return true
	}

	return false
}

// SetRefundAppliedTime gets a reference to the given string and assigns it to the RefundAppliedTime field.
func (o *RefundOrderRequestAdditionalInfo) SetRefundAppliedTime(v string) {
	o.RefundAppliedTime = &v
}

// GetActorType returns the ActorType field value if set, zero value otherwise.
func (o *RefundOrderRequestAdditionalInfo) GetActorType() string {
	if o == nil || utils.IsNil(o.ActorType) {
		var ret string
		return ret
	}
	return *o.ActorType
}

// GetActorTypeOk returns a tuple with the ActorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderRequestAdditionalInfo) GetActorTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ActorType) {
		return nil, false
	}
	return o.ActorType, true
}

// HasActorType returns a boolean if a field has been set.
func (o *RefundOrderRequestAdditionalInfo) HasActorType() bool {
	if o != nil && !utils.IsNil(o.ActorType) {
		return true
	}

	return false
}

// SetActorType gets a reference to the given string and assigns it to the ActorType field.
func (o *RefundOrderRequestAdditionalInfo) SetActorType(v string) {
	o.ActorType = &v
}

// GetReturnChargeToPayer returns the ReturnChargeToPayer field value if set, zero value otherwise.
func (o *RefundOrderRequestAdditionalInfo) GetReturnChargeToPayer() string {
	if o == nil || utils.IsNil(o.ReturnChargeToPayer) {
		var ret string
		return ret
	}
	return *o.ReturnChargeToPayer
}

// GetReturnChargeToPayerOk returns a tuple with the ReturnChargeToPayer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderRequestAdditionalInfo) GetReturnChargeToPayerOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ReturnChargeToPayer) {
		return nil, false
	}
	return o.ReturnChargeToPayer, true
}

// HasReturnChargeToPayer returns a boolean if a field has been set.
func (o *RefundOrderRequestAdditionalInfo) HasReturnChargeToPayer() bool {
	if o != nil && !utils.IsNil(o.ReturnChargeToPayer) {
		return true
	}

	return false
}

// SetReturnChargeToPayer gets a reference to the given string and assigns it to the ReturnChargeToPayer field.
func (o *RefundOrderRequestAdditionalInfo) SetReturnChargeToPayer(v string) {
	o.ReturnChargeToPayer = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *RefundOrderRequestAdditionalInfo) GetDestination() string {
	if o == nil || utils.IsNil(o.Destination) {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderRequestAdditionalInfo) GetDestinationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *RefundOrderRequestAdditionalInfo) HasDestination() bool {
	if o != nil && !utils.IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *RefundOrderRequestAdditionalInfo) SetDestination(v string) {
	o.Destination = &v
}

// GetEnvInfo returns the EnvInfo field value if set, zero value otherwise.
func (o *RefundOrderRequestAdditionalInfo) GetEnvInfo() EnvInfo {
	if o == nil || utils.IsNil(o.EnvInfo) {
		var ret EnvInfo
		return ret
	}
	return *o.EnvInfo
}

// GetEnvInfoOk returns a tuple with the EnvInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderRequestAdditionalInfo) GetEnvInfoOk() (*EnvInfo, bool) {
	if o == nil || utils.IsNil(o.EnvInfo) {
		return nil, false
	}
	return o.EnvInfo, true
}

// HasEnvInfo returns a boolean if a field has been set.
func (o *RefundOrderRequestAdditionalInfo) HasEnvInfo() bool {
	if o != nil && !utils.IsNil(o.EnvInfo) {
		return true
	}

	return false
}

// SetEnvInfo gets a reference to the given EnvInfo and assigns it to the EnvInfo field.
func (o *RefundOrderRequestAdditionalInfo) SetEnvInfo(v EnvInfo) {
	o.EnvInfo = &v
}

// GetAuditInfo returns the AuditInfo field value if set, zero value otherwise.
func (o *RefundOrderRequestAdditionalInfo) GetAuditInfo() AuditInfo {
	if o == nil || utils.IsNil(o.AuditInfo) {
		var ret AuditInfo
		return ret
	}
	return *o.AuditInfo
}

// GetAuditInfoOk returns a tuple with the AuditInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderRequestAdditionalInfo) GetAuditInfoOk() (*AuditInfo, bool) {
	if o == nil || utils.IsNil(o.AuditInfo) {
		return nil, false
	}
	return o.AuditInfo, true
}

// HasAuditInfo returns a boolean if a field has been set.
func (o *RefundOrderRequestAdditionalInfo) HasAuditInfo() bool {
	if o != nil && !utils.IsNil(o.AuditInfo) {
		return true
	}

	return false
}

// SetAuditInfo gets a reference to the given AuditInfo and assigns it to the AuditInfo field.
func (o *RefundOrderRequestAdditionalInfo) SetAuditInfo(v AuditInfo) {
	o.AuditInfo = &v
}

// GetActorContext returns the ActorContext field value if set, zero value otherwise.
func (o *RefundOrderRequestAdditionalInfo) GetActorContext() ActorContext {
	if o == nil || utils.IsNil(o.ActorContext) {
		var ret ActorContext
		return ret
	}
	return *o.ActorContext
}

// GetActorContextOk returns a tuple with the ActorContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderRequestAdditionalInfo) GetActorContextOk() (*ActorContext, bool) {
	if o == nil || utils.IsNil(o.ActorContext) {
		return nil, false
	}
	return o.ActorContext, true
}

// HasActorContext returns a boolean if a field has been set.
func (o *RefundOrderRequestAdditionalInfo) HasActorContext() bool {
	if o != nil && !utils.IsNil(o.ActorContext) {
		return true
	}

	return false
}

// SetActorContext gets a reference to the given ActorContext and assigns it to the ActorContext field.
func (o *RefundOrderRequestAdditionalInfo) SetActorContext(v ActorContext) {
	o.ActorContext = &v
}

// GetRefundOptionBill returns the RefundOptionBill field value if set, zero value otherwise.
func (o *RefundOrderRequestAdditionalInfo) GetRefundOptionBill() []RefundOptionBill {
	if o == nil || utils.IsNil(o.RefundOptionBill) {
		var ret []RefundOptionBill
		return ret
	}
	return o.RefundOptionBill
}

// GetRefundOptionBillOk returns a tuple with the RefundOptionBill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderRequestAdditionalInfo) GetRefundOptionBillOk() ([]RefundOptionBill, bool) {
	if o == nil || utils.IsNil(o.RefundOptionBill) {
		return nil, false
	}
	return o.RefundOptionBill, true
}

// HasRefundOptionBill returns a boolean if a field has been set.
func (o *RefundOrderRequestAdditionalInfo) HasRefundOptionBill() bool {
	if o != nil && !utils.IsNil(o.RefundOptionBill) {
		return true
	}

	return false
}

// SetRefundOptionBill gets a reference to the given []RefundOptionBill and assigns it to the RefundOptionBill field.
func (o *RefundOrderRequestAdditionalInfo) SetRefundOptionBill(v []RefundOptionBill) {
	o.RefundOptionBill = v
}

// GetExtendInfo returns the ExtendInfo field value if set, zero value otherwise.
func (o *RefundOrderRequestAdditionalInfo) GetExtendInfo() string {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		var ret string
		return ret
	}
	return *o.ExtendInfo
}

// GetExtendInfoOk returns a tuple with the ExtendInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderRequestAdditionalInfo) GetExtendInfoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		return nil, false
	}
	return o.ExtendInfo, true
}

// HasExtendInfo returns a boolean if a field has been set.
func (o *RefundOrderRequestAdditionalInfo) HasExtendInfo() bool {
	if o != nil && !utils.IsNil(o.ExtendInfo) {
		return true
	}

	return false
}

// SetExtendInfo gets a reference to the given string and assigns it to the ExtendInfo field.
func (o *RefundOrderRequestAdditionalInfo) SetExtendInfo(v string) {
	o.ExtendInfo = &v
}

// GetAsyncRefund returns the AsyncRefund field value if set, zero value otherwise.
func (o *RefundOrderRequestAdditionalInfo) GetAsyncRefund() string {
	if o == nil || utils.IsNil(o.AsyncRefund) {
		var ret string
		return ret
	}
	return *o.AsyncRefund
}

// GetAsyncRefundOk returns a tuple with the AsyncRefund field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOrderRequestAdditionalInfo) GetAsyncRefundOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AsyncRefund) {
		return nil, false
	}
	return o.AsyncRefund, true
}

// HasAsyncRefund returns a boolean if a field has been set.
func (o *RefundOrderRequestAdditionalInfo) HasAsyncRefund() bool {
	if o != nil && !utils.IsNil(o.AsyncRefund) {
		return true
	}

	return false
}

// SetAsyncRefund gets a reference to the given string and assigns it to the AsyncRefund field.
func (o *RefundOrderRequestAdditionalInfo) SetAsyncRefund(v string) {
	o.AsyncRefund = &v
}

func (o RefundOrderRequestAdditionalInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefundOrderRequestAdditionalInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PayoutAccountNo) {
		toSerialize["payoutAccountNo"] = o.PayoutAccountNo
	}
	if !utils.IsNil(o.RefundAppliedTime) {
		toSerialize["refundAppliedTime"] = o.RefundAppliedTime
	}
	if !utils.IsNil(o.ActorType) {
		toSerialize["actorType"] = o.ActorType
	}
	if !utils.IsNil(o.ReturnChargeToPayer) {
		toSerialize["returnChargeToPayer"] = o.ReturnChargeToPayer
	}
	if !utils.IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !utils.IsNil(o.EnvInfo) {
		toSerialize["envInfo"] = o.EnvInfo
	}
	if !utils.IsNil(o.AuditInfo) {
		toSerialize["auditInfo"] = o.AuditInfo
	}
	if !utils.IsNil(o.ActorContext) {
		toSerialize["actorContext"] = o.ActorContext
	}
	if !utils.IsNil(o.RefundOptionBill) {
		toSerialize["refundOptionBill"] = o.RefundOptionBill
	}
	if !utils.IsNil(o.ExtendInfo) {
		toSerialize["extendInfo"] = o.ExtendInfo
	}
	if !utils.IsNil(o.AsyncRefund) {
		toSerialize["asyncRefund"] = o.AsyncRefund
	}
	return toSerialize, nil
}

type NullableRefundOrderRequestAdditionalInfo struct {
	value *RefundOrderRequestAdditionalInfo
	isSet bool
}

func (v NullableRefundOrderRequestAdditionalInfo) Get() *RefundOrderRequestAdditionalInfo {
	return v.value
}

func (v *NullableRefundOrderRequestAdditionalInfo) Set(val *RefundOrderRequestAdditionalInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundOrderRequestAdditionalInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundOrderRequestAdditionalInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundOrderRequestAdditionalInfo(val *RefundOrderRequestAdditionalInfo) *NullableRefundOrderRequestAdditionalInfo {
	return &NullableRefundOrderRequestAdditionalInfo{value: val, isSet: true}
}

func (v NullableRefundOrderRequestAdditionalInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundOrderRequestAdditionalInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


