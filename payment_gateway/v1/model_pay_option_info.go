// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package payment_gateway

/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the PayOptionInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PayOptionInfo{}

// PayOptionInfo struct for PayOptionInfo
type PayOptionInfo struct {
	// Payment method name. The enums:<br>   * BALANCE - Payment method with balance<br>   * COUPON - Payment method with coupon<br>   * NET_BANKING - Payment method with internet banking<br>   * CREDIT_CARD - Payment method with credit card<br>   * DEBIT_CARD - Payment method with debit card<br>   * VIRTUAL_ACCOUNT - Payment method with virtual account<br>   * OTC - Payment method with OTC<br>   * DIRECT_DEBIT_CREDIT_CARD - Payment method with direct debit of credit card<br>   * DIRECT_DEBIT_DEBIT_CARD - Payment method with direct debit of debit card<br>   * ONLINE_CREDIT - Payment method with online Credit<br>   * LOAN_CREDIT - Payment method with DANA Cicil<br>   * NETWORK_PAY - Payment method with e-wallet 
	PayMethod string `json:"payMethod"`
	// Payment option which shows the provider of this payment. The enums:<br>   * NETWORK_PAY_PG_SPAY - Payment method with ShopeePay e-wallet<br>   * NETWORK_PAY_PG_OVO - Payment method with OVO e-wallet<br>   * NETWORK_PAY_PG_GOPAY - Payment method with GoPay e-wallet<br>   * NETWORK_PAY_PG_LINKAJA - Payment method with LinkAja e-wallet<br>   * NETWORK_PAY_PG_CARD - Payment method with Card<br>   * VIRTUAL_ACCOUNT_BCA - Payment method with BCA virtual account<br>   * VIRTUAL_ACCOUNT_BNI - Payment method with BNI virtual account<br>   * VIRTUAL_ACCOUNT_MANDIRI - Payment method with Mandiri virtual account<br>   * VIRTUAL_ACCOUNT_BRI - Payment method with BRI virtual account<br>   * VIRTUAL_ACCOUNT_BTPN - Payment method with BTPN virtual account<br>   * VIRTUAL_ACCOUNT_CIMB - Payment method with CIMB virtual account<br>   * VIRTUAL_ACCOUNT_PERMATA - Payment method with Permata virtual account<br> 
	PayOption *string `json:"payOption,omitempty"`
	// Pay amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	PayAmount *Money `json:"payAmount,omitempty"`
	// Trans amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	TransAmount *Money `json:"transAmount,omitempty"`
	// Charge amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	ChargeAmount *Money `json:"chargeAmount,omitempty"`
	// Extend information of pay option bill
	PayOptionBillExtendInfo *string `json:"payOptionBillExtendInfo,omitempty"`
	// Extend information
	ExtendInfo *string `json:"extendInfo,omitempty"`
	// Payment code
	PaymentCode *string `json:"paymentCode,omitempty"`
}

type _PayOptionInfo PayOptionInfo

// NewPayOptionInfo instantiates a new PayOptionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayOptionInfo(payMethod string) *PayOptionInfo {
	this := PayOptionInfo{}
	this.PayMethod = payMethod
	return &this
}

// NewPayOptionInfoWithDefaults instantiates a new PayOptionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayOptionInfoWithDefaults() *PayOptionInfo {
	this := PayOptionInfo{}
	return &this
}

// GetPayMethod returns the PayMethod field value
func (o *PayOptionInfo) GetPayMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayMethod
}

// GetPayMethodOk returns a tuple with the PayMethod field value
// and a boolean to check if the value has been set.
func (o *PayOptionInfo) GetPayMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayMethod, true
}

// SetPayMethod sets field value
func (o *PayOptionInfo) SetPayMethod(v string) {
	o.PayMethod = v
}

// GetPayOption returns the PayOption field value if set, zero value otherwise.
func (o *PayOptionInfo) GetPayOption() string {
	if o == nil || utils.IsNil(o.PayOption) {
		var ret string
		return ret
	}
	return *o.PayOption
}

// GetPayOptionOk returns a tuple with the PayOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionInfo) GetPayOptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PayOption) {
		return nil, false
	}
	return o.PayOption, true
}

// HasPayOption returns a boolean if a field has been set.
func (o *PayOptionInfo) HasPayOption() bool {
	if o != nil && !utils.IsNil(o.PayOption) {
		return true
	}

	return false
}

// SetPayOption gets a reference to the given string and assigns it to the PayOption field.
func (o *PayOptionInfo) SetPayOption(v string) {
	o.PayOption = &v
}

// GetPayAmount returns the PayAmount field value if set, zero value otherwise.
func (o *PayOptionInfo) GetPayAmount() Money {
	if o == nil || utils.IsNil(o.PayAmount) {
		var ret Money
		return ret
	}
	return *o.PayAmount
}

// GetPayAmountOk returns a tuple with the PayAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionInfo) GetPayAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.PayAmount) {
		return nil, false
	}
	return o.PayAmount, true
}

// HasPayAmount returns a boolean if a field has been set.
func (o *PayOptionInfo) HasPayAmount() bool {
	if o != nil && !utils.IsNil(o.PayAmount) {
		return true
	}

	return false
}

// SetPayAmount gets a reference to the given Money and assigns it to the PayAmount field.
func (o *PayOptionInfo) SetPayAmount(v Money) {
	o.PayAmount = &v
}

// GetTransAmount returns the TransAmount field value if set, zero value otherwise.
func (o *PayOptionInfo) GetTransAmount() Money {
	if o == nil || utils.IsNil(o.TransAmount) {
		var ret Money
		return ret
	}
	return *o.TransAmount
}

// GetTransAmountOk returns a tuple with the TransAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionInfo) GetTransAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.TransAmount) {
		return nil, false
	}
	return o.TransAmount, true
}

// HasTransAmount returns a boolean if a field has been set.
func (o *PayOptionInfo) HasTransAmount() bool {
	if o != nil && !utils.IsNil(o.TransAmount) {
		return true
	}

	return false
}

// SetTransAmount gets a reference to the given Money and assigns it to the TransAmount field.
func (o *PayOptionInfo) SetTransAmount(v Money) {
	o.TransAmount = &v
}

// GetChargeAmount returns the ChargeAmount field value if set, zero value otherwise.
func (o *PayOptionInfo) GetChargeAmount() Money {
	if o == nil || utils.IsNil(o.ChargeAmount) {
		var ret Money
		return ret
	}
	return *o.ChargeAmount
}

// GetChargeAmountOk returns a tuple with the ChargeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionInfo) GetChargeAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.ChargeAmount) {
		return nil, false
	}
	return o.ChargeAmount, true
}

// HasChargeAmount returns a boolean if a field has been set.
func (o *PayOptionInfo) HasChargeAmount() bool {
	if o != nil && !utils.IsNil(o.ChargeAmount) {
		return true
	}

	return false
}

// SetChargeAmount gets a reference to the given Money and assigns it to the ChargeAmount field.
func (o *PayOptionInfo) SetChargeAmount(v Money) {
	o.ChargeAmount = &v
}

// GetPayOptionBillExtendInfo returns the PayOptionBillExtendInfo field value if set, zero value otherwise.
func (o *PayOptionInfo) GetPayOptionBillExtendInfo() string {
	if o == nil || utils.IsNil(o.PayOptionBillExtendInfo) {
		var ret string
		return ret
	}
	return *o.PayOptionBillExtendInfo
}

// GetPayOptionBillExtendInfoOk returns a tuple with the PayOptionBillExtendInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionInfo) GetPayOptionBillExtendInfoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PayOptionBillExtendInfo) {
		return nil, false
	}
	return o.PayOptionBillExtendInfo, true
}

// HasPayOptionBillExtendInfo returns a boolean if a field has been set.
func (o *PayOptionInfo) HasPayOptionBillExtendInfo() bool {
	if o != nil && !utils.IsNil(o.PayOptionBillExtendInfo) {
		return true
	}

	return false
}

// SetPayOptionBillExtendInfo gets a reference to the given string and assigns it to the PayOptionBillExtendInfo field.
func (o *PayOptionInfo) SetPayOptionBillExtendInfo(v string) {
	o.PayOptionBillExtendInfo = &v
}

// GetExtendInfo returns the ExtendInfo field value if set, zero value otherwise.
func (o *PayOptionInfo) GetExtendInfo() string {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		var ret string
		return ret
	}
	return *o.ExtendInfo
}

// GetExtendInfoOk returns a tuple with the ExtendInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionInfo) GetExtendInfoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		return nil, false
	}
	return o.ExtendInfo, true
}

// HasExtendInfo returns a boolean if a field has been set.
func (o *PayOptionInfo) HasExtendInfo() bool {
	if o != nil && !utils.IsNil(o.ExtendInfo) {
		return true
	}

	return false
}

// SetExtendInfo gets a reference to the given string and assigns it to the ExtendInfo field.
func (o *PayOptionInfo) SetExtendInfo(v string) {
	o.ExtendInfo = &v
}

// GetPaymentCode returns the PaymentCode field value if set, zero value otherwise.
func (o *PayOptionInfo) GetPaymentCode() string {
	if o == nil || utils.IsNil(o.PaymentCode) {
		var ret string
		return ret
	}
	return *o.PaymentCode
}

// GetPaymentCodeOk returns a tuple with the PaymentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionInfo) GetPaymentCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PaymentCode) {
		return nil, false
	}
	return o.PaymentCode, true
}

// HasPaymentCode returns a boolean if a field has been set.
func (o *PayOptionInfo) HasPaymentCode() bool {
	if o != nil && !utils.IsNil(o.PaymentCode) {
		return true
	}

	return false
}

// SetPaymentCode gets a reference to the given string and assigns it to the PaymentCode field.
func (o *PayOptionInfo) SetPaymentCode(v string) {
	o.PaymentCode = &v
}

func (o PayOptionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayOptionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["payMethod"] = o.PayMethod
	if !utils.IsNil(o.PayOption) {
		toSerialize["payOption"] = o.PayOption
	}
	if !utils.IsNil(o.PayAmount) {
		toSerialize["payAmount"] = o.PayAmount
	}
	if !utils.IsNil(o.TransAmount) {
		toSerialize["transAmount"] = o.TransAmount
	}
	if !utils.IsNil(o.ChargeAmount) {
		toSerialize["chargeAmount"] = o.ChargeAmount
	}
	if !utils.IsNil(o.PayOptionBillExtendInfo) {
		toSerialize["payOptionBillExtendInfo"] = o.PayOptionBillExtendInfo
	}
	if !utils.IsNil(o.ExtendInfo) {
		toSerialize["extendInfo"] = o.ExtendInfo
	}
	if !utils.IsNil(o.PaymentCode) {
		toSerialize["paymentCode"] = o.PaymentCode
	}
	return toSerialize, nil
}

func (o *PayOptionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payMethod",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPayOptionInfo := _PayOptionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPayOptionInfo)

	if err != nil {
		return err
	}

	*o = PayOptionInfo(varPayOptionInfo)

	return err
}

type NullablePayOptionInfo struct {
	value *PayOptionInfo
	isSet bool
}

func (v NullablePayOptionInfo) Get() *PayOptionInfo {
	return v.value
}

func (v *NullablePayOptionInfo) Set(val *PayOptionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePayOptionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePayOptionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayOptionInfo(val *PayOptionInfo) *NullablePayOptionInfo {
	return &NullablePayOptionInfo{value: val, isSet: true}
}

func (v NullablePayOptionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayOptionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


