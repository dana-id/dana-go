/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payment_gateway

import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the RefundOptionBill type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RefundOptionBill{}

// RefundOptionBill struct for RefundOptionBill
type RefundOptionBill struct {
	// Payment method name. The enums:<br>   * BALANCE - Payment method with balance<br>   * COUPON - Payment method with coupon<br>   * NET_BANKING - Payment method with internet banking<br>   * CREDIT_CARD - Payment method with credit card<br>   * DEBIT_CARD - Payment method with debit card<br>   * VIRTUAL_ACCOUNT - Payment method with virtual account<br>   * OTC - Payment method with OTC<br>   * DIRECT_DEBIT_CREDIT_CARD - Payment method with direct debit of credit card<br>   * DIRECT_DEBIT_DEBIT_CARD - Payment method with direct debit of debit card<br>   * ONLINE_CREDIT - Payment method with online Credit<br>   * LOAN_CREDIT - Payment method with DANA Cicil<br> 
	PayMethod *string `json:"payMethod,omitempty"`
	// Trans amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	TransAmount *Money `json:"transAmount,omitempty"`
}

// NewRefundOptionBill instantiates a new RefundOptionBill object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundOptionBill() *RefundOptionBill {
	this := RefundOptionBill{}
	return &this
}

// NewRefundOptionBillWithDefaults instantiates a new RefundOptionBill object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundOptionBillWithDefaults() *RefundOptionBill {
	this := RefundOptionBill{}
	return &this
}

// GetPayMethod returns the PayMethod field value if set, zero value otherwise.
func (o *RefundOptionBill) GetPayMethod() string {
	if o == nil || utils.IsNil(o.PayMethod) {
		var ret string
		return ret
	}
	return *o.PayMethod
}

// GetPayMethodOk returns a tuple with the PayMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOptionBill) GetPayMethodOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PayMethod) {
		return nil, false
	}
	return o.PayMethod, true
}

// HasPayMethod returns a boolean if a field has been set.
func (o *RefundOptionBill) HasPayMethod() bool {
	if o != nil && !utils.IsNil(o.PayMethod) {
		return true
	}

	return false
}

// SetPayMethod gets a reference to the given string and assigns it to the PayMethod field.
func (o *RefundOptionBill) SetPayMethod(v string) {
	o.PayMethod = &v
}

// GetTransAmount returns the TransAmount field value if set, zero value otherwise.
func (o *RefundOptionBill) GetTransAmount() Money {
	if o == nil || utils.IsNil(o.TransAmount) {
		var ret Money
		return ret
	}
	return *o.TransAmount
}

// GetTransAmountOk returns a tuple with the TransAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundOptionBill) GetTransAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.TransAmount) {
		return nil, false
	}
	return o.TransAmount, true
}

// HasTransAmount returns a boolean if a field has been set.
func (o *RefundOptionBill) HasTransAmount() bool {
	if o != nil && !utils.IsNil(o.TransAmount) {
		return true
	}

	return false
}

// SetTransAmount gets a reference to the given Money and assigns it to the TransAmount field.
func (o *RefundOptionBill) SetTransAmount(v Money) {
	o.TransAmount = &v
}

func (o RefundOptionBill) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefundOptionBill) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PayMethod) {
		toSerialize["payMethod"] = o.PayMethod
	}
	if !utils.IsNil(o.TransAmount) {
		toSerialize["transAmount"] = o.TransAmount
	}
	return toSerialize, nil
}

type NullableRefundOptionBill struct {
	value *RefundOptionBill
	isSet bool
}

func (v NullableRefundOptionBill) Get() *RefundOptionBill {
	return v.value
}

func (v *NullableRefundOptionBill) Set(val *RefundOptionBill) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundOptionBill) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundOptionBill) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundOptionBill(val *RefundOptionBill) *NullableRefundOptionBill {
	return &NullableRefundOptionBill{value: val, isSet: true}
}

func (v NullableRefundOptionBill) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundOptionBill) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


