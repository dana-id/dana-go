/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payment_gateway

import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/go_client/utils"
)

// checks if the CancelOrderRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &CancelOrderRequest{}

// CancelOrderRequest struct for CancelOrderRequest
type CancelOrderRequest struct {
	// Original transaction identifier on partner system
	OriginalPartnerReferenceNo string `json:"originalPartnerReferenceNo"`
	// Original transaction identifier on DANA system
	OriginalReferenceNo *string `json:"originalReferenceNo,omitempty"`
	// Original external identifier on header message
	OriginalExternalId *string `json:"originalExternalId,omitempty"`
	// Merchant identifier that is unique per each merchant
	MerchantId string `json:"merchantId"`
	// Information of sub merchant identifier
	SubMerchantId *string `json:"subMerchantId,omitempty"`
	// Cancellation reason
	Reason *string `json:"reason,omitempty"`
	// Store identifier to indicate to which store this payment belongs to
	ExternalStoreId *string `json:"externalStoreId,omitempty"`
	// Amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	Amount *Money `json:"amount,omitempty"`
	// Additional information
	AdditionalInfo map[string]interface{} `json:"additionalInfo,omitempty"`
}

type _CancelOrderRequest CancelOrderRequest

// NewCancelOrderRequest instantiates a new CancelOrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelOrderRequest(originalPartnerReferenceNo string, merchantId string) *CancelOrderRequest {
	this := CancelOrderRequest{}
	this.OriginalPartnerReferenceNo = originalPartnerReferenceNo
	this.MerchantId = merchantId
	return &this
}

// NewCancelOrderRequestWithDefaults instantiates a new CancelOrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelOrderRequestWithDefaults() *CancelOrderRequest {
	this := CancelOrderRequest{}
	return &this
}

// GetOriginalPartnerReferenceNo returns the OriginalPartnerReferenceNo field value
func (o *CancelOrderRequest) GetOriginalPartnerReferenceNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalPartnerReferenceNo
}

// GetOriginalPartnerReferenceNoOk returns a tuple with the OriginalPartnerReferenceNo field value
// and a boolean to check if the value has been set.
func (o *CancelOrderRequest) GetOriginalPartnerReferenceNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalPartnerReferenceNo, true
}

// SetOriginalPartnerReferenceNo sets field value
func (o *CancelOrderRequest) SetOriginalPartnerReferenceNo(v string) {
	o.OriginalPartnerReferenceNo = v
}

// GetOriginalReferenceNo returns the OriginalReferenceNo field value if set, zero value otherwise.
func (o *CancelOrderRequest) GetOriginalReferenceNo() string {
	if o == nil || utils.IsNil(o.OriginalReferenceNo) {
		var ret string
		return ret
	}
	return *o.OriginalReferenceNo
}

// GetOriginalReferenceNoOk returns a tuple with the OriginalReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelOrderRequest) GetOriginalReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OriginalReferenceNo) {
		return nil, false
	}
	return o.OriginalReferenceNo, true
}

// HasOriginalReferenceNo returns a boolean if a field has been set.
func (o *CancelOrderRequest) HasOriginalReferenceNo() bool {
	if o != nil && !utils.IsNil(o.OriginalReferenceNo) {
		return true
	}

	return false
}

// SetOriginalReferenceNo gets a reference to the given string and assigns it to the OriginalReferenceNo field.
func (o *CancelOrderRequest) SetOriginalReferenceNo(v string) {
	o.OriginalReferenceNo = &v
}

// GetOriginalExternalId returns the OriginalExternalId field value if set, zero value otherwise.
func (o *CancelOrderRequest) GetOriginalExternalId() string {
	if o == nil || utils.IsNil(o.OriginalExternalId) {
		var ret string
		return ret
	}
	return *o.OriginalExternalId
}

// GetOriginalExternalIdOk returns a tuple with the OriginalExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelOrderRequest) GetOriginalExternalIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OriginalExternalId) {
		return nil, false
	}
	return o.OriginalExternalId, true
}

// HasOriginalExternalId returns a boolean if a field has been set.
func (o *CancelOrderRequest) HasOriginalExternalId() bool {
	if o != nil && !utils.IsNil(o.OriginalExternalId) {
		return true
	}

	return false
}

// SetOriginalExternalId gets a reference to the given string and assigns it to the OriginalExternalId field.
func (o *CancelOrderRequest) SetOriginalExternalId(v string) {
	o.OriginalExternalId = &v
}

// GetMerchantId returns the MerchantId field value
func (o *CancelOrderRequest) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *CancelOrderRequest) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *CancelOrderRequest) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetSubMerchantId returns the SubMerchantId field value if set, zero value otherwise.
func (o *CancelOrderRequest) GetSubMerchantId() string {
	if o == nil || utils.IsNil(o.SubMerchantId) {
		var ret string
		return ret
	}
	return *o.SubMerchantId
}

// GetSubMerchantIdOk returns a tuple with the SubMerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelOrderRequest) GetSubMerchantIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SubMerchantId) {
		return nil, false
	}
	return o.SubMerchantId, true
}

// HasSubMerchantId returns a boolean if a field has been set.
func (o *CancelOrderRequest) HasSubMerchantId() bool {
	if o != nil && !utils.IsNil(o.SubMerchantId) {
		return true
	}

	return false
}

// SetSubMerchantId gets a reference to the given string and assigns it to the SubMerchantId field.
func (o *CancelOrderRequest) SetSubMerchantId(v string) {
	o.SubMerchantId = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CancelOrderRequest) GetReason() string {
	if o == nil || utils.IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelOrderRequest) GetReasonOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CancelOrderRequest) HasReason() bool {
	if o != nil && !utils.IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CancelOrderRequest) SetReason(v string) {
	o.Reason = &v
}

// GetExternalStoreId returns the ExternalStoreId field value if set, zero value otherwise.
func (o *CancelOrderRequest) GetExternalStoreId() string {
	if o == nil || utils.IsNil(o.ExternalStoreId) {
		var ret string
		return ret
	}
	return *o.ExternalStoreId
}

// GetExternalStoreIdOk returns a tuple with the ExternalStoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelOrderRequest) GetExternalStoreIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExternalStoreId) {
		return nil, false
	}
	return o.ExternalStoreId, true
}

// HasExternalStoreId returns a boolean if a field has been set.
func (o *CancelOrderRequest) HasExternalStoreId() bool {
	if o != nil && !utils.IsNil(o.ExternalStoreId) {
		return true
	}

	return false
}

// SetExternalStoreId gets a reference to the given string and assigns it to the ExternalStoreId field.
func (o *CancelOrderRequest) SetExternalStoreId(v string) {
	o.ExternalStoreId = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CancelOrderRequest) GetAmount() Money {
	if o == nil || utils.IsNil(o.Amount) {
		var ret Money
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelOrderRequest) GetAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CancelOrderRequest) HasAmount() bool {
	if o != nil && !utils.IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Money and assigns it to the Amount field.
func (o *CancelOrderRequest) SetAmount(v Money) {
	o.Amount = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *CancelOrderRequest) GetAdditionalInfo() map[string]interface{} {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelOrderRequest) GetAdditionalInfoOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *CancelOrderRequest) HasAdditionalInfo() bool {
	if o != nil && !utils.IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given map[string]interface{} and assigns it to the AdditionalInfo field.
func (o *CancelOrderRequest) SetAdditionalInfo(v map[string]interface{}) {
	o.AdditionalInfo = v
}

func (o CancelOrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelOrderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["originalPartnerReferenceNo"] = o.OriginalPartnerReferenceNo
	if !utils.IsNil(o.OriginalReferenceNo) {
		toSerialize["originalReferenceNo"] = o.OriginalReferenceNo
	}
	if !utils.IsNil(o.OriginalExternalId) {
		toSerialize["originalExternalId"] = o.OriginalExternalId
	}
	toSerialize["merchantId"] = o.MerchantId
	if !utils.IsNil(o.SubMerchantId) {
		toSerialize["subMerchantId"] = o.SubMerchantId
	}
	if !utils.IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !utils.IsNil(o.ExternalStoreId) {
		toSerialize["externalStoreId"] = o.ExternalStoreId
	}
	if !utils.IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !utils.IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	return toSerialize, nil
}

func (o *CancelOrderRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"originalPartnerReferenceNo",
		"merchantId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancelOrderRequest := _CancelOrderRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCancelOrderRequest)

	if err != nil {
		return err
	}

	*o = CancelOrderRequest(varCancelOrderRequest)

	return err
}

type NullableCancelOrderRequest struct {
	value *CancelOrderRequest
	isSet bool
}

func (v NullableCancelOrderRequest) Get() *CancelOrderRequest {
	return v.value
}

func (v *NullableCancelOrderRequest) Set(val *CancelOrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelOrderRequest(val *CancelOrderRequest) *NullableCancelOrderRequest {
	return &NullableCancelOrderRequest{value: val, isSet: true}
}

func (v NullableCancelOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


