/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payment_gateway

import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the ShippingInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ShippingInfo{}

// ShippingInfo struct for ShippingInfo
type ShippingInfo struct {
	// Merchant shipping identifier
	MerchantShippingId string `json:"merchantShippingId"`
	// Number of tracking
	TrackingNo *string `json:"trackingNo,omitempty"`
	// Information of carrier
	Carrier *string `json:"carrier,omitempty"`
	// Promo amount. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	ChargeAmount *Money `json:"chargeAmount,omitempty"`
	// Name of country
	CountryName string `json:"countryName"`
	// Name of state
	StateName string `json:"stateName"`
	// Name of city
	CityName string `json:"cityName"`
	// Name of area
	AreaName *string `json:"areaName,omitempty"`
	// Information of address 1
	Address1 string `json:"address1"`
	// Information of address 2
	Address2 *string `json:"address2,omitempty"`
	// First name
	FirstName string `json:"firstName"`
	// Last name
	LastName string `json:"lastName"`
	// Mobile number
	MobileNo *string `json:"mobileNo,omitempty"`
	// Phone number
	PhoneNo *string `json:"phoneNo,omitempty"`
	// Zip code
	ZipCode string `json:"zipCode"`
	// Email
	Email *string `json:"email,omitempty"`
	// Fax number
	FaxNo *string `json:"faxNo,omitempty"`
}

type _ShippingInfo ShippingInfo

// NewShippingInfo instantiates a new ShippingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShippingInfo(merchantShippingId string, countryName string, stateName string, cityName string, address1 string, firstName string, lastName string, zipCode string) *ShippingInfo {
	this := ShippingInfo{}
	this.MerchantShippingId = merchantShippingId
	this.CountryName = countryName
	this.StateName = stateName
	this.CityName = cityName
	this.Address1 = address1
	this.FirstName = firstName
	this.LastName = lastName
	this.ZipCode = zipCode
	return &this
}

// NewShippingInfoWithDefaults instantiates a new ShippingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShippingInfoWithDefaults() *ShippingInfo {
	this := ShippingInfo{}
	return &this
}

// GetMerchantShippingId returns the MerchantShippingId field value
func (o *ShippingInfo) GetMerchantShippingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantShippingId
}

// GetMerchantShippingIdOk returns a tuple with the MerchantShippingId field value
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetMerchantShippingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantShippingId, true
}

// SetMerchantShippingId sets field value
func (o *ShippingInfo) SetMerchantShippingId(v string) {
	o.MerchantShippingId = v
}

// GetTrackingNo returns the TrackingNo field value if set, zero value otherwise.
func (o *ShippingInfo) GetTrackingNo() string {
	if o == nil || utils.IsNil(o.TrackingNo) {
		var ret string
		return ret
	}
	return *o.TrackingNo
}

// GetTrackingNoOk returns a tuple with the TrackingNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetTrackingNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TrackingNo) {
		return nil, false
	}
	return o.TrackingNo, true
}

// HasTrackingNo returns a boolean if a field has been set.
func (o *ShippingInfo) HasTrackingNo() bool {
	if o != nil && !utils.IsNil(o.TrackingNo) {
		return true
	}

	return false
}

// SetTrackingNo gets a reference to the given string and assigns it to the TrackingNo field.
func (o *ShippingInfo) SetTrackingNo(v string) {
	o.TrackingNo = &v
}

// GetCarrier returns the Carrier field value if set, zero value otherwise.
func (o *ShippingInfo) GetCarrier() string {
	if o == nil || utils.IsNil(o.Carrier) {
		var ret string
		return ret
	}
	return *o.Carrier
}

// GetCarrierOk returns a tuple with the Carrier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetCarrierOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Carrier) {
		return nil, false
	}
	return o.Carrier, true
}

// HasCarrier returns a boolean if a field has been set.
func (o *ShippingInfo) HasCarrier() bool {
	if o != nil && !utils.IsNil(o.Carrier) {
		return true
	}

	return false
}

// SetCarrier gets a reference to the given string and assigns it to the Carrier field.
func (o *ShippingInfo) SetCarrier(v string) {
	o.Carrier = &v
}

// GetChargeAmount returns the ChargeAmount field value if set, zero value otherwise.
func (o *ShippingInfo) GetChargeAmount() Money {
	if o == nil || utils.IsNil(o.ChargeAmount) {
		var ret Money
		return ret
	}
	return *o.ChargeAmount
}

// GetChargeAmountOk returns a tuple with the ChargeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetChargeAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.ChargeAmount) {
		return nil, false
	}
	return o.ChargeAmount, true
}

// HasChargeAmount returns a boolean if a field has been set.
func (o *ShippingInfo) HasChargeAmount() bool {
	if o != nil && !utils.IsNil(o.ChargeAmount) {
		return true
	}

	return false
}

// SetChargeAmount gets a reference to the given Money and assigns it to the ChargeAmount field.
func (o *ShippingInfo) SetChargeAmount(v Money) {
	o.ChargeAmount = &v
}

// GetCountryName returns the CountryName field value
func (o *ShippingInfo) GetCountryName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetCountryNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryName, true
}

// SetCountryName sets field value
func (o *ShippingInfo) SetCountryName(v string) {
	o.CountryName = v
}

// GetStateName returns the StateName field value
func (o *ShippingInfo) GetStateName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateName
}

// GetStateNameOk returns a tuple with the StateName field value
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetStateNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateName, true
}

// SetStateName sets field value
func (o *ShippingInfo) SetStateName(v string) {
	o.StateName = v
}

// GetCityName returns the CityName field value
func (o *ShippingInfo) GetCityName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CityName
}

// GetCityNameOk returns a tuple with the CityName field value
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetCityNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CityName, true
}

// SetCityName sets field value
func (o *ShippingInfo) SetCityName(v string) {
	o.CityName = v
}

// GetAreaName returns the AreaName field value if set, zero value otherwise.
func (o *ShippingInfo) GetAreaName() string {
	if o == nil || utils.IsNil(o.AreaName) {
		var ret string
		return ret
	}
	return *o.AreaName
}

// GetAreaNameOk returns a tuple with the AreaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetAreaNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AreaName) {
		return nil, false
	}
	return o.AreaName, true
}

// HasAreaName returns a boolean if a field has been set.
func (o *ShippingInfo) HasAreaName() bool {
	if o != nil && !utils.IsNil(o.AreaName) {
		return true
	}

	return false
}

// SetAreaName gets a reference to the given string and assigns it to the AreaName field.
func (o *ShippingInfo) SetAreaName(v string) {
	o.AreaName = &v
}

// GetAddress1 returns the Address1 field value
func (o *ShippingInfo) GetAddress1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetAddress1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address1, true
}

// SetAddress1 sets field value
func (o *ShippingInfo) SetAddress1(v string) {
	o.Address1 = v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *ShippingInfo) GetAddress2() string {
	if o == nil || utils.IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetAddress2Ok() (*string, bool) {
	if o == nil || utils.IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *ShippingInfo) HasAddress2() bool {
	if o != nil && !utils.IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *ShippingInfo) SetAddress2(v string) {
	o.Address2 = &v
}

// GetFirstName returns the FirstName field value
func (o *ShippingInfo) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *ShippingInfo) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *ShippingInfo) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *ShippingInfo) SetLastName(v string) {
	o.LastName = v
}

// GetMobileNo returns the MobileNo field value if set, zero value otherwise.
func (o *ShippingInfo) GetMobileNo() string {
	if o == nil || utils.IsNil(o.MobileNo) {
		var ret string
		return ret
	}
	return *o.MobileNo
}

// GetMobileNoOk returns a tuple with the MobileNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetMobileNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MobileNo) {
		return nil, false
	}
	return o.MobileNo, true
}

// HasMobileNo returns a boolean if a field has been set.
func (o *ShippingInfo) HasMobileNo() bool {
	if o != nil && !utils.IsNil(o.MobileNo) {
		return true
	}

	return false
}

// SetMobileNo gets a reference to the given string and assigns it to the MobileNo field.
func (o *ShippingInfo) SetMobileNo(v string) {
	o.MobileNo = &v
}

// GetPhoneNo returns the PhoneNo field value if set, zero value otherwise.
func (o *ShippingInfo) GetPhoneNo() string {
	if o == nil || utils.IsNil(o.PhoneNo) {
		var ret string
		return ret
	}
	return *o.PhoneNo
}

// GetPhoneNoOk returns a tuple with the PhoneNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetPhoneNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PhoneNo) {
		return nil, false
	}
	return o.PhoneNo, true
}

// HasPhoneNo returns a boolean if a field has been set.
func (o *ShippingInfo) HasPhoneNo() bool {
	if o != nil && !utils.IsNil(o.PhoneNo) {
		return true
	}

	return false
}

// SetPhoneNo gets a reference to the given string and assigns it to the PhoneNo field.
func (o *ShippingInfo) SetPhoneNo(v string) {
	o.PhoneNo = &v
}

// GetZipCode returns the ZipCode field value
func (o *ShippingInfo) GetZipCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetZipCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZipCode, true
}

// SetZipCode sets field value
func (o *ShippingInfo) SetZipCode(v string) {
	o.ZipCode = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ShippingInfo) GetEmail() string {
	if o == nil || utils.IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetEmailOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ShippingInfo) HasEmail() bool {
	if o != nil && !utils.IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ShippingInfo) SetEmail(v string) {
	o.Email = &v
}

// GetFaxNo returns the FaxNo field value if set, zero value otherwise.
func (o *ShippingInfo) GetFaxNo() string {
	if o == nil || utils.IsNil(o.FaxNo) {
		var ret string
		return ret
	}
	return *o.FaxNo
}

// GetFaxNoOk returns a tuple with the FaxNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingInfo) GetFaxNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.FaxNo) {
		return nil, false
	}
	return o.FaxNo, true
}

// HasFaxNo returns a boolean if a field has been set.
func (o *ShippingInfo) HasFaxNo() bool {
	if o != nil && !utils.IsNil(o.FaxNo) {
		return true
	}

	return false
}

// SetFaxNo gets a reference to the given string and assigns it to the FaxNo field.
func (o *ShippingInfo) SetFaxNo(v string) {
	o.FaxNo = &v
}

func (o ShippingInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShippingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["merchantShippingId"] = o.MerchantShippingId
	if !utils.IsNil(o.TrackingNo) {
		toSerialize["trackingNo"] = o.TrackingNo
	}
	if !utils.IsNil(o.Carrier) {
		toSerialize["carrier"] = o.Carrier
	}
	if !utils.IsNil(o.ChargeAmount) {
		toSerialize["chargeAmount"] = o.ChargeAmount
	}
	toSerialize["countryName"] = o.CountryName
	toSerialize["stateName"] = o.StateName
	toSerialize["cityName"] = o.CityName
	if !utils.IsNil(o.AreaName) {
		toSerialize["areaName"] = o.AreaName
	}
	toSerialize["address1"] = o.Address1
	if !utils.IsNil(o.Address2) {
		toSerialize["address2"] = o.Address2
	}
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	if !utils.IsNil(o.MobileNo) {
		toSerialize["mobileNo"] = o.MobileNo
	}
	if !utils.IsNil(o.PhoneNo) {
		toSerialize["phoneNo"] = o.PhoneNo
	}
	toSerialize["zipCode"] = o.ZipCode
	if !utils.IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !utils.IsNil(o.FaxNo) {
		toSerialize["faxNo"] = o.FaxNo
	}
	return toSerialize, nil
}

func (o *ShippingInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchantShippingId",
		"countryName",
		"stateName",
		"cityName",
		"address1",
		"firstName",
		"lastName",
		"zipCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShippingInfo := _ShippingInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShippingInfo)

	if err != nil {
		return err
	}

	*o = ShippingInfo(varShippingInfo)

	return err
}

type NullableShippingInfo struct {
	value *ShippingInfo
	isSet bool
}

func (v NullableShippingInfo) Get() *ShippingInfo {
	return v.value
}

func (v *NullableShippingInfo) Set(val *ShippingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableShippingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableShippingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShippingInfo(val *ShippingInfo) *NullableShippingInfo {
	return &NullableShippingInfo{value: val, isSet: true}
}

func (v NullableShippingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShippingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


