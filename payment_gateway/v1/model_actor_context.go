// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package payment_gateway

/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the ActorContext type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ActorContext{}

// ActorContext struct for ActorContext
type ActorContext struct {
	// Actor identifier
	ActorId *string `json:"actorId,omitempty"`
	// Actor type. The enums:<br> * USER - User<br> * MERCHANT - Merchant<br * MERCHANT_OPERATOR - Merchant operator<br> * BACK_OFFICE - Back office<br> * SYSTEM - System<br> 
	ActorType *string `json:"actorType,omitempty"`
}

// NewActorContext instantiates a new ActorContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActorContext() *ActorContext {
	this := ActorContext{}
	return &this
}

// NewActorContextWithDefaults instantiates a new ActorContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActorContextWithDefaults() *ActorContext {
	this := ActorContext{}
	return &this
}

// GetActorId returns the ActorId field value if set, zero value otherwise.
func (o *ActorContext) GetActorId() string {
	if o == nil || utils.IsNil(o.ActorId) {
		var ret string
		return ret
	}
	return *o.ActorId
}

// GetActorIdOk returns a tuple with the ActorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActorContext) GetActorIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ActorId) {
		return nil, false
	}
	return o.ActorId, true
}

// HasActorId returns a boolean if a field has been set.
func (o *ActorContext) HasActorId() bool {
	if o != nil && !utils.IsNil(o.ActorId) {
		return true
	}

	return false
}

// SetActorId gets a reference to the given string and assigns it to the ActorId field.
func (o *ActorContext) SetActorId(v string) {
	o.ActorId = &v
}

// GetActorType returns the ActorType field value if set, zero value otherwise.
func (o *ActorContext) GetActorType() string {
	if o == nil || utils.IsNil(o.ActorType) {
		var ret string
		return ret
	}
	return *o.ActorType
}

// GetActorTypeOk returns a tuple with the ActorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActorContext) GetActorTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ActorType) {
		return nil, false
	}
	return o.ActorType, true
}

// HasActorType returns a boolean if a field has been set.
func (o *ActorContext) HasActorType() bool {
	if o != nil && !utils.IsNil(o.ActorType) {
		return true
	}

	return false
}

// SetActorType gets a reference to the given string and assigns it to the ActorType field.
func (o *ActorContext) SetActorType(v string) {
	o.ActorType = &v
}

func (o ActorContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActorContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ActorId) {
		toSerialize["actorId"] = o.ActorId
	}
	if !utils.IsNil(o.ActorType) {
		toSerialize["actorType"] = o.ActorType
	}
	return toSerialize, nil
}

type NullableActorContext struct {
	value *ActorContext
	isSet bool
}

func (v NullableActorContext) Get() *ActorContext {
	return v.value
}

func (v *NullableActorContext) Set(val *ActorContext) {
	v.value = val
	v.isSet = true
}

func (v NullableActorContext) IsSet() bool {
	return v.isSet
}

func (v *NullableActorContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActorContext(val *ActorContext) *NullableActorContext {
	return &NullableActorContext{value: val, isSet: true}
}

func (v NullableActorContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActorContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


