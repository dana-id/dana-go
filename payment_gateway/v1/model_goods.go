// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package payment_gateway

/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the Goods type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Goods{}

// Goods struct for Goods
type Goods struct {
	// Goods name
	Name string `json:"name"`
	// Goods identifier provided by merchant
	MerchantGoodsId string `json:"merchantGoodsId"`
	// Goods description
	Description string `json:"description"`
	// Goods category
	Category string `json:"category"`
	// Goods price. Contains two sub-fields:<br> 1. Value: Transaction amount, including the cents<br> 2. Currency: Currency code based on ISO<br> 
	Price Money `json:"price"`
	// Goods unit
	Unit *string `json:"unit,omitempty"`
	// Count of items
	Quantity string `json:"quantity"`
	// Shipment identifier provided by merchant
	MerchantShippingId *string `json:"merchantShippingId,omitempty"`
	// The URL of good's snapshot web page
	SnapshotUrl *string `json:"snapshotUrl,omitempty"`
	// Extend information
	ExtendInfo *string `json:"extendInfo,omitempty"`
}

type _Goods Goods

// NewGoods instantiates a new Goods object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoods(name string, merchantGoodsId string, description string, category string, price Money, quantity string) *Goods {
	this := Goods{}
	this.Name = name
	this.MerchantGoodsId = merchantGoodsId
	this.Description = description
	this.Category = category
	this.Price = price
	this.Quantity = quantity
	return &this
}

// NewGoodsWithDefaults instantiates a new Goods object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoodsWithDefaults() *Goods {
	this := Goods{}
	return &this
}

// GetName returns the Name field value
func (o *Goods) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Goods) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Goods) SetName(v string) {
	o.Name = v
}

// GetMerchantGoodsId returns the MerchantGoodsId field value
func (o *Goods) GetMerchantGoodsId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantGoodsId
}

// GetMerchantGoodsIdOk returns a tuple with the MerchantGoodsId field value
// and a boolean to check if the value has been set.
func (o *Goods) GetMerchantGoodsIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantGoodsId, true
}

// SetMerchantGoodsId sets field value
func (o *Goods) SetMerchantGoodsId(v string) {
	o.MerchantGoodsId = v
}

// GetDescription returns the Description field value
func (o *Goods) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Goods) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Goods) SetDescription(v string) {
	o.Description = v
}

// GetCategory returns the Category field value
func (o *Goods) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Goods) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *Goods) SetCategory(v string) {
	o.Category = v
}

// GetPrice returns the Price field value
func (o *Goods) GetPrice() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Goods) GetPriceOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Goods) SetPrice(v Money) {
	o.Price = v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *Goods) GetUnit() string {
	if o == nil || utils.IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goods) GetUnitOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *Goods) HasUnit() bool {
	if o != nil && !utils.IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *Goods) SetUnit(v string) {
	o.Unit = &v
}

// GetQuantity returns the Quantity field value
func (o *Goods) GetQuantity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *Goods) GetQuantityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *Goods) SetQuantity(v string) {
	o.Quantity = v
}

// GetMerchantShippingId returns the MerchantShippingId field value if set, zero value otherwise.
func (o *Goods) GetMerchantShippingId() string {
	if o == nil || utils.IsNil(o.MerchantShippingId) {
		var ret string
		return ret
	}
	return *o.MerchantShippingId
}

// GetMerchantShippingIdOk returns a tuple with the MerchantShippingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goods) GetMerchantShippingIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MerchantShippingId) {
		return nil, false
	}
	return o.MerchantShippingId, true
}

// HasMerchantShippingId returns a boolean if a field has been set.
func (o *Goods) HasMerchantShippingId() bool {
	if o != nil && !utils.IsNil(o.MerchantShippingId) {
		return true
	}

	return false
}

// SetMerchantShippingId gets a reference to the given string and assigns it to the MerchantShippingId field.
func (o *Goods) SetMerchantShippingId(v string) {
	o.MerchantShippingId = &v
}

// GetSnapshotUrl returns the SnapshotUrl field value if set, zero value otherwise.
func (o *Goods) GetSnapshotUrl() string {
	if o == nil || utils.IsNil(o.SnapshotUrl) {
		var ret string
		return ret
	}
	return *o.SnapshotUrl
}

// GetSnapshotUrlOk returns a tuple with the SnapshotUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goods) GetSnapshotUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SnapshotUrl) {
		return nil, false
	}
	return o.SnapshotUrl, true
}

// HasSnapshotUrl returns a boolean if a field has been set.
func (o *Goods) HasSnapshotUrl() bool {
	if o != nil && !utils.IsNil(o.SnapshotUrl) {
		return true
	}

	return false
}

// SetSnapshotUrl gets a reference to the given string and assigns it to the SnapshotUrl field.
func (o *Goods) SetSnapshotUrl(v string) {
	o.SnapshotUrl = &v
}

// GetExtendInfo returns the ExtendInfo field value if set, zero value otherwise.
func (o *Goods) GetExtendInfo() string {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		var ret string
		return ret
	}
	return *o.ExtendInfo
}

// GetExtendInfoOk returns a tuple with the ExtendInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Goods) GetExtendInfoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		return nil, false
	}
	return o.ExtendInfo, true
}

// HasExtendInfo returns a boolean if a field has been set.
func (o *Goods) HasExtendInfo() bool {
	if o != nil && !utils.IsNil(o.ExtendInfo) {
		return true
	}

	return false
}

// SetExtendInfo gets a reference to the given string and assigns it to the ExtendInfo field.
func (o *Goods) SetExtendInfo(v string) {
	o.ExtendInfo = &v
}

func (o Goods) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Goods) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["merchantGoodsId"] = o.MerchantGoodsId
	toSerialize["description"] = o.Description
	toSerialize["category"] = o.Category
	toSerialize["price"] = o.Price
	if !utils.IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	toSerialize["quantity"] = o.Quantity
	if !utils.IsNil(o.MerchantShippingId) {
		toSerialize["merchantShippingId"] = o.MerchantShippingId
	}
	if !utils.IsNil(o.SnapshotUrl) {
		toSerialize["snapshotUrl"] = o.SnapshotUrl
	}
	if !utils.IsNil(o.ExtendInfo) {
		toSerialize["extendInfo"] = o.ExtendInfo
	}
	return toSerialize, nil
}

func (o *Goods) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"merchantGoodsId",
		"description",
		"category",
		"price",
		"quantity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGoods := _Goods{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGoods)

	if err != nil {
		return err
	}

	*o = Goods(varGoods)

	return err
}

type NullableGoods struct {
	value *Goods
	isSet bool
}

func (v NullableGoods) Get() *Goods {
	return v.value
}

func (v *NullableGoods) Set(val *Goods) {
	v.value = val
	v.isSet = true
}

func (v NullableGoods) IsSet() bool {
	return v.isSet
}

func (v *NullableGoods) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoods(val *Goods) *NullableGoods {
	return &NullableGoods{value: val, isSet: true}
}

func (v NullableGoods) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoods) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


