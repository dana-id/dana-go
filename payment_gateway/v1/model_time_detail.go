/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payment_gateway

import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the TimeDetail type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TimeDetail{}

// TimeDetail struct for TimeDetail
type TimeDetail struct {
	// Time of created order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
	CreatedTime string `json:"createdTime" validate:"regexp=^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\+07:00$"`
	// Time of expiry order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
	ExpiryTime string `json:"expiryTime" validate:"regexp=^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\+07:00$"`
	// Time of paid order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
	PaidTimes []string `json:"paidTimes,omitempty"`
	// Time of confirmed order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
	ConfirmedTimes []string `json:"confirmedTimes,omitempty"`
	// Time of cancelled order, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
	CancelledTime *string `json:"cancelledTime,omitempty" validate:"regexp=^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\+07:00$"`
}

type _TimeDetail TimeDetail

// NewTimeDetail instantiates a new TimeDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeDetail(createdTime string, expiryTime string) *TimeDetail {
	this := TimeDetail{}
	this.CreatedTime = createdTime
	this.ExpiryTime = expiryTime
	return &this
}

// NewTimeDetailWithDefaults instantiates a new TimeDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeDetailWithDefaults() *TimeDetail {
	this := TimeDetail{}
	return &this
}

// GetCreatedTime returns the CreatedTime field value
func (o *TimeDetail) GetCreatedTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *TimeDetail) GetCreatedTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *TimeDetail) SetCreatedTime(v string) {
	o.CreatedTime = v
}

// GetExpiryTime returns the ExpiryTime field value
func (o *TimeDetail) GetExpiryTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpiryTime
}

// GetExpiryTimeOk returns a tuple with the ExpiryTime field value
// and a boolean to check if the value has been set.
func (o *TimeDetail) GetExpiryTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiryTime, true
}

// SetExpiryTime sets field value
func (o *TimeDetail) SetExpiryTime(v string) {
	o.ExpiryTime = v
}

// GetPaidTimes returns the PaidTimes field value if set, zero value otherwise.
func (o *TimeDetail) GetPaidTimes() []string {
	if o == nil || utils.IsNil(o.PaidTimes) {
		var ret []string
		return ret
	}
	return o.PaidTimes
}

// GetPaidTimesOk returns a tuple with the PaidTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeDetail) GetPaidTimesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.PaidTimes) {
		return nil, false
	}
	return o.PaidTimes, true
}

// HasPaidTimes returns a boolean if a field has been set.
func (o *TimeDetail) HasPaidTimes() bool {
	if o != nil && !utils.IsNil(o.PaidTimes) {
		return true
	}

	return false
}

// SetPaidTimes gets a reference to the given []string and assigns it to the PaidTimes field.
func (o *TimeDetail) SetPaidTimes(v []string) {
	o.PaidTimes = v
}

// GetConfirmedTimes returns the ConfirmedTimes field value if set, zero value otherwise.
func (o *TimeDetail) GetConfirmedTimes() []string {
	if o == nil || utils.IsNil(o.ConfirmedTimes) {
		var ret []string
		return ret
	}
	return o.ConfirmedTimes
}

// GetConfirmedTimesOk returns a tuple with the ConfirmedTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeDetail) GetConfirmedTimesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.ConfirmedTimes) {
		return nil, false
	}
	return o.ConfirmedTimes, true
}

// HasConfirmedTimes returns a boolean if a field has been set.
func (o *TimeDetail) HasConfirmedTimes() bool {
	if o != nil && !utils.IsNil(o.ConfirmedTimes) {
		return true
	}

	return false
}

// SetConfirmedTimes gets a reference to the given []string and assigns it to the ConfirmedTimes field.
func (o *TimeDetail) SetConfirmedTimes(v []string) {
	o.ConfirmedTimes = v
}

// GetCancelledTime returns the CancelledTime field value if set, zero value otherwise.
func (o *TimeDetail) GetCancelledTime() string {
	if o == nil || utils.IsNil(o.CancelledTime) {
		var ret string
		return ret
	}
	return *o.CancelledTime
}

// GetCancelledTimeOk returns a tuple with the CancelledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeDetail) GetCancelledTimeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CancelledTime) {
		return nil, false
	}
	return o.CancelledTime, true
}

// HasCancelledTime returns a boolean if a field has been set.
func (o *TimeDetail) HasCancelledTime() bool {
	if o != nil && !utils.IsNil(o.CancelledTime) {
		return true
	}

	return false
}

// SetCancelledTime gets a reference to the given string and assigns it to the CancelledTime field.
func (o *TimeDetail) SetCancelledTime(v string) {
	o.CancelledTime = &v
}

func (o TimeDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdTime"] = o.CreatedTime
	toSerialize["expiryTime"] = o.ExpiryTime
	if !utils.IsNil(o.PaidTimes) {
		toSerialize["paidTimes"] = o.PaidTimes
	}
	if !utils.IsNil(o.ConfirmedTimes) {
		toSerialize["confirmedTimes"] = o.ConfirmedTimes
	}
	if !utils.IsNil(o.CancelledTime) {
		toSerialize["cancelledTime"] = o.CancelledTime
	}
	return toSerialize, nil
}

func (o *TimeDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdTime",
		"expiryTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeDetail := _TimeDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeDetail)

	if err != nil {
		return err
	}

	*o = TimeDetail(varTimeDetail)

	return err
}

type NullableTimeDetail struct {
	value *TimeDetail
	isSet bool
}

func (v NullableTimeDetail) Get() *TimeDetail {
	return v.value
}

func (v *NullableTimeDetail) Set(val *TimeDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeDetail(val *TimeDetail) *NullableTimeDetail {
	return &NullableTimeDetail{value: val, isSet: true}
}

func (v NullableTimeDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


