/*
Payment Gateway API

API for doing operations in DANA Payment Gateway (Gapura)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package payment_gateway

import (
	"encoding/json"
	utils "github.com/dana-id/dana-go-api-client/utils"
)

// checks if the FinishNotifyAdditionalInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &FinishNotifyAdditionalInfo{}

// FinishNotifyAdditionalInfo struct for FinishNotifyAdditionalInfo
type FinishNotifyAdditionalInfo struct {
	PaymentInfo *FinishNotifyPaymentInfo `json:"paymentInfo,omitempty"`
	// Additional information of shop
	ShopInfo map[string]interface{} `json:"shopInfo,omitempty"`
	// Extended information (as a JSON string)
	ExtendInfo *string `json:"extendInfo,omitempty"`
	// Reason for order closure (if order is closed)
	ExtendInfoClosedReason *string `json:"extendInfo.closedReason,omitempty"`
}

// NewFinishNotifyAdditionalInfo instantiates a new FinishNotifyAdditionalInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinishNotifyAdditionalInfo() *FinishNotifyAdditionalInfo {
	this := FinishNotifyAdditionalInfo{}
	return &this
}

// NewFinishNotifyAdditionalInfoWithDefaults instantiates a new FinishNotifyAdditionalInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinishNotifyAdditionalInfoWithDefaults() *FinishNotifyAdditionalInfo {
	this := FinishNotifyAdditionalInfo{}
	return &this
}

// GetPaymentInfo returns the PaymentInfo field value if set, zero value otherwise.
func (o *FinishNotifyAdditionalInfo) GetPaymentInfo() FinishNotifyPaymentInfo {
	if o == nil || utils.IsNil(o.PaymentInfo) {
		var ret FinishNotifyPaymentInfo
		return ret
	}
	return *o.PaymentInfo
}

// GetPaymentInfoOk returns a tuple with the PaymentInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinishNotifyAdditionalInfo) GetPaymentInfoOk() (*FinishNotifyPaymentInfo, bool) {
	if o == nil || utils.IsNil(o.PaymentInfo) {
		return nil, false
	}
	return o.PaymentInfo, true
}

// HasPaymentInfo returns a boolean if a field has been set.
func (o *FinishNotifyAdditionalInfo) HasPaymentInfo() bool {
	if o != nil && !utils.IsNil(o.PaymentInfo) {
		return true
	}

	return false
}

// SetPaymentInfo gets a reference to the given FinishNotifyPaymentInfo and assigns it to the PaymentInfo field.
func (o *FinishNotifyAdditionalInfo) SetPaymentInfo(v FinishNotifyPaymentInfo) {
	o.PaymentInfo = &v
}

// GetShopInfo returns the ShopInfo field value if set, zero value otherwise.
func (o *FinishNotifyAdditionalInfo) GetShopInfo() map[string]interface{} {
	if o == nil || utils.IsNil(o.ShopInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.ShopInfo
}

// GetShopInfoOk returns a tuple with the ShopInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinishNotifyAdditionalInfo) GetShopInfoOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.ShopInfo) {
		return map[string]interface{}{}, false
	}
	return o.ShopInfo, true
}

// HasShopInfo returns a boolean if a field has been set.
func (o *FinishNotifyAdditionalInfo) HasShopInfo() bool {
	if o != nil && !utils.IsNil(o.ShopInfo) {
		return true
	}

	return false
}

// SetShopInfo gets a reference to the given map[string]interface{} and assigns it to the ShopInfo field.
func (o *FinishNotifyAdditionalInfo) SetShopInfo(v map[string]interface{}) {
	o.ShopInfo = v
}

// GetExtendInfo returns the ExtendInfo field value if set, zero value otherwise.
func (o *FinishNotifyAdditionalInfo) GetExtendInfo() string {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		var ret string
		return ret
	}
	return *o.ExtendInfo
}

// GetExtendInfoOk returns a tuple with the ExtendInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinishNotifyAdditionalInfo) GetExtendInfoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExtendInfo) {
		return nil, false
	}
	return o.ExtendInfo, true
}

// HasExtendInfo returns a boolean if a field has been set.
func (o *FinishNotifyAdditionalInfo) HasExtendInfo() bool {
	if o != nil && !utils.IsNil(o.ExtendInfo) {
		return true
	}

	return false
}

// SetExtendInfo gets a reference to the given string and assigns it to the ExtendInfo field.
func (o *FinishNotifyAdditionalInfo) SetExtendInfo(v string) {
	o.ExtendInfo = &v
}

// GetExtendInfoClosedReason returns the ExtendInfoClosedReason field value if set, zero value otherwise.
func (o *FinishNotifyAdditionalInfo) GetExtendInfoClosedReason() string {
	if o == nil || utils.IsNil(o.ExtendInfoClosedReason) {
		var ret string
		return ret
	}
	return *o.ExtendInfoClosedReason
}

// GetExtendInfoClosedReasonOk returns a tuple with the ExtendInfoClosedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinishNotifyAdditionalInfo) GetExtendInfoClosedReasonOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExtendInfoClosedReason) {
		return nil, false
	}
	return o.ExtendInfoClosedReason, true
}

// HasExtendInfoClosedReason returns a boolean if a field has been set.
func (o *FinishNotifyAdditionalInfo) HasExtendInfoClosedReason() bool {
	if o != nil && !utils.IsNil(o.ExtendInfoClosedReason) {
		return true
	}

	return false
}

// SetExtendInfoClosedReason gets a reference to the given string and assigns it to the ExtendInfoClosedReason field.
func (o *FinishNotifyAdditionalInfo) SetExtendInfoClosedReason(v string) {
	o.ExtendInfoClosedReason = &v
}

func (o FinishNotifyAdditionalInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinishNotifyAdditionalInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PaymentInfo) {
		toSerialize["paymentInfo"] = o.PaymentInfo
	}
	if !utils.IsNil(o.ShopInfo) {
		toSerialize["shopInfo"] = o.ShopInfo
	}
	if !utils.IsNil(o.ExtendInfo) {
		toSerialize["extendInfo"] = o.ExtendInfo
	}
	if !utils.IsNil(o.ExtendInfoClosedReason) {
		toSerialize["extendInfo.closedReason"] = o.ExtendInfoClosedReason
	}
	return toSerialize, nil
}

type NullableFinishNotifyAdditionalInfo struct {
	value *FinishNotifyAdditionalInfo
	isSet bool
}

func (v NullableFinishNotifyAdditionalInfo) Get() *FinishNotifyAdditionalInfo {
	return v.value
}

func (v *NullableFinishNotifyAdditionalInfo) Set(val *FinishNotifyAdditionalInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFinishNotifyAdditionalInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFinishNotifyAdditionalInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinishNotifyAdditionalInfo(val *FinishNotifyAdditionalInfo) *NullableFinishNotifyAdditionalInfo {
	return &NullableFinishNotifyAdditionalInfo{value: val, isSet: true}
}

func (v NullableFinishNotifyAdditionalInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinishNotifyAdditionalInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


