// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package widget

/*
Widget API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the Oauth2UrlDataSeamlessData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Oauth2UrlDataSeamlessData{}

// Oauth2UrlDataSeamlessData Option for binding process.Please refer sample below to know how to include seamlessData
type Oauth2UrlDataSeamlessData struct {
	// Userâ€™s bizScenario
	BizScenario *string `json:"bizScenario,omitempty"`
	// User's phone number. If this field is filled in, the user must log in with the number that has been included
	MobileNumber *string `json:"mobileNumber,omitempty"`
	// Value which states that the mobile number that has been included in seamlessData has verified ownership and does not require OTP verification by the provider, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
	VerifiedTime *string `json:"verifiedTime,omitempty"`
	// User identifier on partner application
	ExternalUid *string `json:"externalUid,omitempty"`
	// User's device identifier
	DeviceId *string `json:"deviceId,omitempty"`
	// Identifier to differentiate seamless registration flow. The possible values are true or false
	SkipRegisterConsult *bool `json:"skipRegisterConsult,omitempty"`
}

// NewOauth2UrlDataSeamlessData instantiates a new Oauth2UrlDataSeamlessData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauth2UrlDataSeamlessData() *Oauth2UrlDataSeamlessData {
	this := Oauth2UrlDataSeamlessData{}
	return &this
}

// NewOauth2UrlDataSeamlessDataWithDefaults instantiates a new Oauth2UrlDataSeamlessData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauth2UrlDataSeamlessDataWithDefaults() *Oauth2UrlDataSeamlessData {
	this := Oauth2UrlDataSeamlessData{}
	return &this
}

// GetBizScenario returns the BizScenario field value if set, zero value otherwise.
func (o *Oauth2UrlDataSeamlessData) GetBizScenario() string {
	if o == nil || utils.IsNil(o.BizScenario) {
		var ret string
		return ret
	}
	return *o.BizScenario
}

// GetBizScenarioOk returns a tuple with the BizScenario field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlDataSeamlessData) GetBizScenarioOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BizScenario) {
		return nil, false
	}
	return o.BizScenario, true
}

// HasBizScenario returns a boolean if a field has been set.
func (o *Oauth2UrlDataSeamlessData) HasBizScenario() bool {
	if o != nil && !utils.IsNil(o.BizScenario) {
		return true
	}

	return false
}

// SetBizScenario gets a reference to the given string and assigns it to the BizScenario field.
func (o *Oauth2UrlDataSeamlessData) SetBizScenario(v string) {
	o.BizScenario = &v
}

// GetMobileNumber returns the MobileNumber field value if set, zero value otherwise.
func (o *Oauth2UrlDataSeamlessData) GetMobileNumber() string {
	if o == nil || utils.IsNil(o.MobileNumber) {
		var ret string
		return ret
	}
	return *o.MobileNumber
}

// GetMobileNumberOk returns a tuple with the MobileNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlDataSeamlessData) GetMobileNumberOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MobileNumber) {
		return nil, false
	}
	return o.MobileNumber, true
}

// HasMobileNumber returns a boolean if a field has been set.
func (o *Oauth2UrlDataSeamlessData) HasMobileNumber() bool {
	if o != nil && !utils.IsNil(o.MobileNumber) {
		return true
	}

	return false
}

// SetMobileNumber gets a reference to the given string and assigns it to the MobileNumber field.
func (o *Oauth2UrlDataSeamlessData) SetMobileNumber(v string) {
	o.MobileNumber = &v
}

// GetVerifiedTime returns the VerifiedTime field value if set, zero value otherwise.
func (o *Oauth2UrlDataSeamlessData) GetVerifiedTime() string {
	if o == nil || utils.IsNil(o.VerifiedTime) {
		var ret string
		return ret
	}
	return *o.VerifiedTime
}

// GetVerifiedTimeOk returns a tuple with the VerifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlDataSeamlessData) GetVerifiedTimeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.VerifiedTime) {
		return nil, false
	}
	return o.VerifiedTime, true
}

// HasVerifiedTime returns a boolean if a field has been set.
func (o *Oauth2UrlDataSeamlessData) HasVerifiedTime() bool {
	if o != nil && !utils.IsNil(o.VerifiedTime) {
		return true
	}

	return false
}

// SetVerifiedTime gets a reference to the given string and assigns it to the VerifiedTime field.
func (o *Oauth2UrlDataSeamlessData) SetVerifiedTime(v string) {
	o.VerifiedTime = &v
}

// GetExternalUid returns the ExternalUid field value if set, zero value otherwise.
func (o *Oauth2UrlDataSeamlessData) GetExternalUid() string {
	if o == nil || utils.IsNil(o.ExternalUid) {
		var ret string
		return ret
	}
	return *o.ExternalUid
}

// GetExternalUidOk returns a tuple with the ExternalUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlDataSeamlessData) GetExternalUidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExternalUid) {
		return nil, false
	}
	return o.ExternalUid, true
}

// HasExternalUid returns a boolean if a field has been set.
func (o *Oauth2UrlDataSeamlessData) HasExternalUid() bool {
	if o != nil && !utils.IsNil(o.ExternalUid) {
		return true
	}

	return false
}

// SetExternalUid gets a reference to the given string and assigns it to the ExternalUid field.
func (o *Oauth2UrlDataSeamlessData) SetExternalUid(v string) {
	o.ExternalUid = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *Oauth2UrlDataSeamlessData) GetDeviceId() string {
	if o == nil || utils.IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlDataSeamlessData) GetDeviceIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *Oauth2UrlDataSeamlessData) HasDeviceId() bool {
	if o != nil && !utils.IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *Oauth2UrlDataSeamlessData) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetSkipRegisterConsult returns the SkipRegisterConsult field value if set, zero value otherwise.
func (o *Oauth2UrlDataSeamlessData) GetSkipRegisterConsult() bool {
	if o == nil || utils.IsNil(o.SkipRegisterConsult) {
		var ret bool
		return ret
	}
	return *o.SkipRegisterConsult
}

// GetSkipRegisterConsultOk returns a tuple with the SkipRegisterConsult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlDataSeamlessData) GetSkipRegisterConsultOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.SkipRegisterConsult) {
		return nil, false
	}
	return o.SkipRegisterConsult, true
}

// HasSkipRegisterConsult returns a boolean if a field has been set.
func (o *Oauth2UrlDataSeamlessData) HasSkipRegisterConsult() bool {
	if o != nil && !utils.IsNil(o.SkipRegisterConsult) {
		return true
	}

	return false
}

// SetSkipRegisterConsult gets a reference to the given bool and assigns it to the SkipRegisterConsult field.
func (o *Oauth2UrlDataSeamlessData) SetSkipRegisterConsult(v bool) {
	o.SkipRegisterConsult = &v
}

func (o Oauth2UrlDataSeamlessData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Oauth2UrlDataSeamlessData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.BizScenario) {
		toSerialize["bizScenario"] = o.BizScenario
	}
	if !utils.IsNil(o.MobileNumber) {
		toSerialize["mobileNumber"] = o.MobileNumber
	}
	if !utils.IsNil(o.VerifiedTime) {
		toSerialize["verifiedTime"] = o.VerifiedTime
	}
	if !utils.IsNil(o.ExternalUid) {
		toSerialize["externalUid"] = o.ExternalUid
	}
	if !utils.IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !utils.IsNil(o.SkipRegisterConsult) {
		toSerialize["skipRegisterConsult"] = o.SkipRegisterConsult
	}
	return toSerialize, nil
}

type NullableOauth2UrlDataSeamlessData struct {
	value *Oauth2UrlDataSeamlessData
	isSet bool
}

func (v NullableOauth2UrlDataSeamlessData) Get() *Oauth2UrlDataSeamlessData {
	return v.value
}

func (v *NullableOauth2UrlDataSeamlessData) Set(val *Oauth2UrlDataSeamlessData) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2UrlDataSeamlessData) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2UrlDataSeamlessData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2UrlDataSeamlessData(val *Oauth2UrlDataSeamlessData) *NullableOauth2UrlDataSeamlessData {
	return &NullableOauth2UrlDataSeamlessData{value: val, isSet: true}
}

func (v NullableOauth2UrlDataSeamlessData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2UrlDataSeamlessData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


