// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package widget

/*
Widget API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the Oauth2UrlData type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Oauth2UrlData{}

// Oauth2UrlData Data needed to construct Oauth2Url
type Oauth2UrlData struct {
	// Identifier from merchant
	ExternalId string `json:"externalId"`
	// Merchant identifier that is unique per each merchant
	MerchantId string `json:"merchantId"`
	// Information of sub merchant identifier
	SubMerchantId *string `json:"subMerchantId,omitempty"`
	SeamlessData *Oauth2UrlDataSeamlessData `json:"seamlessData,omitempty"`
	// The scopes of the authorization
	Scopes []string `json:"scopes,omitempty"`
	// When user authorization is success, the user will be redirected to this URL
	RedirectUrl string `json:"redirectUrl"`
	// Random string for CSRF protection purposes
	State *string `json:"state,omitempty"`
	// Service language code. ISO 639-1
	Lang *string `json:"lang,omitempty"`
	// If value equals true, provider may enable registration process during binding. Default true
	AllowRegistration *string `json:"allowRegistration,omitempty"`
}

type _Oauth2UrlData Oauth2UrlData

// NewOauth2UrlData instantiates a new Oauth2UrlData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauth2UrlData(externalId string, merchantId string, redirectUrl string) *Oauth2UrlData {
	this := Oauth2UrlData{}
	this.ExternalId = externalId
	this.MerchantId = merchantId
	this.RedirectUrl = redirectUrl
	var lang string = "id"
	this.Lang = &lang
	var allowRegistration string = "true"
	this.AllowRegistration = &allowRegistration
	return &this
}

// NewOauth2UrlDataWithDefaults instantiates a new Oauth2UrlData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauth2UrlDataWithDefaults() *Oauth2UrlData {
	this := Oauth2UrlData{}
	var lang string = "id"
	this.Lang = &lang
	var allowRegistration string = "true"
	this.AllowRegistration = &allowRegistration
	return &this
}

// GetExternalId returns the ExternalId field value
func (o *Oauth2UrlData) GetExternalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value
// and a boolean to check if the value has been set.
func (o *Oauth2UrlData) GetExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalId, true
}

// SetExternalId sets field value
func (o *Oauth2UrlData) SetExternalId(v string) {
	o.ExternalId = v
}

// GetMerchantId returns the MerchantId field value
func (o *Oauth2UrlData) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *Oauth2UrlData) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *Oauth2UrlData) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetSubMerchantId returns the SubMerchantId field value if set, zero value otherwise.
func (o *Oauth2UrlData) GetSubMerchantId() string {
	if o == nil || utils.IsNil(o.SubMerchantId) {
		var ret string
		return ret
	}
	return *o.SubMerchantId
}

// GetSubMerchantIdOk returns a tuple with the SubMerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlData) GetSubMerchantIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SubMerchantId) {
		return nil, false
	}
	return o.SubMerchantId, true
}

// HasSubMerchantId returns a boolean if a field has been set.
func (o *Oauth2UrlData) HasSubMerchantId() bool {
	if o != nil && !utils.IsNil(o.SubMerchantId) {
		return true
	}

	return false
}

// SetSubMerchantId gets a reference to the given string and assigns it to the SubMerchantId field.
func (o *Oauth2UrlData) SetSubMerchantId(v string) {
	o.SubMerchantId = &v
}

// GetSeamlessData returns the SeamlessData field value if set, zero value otherwise.
func (o *Oauth2UrlData) GetSeamlessData() Oauth2UrlDataSeamlessData {
	if o == nil || utils.IsNil(o.SeamlessData) {
		var ret Oauth2UrlDataSeamlessData
		return ret
	}
	return *o.SeamlessData
}

// GetSeamlessDataOk returns a tuple with the SeamlessData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlData) GetSeamlessDataOk() (*Oauth2UrlDataSeamlessData, bool) {
	if o == nil || utils.IsNil(o.SeamlessData) {
		return nil, false
	}
	return o.SeamlessData, true
}

// HasSeamlessData returns a boolean if a field has been set.
func (o *Oauth2UrlData) HasSeamlessData() bool {
	if o != nil && !utils.IsNil(o.SeamlessData) {
		return true
	}

	return false
}

// SetSeamlessData gets a reference to the given Oauth2UrlDataSeamlessData and assigns it to the SeamlessData field.
func (o *Oauth2UrlData) SetSeamlessData(v Oauth2UrlDataSeamlessData) {
	o.SeamlessData = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *Oauth2UrlData) GetScopes() []string {
	if o == nil || utils.IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlData) GetScopesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *Oauth2UrlData) HasScopes() bool {
	if o != nil && !utils.IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *Oauth2UrlData) SetScopes(v []string) {
	o.Scopes = v
}

// GetRedirectUrl returns the RedirectUrl field value
func (o *Oauth2UrlData) GetRedirectUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RedirectUrl
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value
// and a boolean to check if the value has been set.
func (o *Oauth2UrlData) GetRedirectUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RedirectUrl, true
}

// SetRedirectUrl sets field value
func (o *Oauth2UrlData) SetRedirectUrl(v string) {
	o.RedirectUrl = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Oauth2UrlData) GetState() string {
	if o == nil || utils.IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlData) GetStateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Oauth2UrlData) HasState() bool {
	if o != nil && !utils.IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Oauth2UrlData) SetState(v string) {
	o.State = &v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *Oauth2UrlData) GetLang() string {
	if o == nil || utils.IsNil(o.Lang) {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlData) GetLangOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Lang) {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *Oauth2UrlData) HasLang() bool {
	if o != nil && !utils.IsNil(o.Lang) {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *Oauth2UrlData) SetLang(v string) {
	o.Lang = &v
}

// GetAllowRegistration returns the AllowRegistration field value if set, zero value otherwise.
func (o *Oauth2UrlData) GetAllowRegistration() string {
	if o == nil || utils.IsNil(o.AllowRegistration) {
		var ret string
		return ret
	}
	return *o.AllowRegistration
}

// GetAllowRegistrationOk returns a tuple with the AllowRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Oauth2UrlData) GetAllowRegistrationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AllowRegistration) {
		return nil, false
	}
	return o.AllowRegistration, true
}

// HasAllowRegistration returns a boolean if a field has been set.
func (o *Oauth2UrlData) HasAllowRegistration() bool {
	if o != nil && !utils.IsNil(o.AllowRegistration) {
		return true
	}

	return false
}

// SetAllowRegistration gets a reference to the given string and assigns it to the AllowRegistration field.
func (o *Oauth2UrlData) SetAllowRegistration(v string) {
	o.AllowRegistration = &v
}

func (o Oauth2UrlData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Oauth2UrlData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["externalId"] = o.ExternalId
	toSerialize["merchantId"] = o.MerchantId
	if !utils.IsNil(o.SubMerchantId) {
		toSerialize["subMerchantId"] = o.SubMerchantId
	}
	if !utils.IsNil(o.SeamlessData) {
		toSerialize["seamlessData"] = o.SeamlessData
	}
	if !utils.IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	toSerialize["redirectUrl"] = o.RedirectUrl
	if !utils.IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !utils.IsNil(o.Lang) {
		toSerialize["lang"] = o.Lang
	}
	if !utils.IsNil(o.AllowRegistration) {
		toSerialize["allowRegistration"] = o.AllowRegistration
	}
	return toSerialize, nil
}

func (o *Oauth2UrlData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"externalId",
		"merchantId",
		"redirectUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOauth2UrlData := _Oauth2UrlData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOauth2UrlData)

	if err != nil {
		return err
	}

	*o = Oauth2UrlData(varOauth2UrlData)

	return err
}

type NullableOauth2UrlData struct {
	value *Oauth2UrlData
	isSet bool
}

func (v NullableOauth2UrlData) Get() *Oauth2UrlData {
	return v.value
}

func (v *NullableOauth2UrlData) Set(val *Oauth2UrlData) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2UrlData) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2UrlData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2UrlData(val *Oauth2UrlData) *NullableOauth2UrlData {
	return &NullableOauth2UrlData{value: val, isSet: true}
}

func (v NullableOauth2UrlData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2UrlData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


