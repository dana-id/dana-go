// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package widget

/*
Widget API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the AccountInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AccountInfo{}

// AccountInfo struct for AccountInfo
type AccountInfo struct {
	// Account information of balance type to specify which balance type expected to be returned. Will return all available balance type if this parameter empty
	BalanceType *string `json:"balanceType,omitempty"`
	// Account information of amount which include the net active amount. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
	Amount *Money `json:"amount,omitempty"`
	// Account information of float amount which include the inactive amount due to cut off period. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
	FloatAmount *Money `json:"floatAmount,omitempty"`
	// Account information of hold amount which include the unusable amount due to certain type of transaction. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
	HoldAmount *Money `json:"holdAmount,omitempty"`
	// Account information of available balance which include the active amount that can be used for transaction. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
	AvailableBalance *Money `json:"availableBalance,omitempty"`
	// Account information of ledger balance which include the starting balance for this day. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
	LedgerBalance *Money `json:"ledgerBalance,omitempty"`
	// Account information of current multilateral limit. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
	CurrentMultilateralLimit *Money `json:"currentMultilateralLimit,omitempty"`
	// Account information of customer registration status
	RegistrationStatusCode *string `json:"registrationStatusCode,omitempty"`
	// Account information of status. The values include:<br> 1 = Active Account<br> 2 = Closed Account<br> 4 = New Account<br> 6 = Restricted Account<br> 7 = Frozen Account 
	Status *string `json:"status,omitempty"`
}

// NewAccountInfo instantiates a new AccountInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountInfo() *AccountInfo {
	this := AccountInfo{}
	return &this
}

// NewAccountInfoWithDefaults instantiates a new AccountInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountInfoWithDefaults() *AccountInfo {
	this := AccountInfo{}
	return &this
}

// GetBalanceType returns the BalanceType field value if set, zero value otherwise.
func (o *AccountInfo) GetBalanceType() string {
	if o == nil || utils.IsNil(o.BalanceType) {
		var ret string
		return ret
	}
	return *o.BalanceType
}

// GetBalanceTypeOk returns a tuple with the BalanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetBalanceTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BalanceType) {
		return nil, false
	}
	return o.BalanceType, true
}

// HasBalanceType returns a boolean if a field has been set.
func (o *AccountInfo) HasBalanceType() bool {
	if o != nil && !utils.IsNil(o.BalanceType) {
		return true
	}

	return false
}

// SetBalanceType gets a reference to the given string and assigns it to the BalanceType field.
func (o *AccountInfo) SetBalanceType(v string) {
	o.BalanceType = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AccountInfo) GetAmount() Money {
	if o == nil || utils.IsNil(o.Amount) {
		var ret Money
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AccountInfo) HasAmount() bool {
	if o != nil && !utils.IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Money and assigns it to the Amount field.
func (o *AccountInfo) SetAmount(v Money) {
	o.Amount = &v
}

// GetFloatAmount returns the FloatAmount field value if set, zero value otherwise.
func (o *AccountInfo) GetFloatAmount() Money {
	if o == nil || utils.IsNil(o.FloatAmount) {
		var ret Money
		return ret
	}
	return *o.FloatAmount
}

// GetFloatAmountOk returns a tuple with the FloatAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetFloatAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.FloatAmount) {
		return nil, false
	}
	return o.FloatAmount, true
}

// HasFloatAmount returns a boolean if a field has been set.
func (o *AccountInfo) HasFloatAmount() bool {
	if o != nil && !utils.IsNil(o.FloatAmount) {
		return true
	}

	return false
}

// SetFloatAmount gets a reference to the given Money and assigns it to the FloatAmount field.
func (o *AccountInfo) SetFloatAmount(v Money) {
	o.FloatAmount = &v
}

// GetHoldAmount returns the HoldAmount field value if set, zero value otherwise.
func (o *AccountInfo) GetHoldAmount() Money {
	if o == nil || utils.IsNil(o.HoldAmount) {
		var ret Money
		return ret
	}
	return *o.HoldAmount
}

// GetHoldAmountOk returns a tuple with the HoldAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetHoldAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.HoldAmount) {
		return nil, false
	}
	return o.HoldAmount, true
}

// HasHoldAmount returns a boolean if a field has been set.
func (o *AccountInfo) HasHoldAmount() bool {
	if o != nil && !utils.IsNil(o.HoldAmount) {
		return true
	}

	return false
}

// SetHoldAmount gets a reference to the given Money and assigns it to the HoldAmount field.
func (o *AccountInfo) SetHoldAmount(v Money) {
	o.HoldAmount = &v
}

// GetAvailableBalance returns the AvailableBalance field value if set, zero value otherwise.
func (o *AccountInfo) GetAvailableBalance() Money {
	if o == nil || utils.IsNil(o.AvailableBalance) {
		var ret Money
		return ret
	}
	return *o.AvailableBalance
}

// GetAvailableBalanceOk returns a tuple with the AvailableBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetAvailableBalanceOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.AvailableBalance) {
		return nil, false
	}
	return o.AvailableBalance, true
}

// HasAvailableBalance returns a boolean if a field has been set.
func (o *AccountInfo) HasAvailableBalance() bool {
	if o != nil && !utils.IsNil(o.AvailableBalance) {
		return true
	}

	return false
}

// SetAvailableBalance gets a reference to the given Money and assigns it to the AvailableBalance field.
func (o *AccountInfo) SetAvailableBalance(v Money) {
	o.AvailableBalance = &v
}

// GetLedgerBalance returns the LedgerBalance field value if set, zero value otherwise.
func (o *AccountInfo) GetLedgerBalance() Money {
	if o == nil || utils.IsNil(o.LedgerBalance) {
		var ret Money
		return ret
	}
	return *o.LedgerBalance
}

// GetLedgerBalanceOk returns a tuple with the LedgerBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetLedgerBalanceOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.LedgerBalance) {
		return nil, false
	}
	return o.LedgerBalance, true
}

// HasLedgerBalance returns a boolean if a field has been set.
func (o *AccountInfo) HasLedgerBalance() bool {
	if o != nil && !utils.IsNil(o.LedgerBalance) {
		return true
	}

	return false
}

// SetLedgerBalance gets a reference to the given Money and assigns it to the LedgerBalance field.
func (o *AccountInfo) SetLedgerBalance(v Money) {
	o.LedgerBalance = &v
}

// GetCurrentMultilateralLimit returns the CurrentMultilateralLimit field value if set, zero value otherwise.
func (o *AccountInfo) GetCurrentMultilateralLimit() Money {
	if o == nil || utils.IsNil(o.CurrentMultilateralLimit) {
		var ret Money
		return ret
	}
	return *o.CurrentMultilateralLimit
}

// GetCurrentMultilateralLimitOk returns a tuple with the CurrentMultilateralLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetCurrentMultilateralLimitOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.CurrentMultilateralLimit) {
		return nil, false
	}
	return o.CurrentMultilateralLimit, true
}

// HasCurrentMultilateralLimit returns a boolean if a field has been set.
func (o *AccountInfo) HasCurrentMultilateralLimit() bool {
	if o != nil && !utils.IsNil(o.CurrentMultilateralLimit) {
		return true
	}

	return false
}

// SetCurrentMultilateralLimit gets a reference to the given Money and assigns it to the CurrentMultilateralLimit field.
func (o *AccountInfo) SetCurrentMultilateralLimit(v Money) {
	o.CurrentMultilateralLimit = &v
}

// GetRegistrationStatusCode returns the RegistrationStatusCode field value if set, zero value otherwise.
func (o *AccountInfo) GetRegistrationStatusCode() string {
	if o == nil || utils.IsNil(o.RegistrationStatusCode) {
		var ret string
		return ret
	}
	return *o.RegistrationStatusCode
}

// GetRegistrationStatusCodeOk returns a tuple with the RegistrationStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetRegistrationStatusCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RegistrationStatusCode) {
		return nil, false
	}
	return o.RegistrationStatusCode, true
}

// HasRegistrationStatusCode returns a boolean if a field has been set.
func (o *AccountInfo) HasRegistrationStatusCode() bool {
	if o != nil && !utils.IsNil(o.RegistrationStatusCode) {
		return true
	}

	return false
}

// SetRegistrationStatusCode gets a reference to the given string and assigns it to the RegistrationStatusCode field.
func (o *AccountInfo) SetRegistrationStatusCode(v string) {
	o.RegistrationStatusCode = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AccountInfo) GetStatus() string {
	if o == nil || utils.IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetStatusOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AccountInfo) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AccountInfo) SetStatus(v string) {
	o.Status = &v
}

func (o AccountInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.BalanceType) {
		toSerialize["balanceType"] = o.BalanceType
	}
	if !utils.IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !utils.IsNil(o.FloatAmount) {
		toSerialize["floatAmount"] = o.FloatAmount
	}
	if !utils.IsNil(o.HoldAmount) {
		toSerialize["holdAmount"] = o.HoldAmount
	}
	if !utils.IsNil(o.AvailableBalance) {
		toSerialize["availableBalance"] = o.AvailableBalance
	}
	if !utils.IsNil(o.LedgerBalance) {
		toSerialize["ledgerBalance"] = o.LedgerBalance
	}
	if !utils.IsNil(o.CurrentMultilateralLimit) {
		toSerialize["currentMultilateralLimit"] = o.CurrentMultilateralLimit
	}
	if !utils.IsNil(o.RegistrationStatusCode) {
		toSerialize["registrationStatusCode"] = o.RegistrationStatusCode
	}
	if !utils.IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableAccountInfo struct {
	value *AccountInfo
	isSet bool
}

func (v NullableAccountInfo) Get() *AccountInfo {
	return v.value
}

func (v *NullableAccountInfo) Set(val *AccountInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountInfo(val *AccountInfo) *NullableAccountInfo {
	return &NullableAccountInfo{value: val, isSet: true}
}

func (v NullableAccountInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


