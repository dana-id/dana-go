// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package widget

/*
Widget API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the ResultInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ResultInfo{}

// ResultInfo struct for ResultInfo
type ResultInfo struct {
	// Result status (S=Success, F=Failure, U=Unknown)
	ResultStatus string `json:"resultStatus"`
	// Result code identifier
	ResultCodeId string `json:"resultCodeId"`
	// Result code
	ResultCode string `json:"resultCode"`
	// Result message
	ResultMsg string `json:"resultMsg"`
}

type _ResultInfo ResultInfo

// NewResultInfo instantiates a new ResultInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultInfo(resultStatus string, resultCodeId string, resultCode string, resultMsg string) *ResultInfo {
	this := ResultInfo{}
	this.ResultStatus = resultStatus
	this.ResultCodeId = resultCodeId
	this.ResultCode = resultCode
	this.ResultMsg = resultMsg
	return &this
}

// NewResultInfoWithDefaults instantiates a new ResultInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultInfoWithDefaults() *ResultInfo {
	this := ResultInfo{}
	return &this
}

// GetResultStatus returns the ResultStatus field value
func (o *ResultInfo) GetResultStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultStatus
}

// GetResultStatusOk returns a tuple with the ResultStatus field value
// and a boolean to check if the value has been set.
func (o *ResultInfo) GetResultStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultStatus, true
}

// SetResultStatus sets field value
func (o *ResultInfo) SetResultStatus(v string) {
	o.ResultStatus = v
}

// GetResultCodeId returns the ResultCodeId field value
func (o *ResultInfo) GetResultCodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultCodeId
}

// GetResultCodeIdOk returns a tuple with the ResultCodeId field value
// and a boolean to check if the value has been set.
func (o *ResultInfo) GetResultCodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultCodeId, true
}

// SetResultCodeId sets field value
func (o *ResultInfo) SetResultCodeId(v string) {
	o.ResultCodeId = v
}

// GetResultCode returns the ResultCode field value
func (o *ResultInfo) GetResultCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultCode
}

// GetResultCodeOk returns a tuple with the ResultCode field value
// and a boolean to check if the value has been set.
func (o *ResultInfo) GetResultCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultCode, true
}

// SetResultCode sets field value
func (o *ResultInfo) SetResultCode(v string) {
	o.ResultCode = v
}

// GetResultMsg returns the ResultMsg field value
func (o *ResultInfo) GetResultMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultMsg
}

// GetResultMsgOk returns a tuple with the ResultMsg field value
// and a boolean to check if the value has been set.
func (o *ResultInfo) GetResultMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultMsg, true
}

// SetResultMsg sets field value
func (o *ResultInfo) SetResultMsg(v string) {
	o.ResultMsg = v
}

func (o ResultInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resultStatus"] = o.ResultStatus
	toSerialize["resultCodeId"] = o.ResultCodeId
	toSerialize["resultCode"] = o.ResultCode
	toSerialize["resultMsg"] = o.ResultMsg
	return toSerialize, nil
}

func (o *ResultInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resultStatus",
		"resultCodeId",
		"resultCode",
		"resultMsg",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResultInfo := _ResultInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResultInfo)

	if err != nil {
		return err
	}

	*o = ResultInfo(varResultInfo)

	return err
}

type NullableResultInfo struct {
	value *ResultInfo
	isSet bool
}

func (v NullableResultInfo) Get() *ResultInfo {
	return v.value
}

func (v *NullableResultInfo) Set(val *ResultInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableResultInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableResultInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultInfo(val *ResultInfo) *NullableResultInfo {
	return &NullableResultInfo{value: val, isSet: true}
}

func (v NullableResultInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


