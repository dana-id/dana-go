// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package widget

/*
Widget API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the QueryPaymentRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &QueryPaymentRequest{}

// QueryPaymentRequest struct for QueryPaymentRequest
type QueryPaymentRequest struct {
	// Original transaction identifier on partner system
	OriginalPartnerReferenceNo *string `json:"originalPartnerReferenceNo,omitempty"`
	// Original transaction identifier on DANA system
	OriginalReferenceNo *string `json:"originalReferenceNo,omitempty"`
	// Original external identifier on header message
	OriginalExternalId *string `json:"originalExternalId,omitempty"`
	// Transaction type indicator is based on the service code of the original transaction request:<br> - IPG Cashier Pay - SNAP: 54<br> - QRIS CPM (Acquirer) - SNAP: 60<br> - QRIS MPM (Acquirer) - SNAP: 47<br> - Payment Gateway: 54<br> 
	ServiceCode string `json:"serviceCode"`
	// Transaction date in format YYYY-MM-DDTHH:mm:ss+07:00 (GMT+7, Jakarta time)
	TransactionDate *string `json:"transactionDate,omitempty" validate:"regexp=^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\+07:00$"`
	Amount *Money `json:"amount,omitempty"`
	// Merchant identifier that is unique per each merchant
	MerchantId string `json:"merchantId"`
	// Information of sub merchant identifier
	SubMerchantId *string `json:"subMerchantId,omitempty"`
	// Store identifier to indicate to which store this payment belongs to
	ExternalStoreId *string `json:"externalStoreId,omitempty"`
	// Additional information
	AdditionalInfo map[string]interface{} `json:"additionalInfo,omitempty"`
}

type _QueryPaymentRequest QueryPaymentRequest

// NewQueryPaymentRequest instantiates a new QueryPaymentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryPaymentRequest(serviceCode string, merchantId string) *QueryPaymentRequest {
	this := QueryPaymentRequest{}
	this.ServiceCode = serviceCode
	this.MerchantId = merchantId
	return &this
}

// NewQueryPaymentRequestWithDefaults instantiates a new QueryPaymentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryPaymentRequestWithDefaults() *QueryPaymentRequest {
	this := QueryPaymentRequest{}
	var serviceCode string = "54"
	this.ServiceCode = serviceCode
	return &this
}

// GetOriginalPartnerReferenceNo returns the OriginalPartnerReferenceNo field value if set, zero value otherwise.
func (o *QueryPaymentRequest) GetOriginalPartnerReferenceNo() string {
	if o == nil || utils.IsNil(o.OriginalPartnerReferenceNo) {
		var ret string
		return ret
	}
	return *o.OriginalPartnerReferenceNo
}

// GetOriginalPartnerReferenceNoOk returns a tuple with the OriginalPartnerReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPaymentRequest) GetOriginalPartnerReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OriginalPartnerReferenceNo) {
		return nil, false
	}
	return o.OriginalPartnerReferenceNo, true
}

// HasOriginalPartnerReferenceNo returns a boolean if a field has been set.
func (o *QueryPaymentRequest) HasOriginalPartnerReferenceNo() bool {
	if o != nil && !utils.IsNil(o.OriginalPartnerReferenceNo) {
		return true
	}

	return false
}

// SetOriginalPartnerReferenceNo gets a reference to the given string and assigns it to the OriginalPartnerReferenceNo field.
func (o *QueryPaymentRequest) SetOriginalPartnerReferenceNo(v string) {
	o.OriginalPartnerReferenceNo = &v
}

// GetOriginalReferenceNo returns the OriginalReferenceNo field value if set, zero value otherwise.
func (o *QueryPaymentRequest) GetOriginalReferenceNo() string {
	if o == nil || utils.IsNil(o.OriginalReferenceNo) {
		var ret string
		return ret
	}
	return *o.OriginalReferenceNo
}

// GetOriginalReferenceNoOk returns a tuple with the OriginalReferenceNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPaymentRequest) GetOriginalReferenceNoOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OriginalReferenceNo) {
		return nil, false
	}
	return o.OriginalReferenceNo, true
}

// HasOriginalReferenceNo returns a boolean if a field has been set.
func (o *QueryPaymentRequest) HasOriginalReferenceNo() bool {
	if o != nil && !utils.IsNil(o.OriginalReferenceNo) {
		return true
	}

	return false
}

// SetOriginalReferenceNo gets a reference to the given string and assigns it to the OriginalReferenceNo field.
func (o *QueryPaymentRequest) SetOriginalReferenceNo(v string) {
	o.OriginalReferenceNo = &v
}

// GetOriginalExternalId returns the OriginalExternalId field value if set, zero value otherwise.
func (o *QueryPaymentRequest) GetOriginalExternalId() string {
	if o == nil || utils.IsNil(o.OriginalExternalId) {
		var ret string
		return ret
	}
	return *o.OriginalExternalId
}

// GetOriginalExternalIdOk returns a tuple with the OriginalExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPaymentRequest) GetOriginalExternalIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OriginalExternalId) {
		return nil, false
	}
	return o.OriginalExternalId, true
}

// HasOriginalExternalId returns a boolean if a field has been set.
func (o *QueryPaymentRequest) HasOriginalExternalId() bool {
	if o != nil && !utils.IsNil(o.OriginalExternalId) {
		return true
	}

	return false
}

// SetOriginalExternalId gets a reference to the given string and assigns it to the OriginalExternalId field.
func (o *QueryPaymentRequest) SetOriginalExternalId(v string) {
	o.OriginalExternalId = &v
}

// GetServiceCode returns the ServiceCode field value
func (o *QueryPaymentRequest) GetServiceCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceCode
}

// GetServiceCodeOk returns a tuple with the ServiceCode field value
// and a boolean to check if the value has been set.
func (o *QueryPaymentRequest) GetServiceCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceCode, true
}

// SetServiceCode sets field value
func (o *QueryPaymentRequest) SetServiceCode(v string) {
	o.ServiceCode = v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *QueryPaymentRequest) GetTransactionDate() string {
	if o == nil || utils.IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPaymentRequest) GetTransactionDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *QueryPaymentRequest) HasTransactionDate() bool {
	if o != nil && !utils.IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *QueryPaymentRequest) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *QueryPaymentRequest) GetAmount() Money {
	if o == nil || utils.IsNil(o.Amount) {
		var ret Money
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPaymentRequest) GetAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *QueryPaymentRequest) HasAmount() bool {
	if o != nil && !utils.IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Money and assigns it to the Amount field.
func (o *QueryPaymentRequest) SetAmount(v Money) {
	o.Amount = &v
}

// GetMerchantId returns the MerchantId field value
func (o *QueryPaymentRequest) GetMerchantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value
// and a boolean to check if the value has been set.
func (o *QueryPaymentRequest) GetMerchantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantId, true
}

// SetMerchantId sets field value
func (o *QueryPaymentRequest) SetMerchantId(v string) {
	o.MerchantId = v
}

// GetSubMerchantId returns the SubMerchantId field value if set, zero value otherwise.
func (o *QueryPaymentRequest) GetSubMerchantId() string {
	if o == nil || utils.IsNil(o.SubMerchantId) {
		var ret string
		return ret
	}
	return *o.SubMerchantId
}

// GetSubMerchantIdOk returns a tuple with the SubMerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPaymentRequest) GetSubMerchantIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SubMerchantId) {
		return nil, false
	}
	return o.SubMerchantId, true
}

// HasSubMerchantId returns a boolean if a field has been set.
func (o *QueryPaymentRequest) HasSubMerchantId() bool {
	if o != nil && !utils.IsNil(o.SubMerchantId) {
		return true
	}

	return false
}

// SetSubMerchantId gets a reference to the given string and assigns it to the SubMerchantId field.
func (o *QueryPaymentRequest) SetSubMerchantId(v string) {
	o.SubMerchantId = &v
}

// GetExternalStoreId returns the ExternalStoreId field value if set, zero value otherwise.
func (o *QueryPaymentRequest) GetExternalStoreId() string {
	if o == nil || utils.IsNil(o.ExternalStoreId) {
		var ret string
		return ret
	}
	return *o.ExternalStoreId
}

// GetExternalStoreIdOk returns a tuple with the ExternalStoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPaymentRequest) GetExternalStoreIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExternalStoreId) {
		return nil, false
	}
	return o.ExternalStoreId, true
}

// HasExternalStoreId returns a boolean if a field has been set.
func (o *QueryPaymentRequest) HasExternalStoreId() bool {
	if o != nil && !utils.IsNil(o.ExternalStoreId) {
		return true
	}

	return false
}

// SetExternalStoreId gets a reference to the given string and assigns it to the ExternalStoreId field.
func (o *QueryPaymentRequest) SetExternalStoreId(v string) {
	o.ExternalStoreId = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *QueryPaymentRequest) GetAdditionalInfo() map[string]interface{} {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPaymentRequest) GetAdditionalInfoOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *QueryPaymentRequest) HasAdditionalInfo() bool {
	if o != nil && !utils.IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given map[string]interface{} and assigns it to the AdditionalInfo field.
func (o *QueryPaymentRequest) SetAdditionalInfo(v map[string]interface{}) {
	o.AdditionalInfo = v
}

func (o QueryPaymentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryPaymentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.OriginalPartnerReferenceNo) {
		toSerialize["originalPartnerReferenceNo"] = o.OriginalPartnerReferenceNo
	}
	if !utils.IsNil(o.OriginalReferenceNo) {
		toSerialize["originalReferenceNo"] = o.OriginalReferenceNo
	}
	if !utils.IsNil(o.OriginalExternalId) {
		toSerialize["originalExternalId"] = o.OriginalExternalId
	}
	toSerialize["serviceCode"] = o.ServiceCode
	if !utils.IsNil(o.TransactionDate) {
		toSerialize["transactionDate"] = o.TransactionDate
	}
	if !utils.IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	toSerialize["merchantId"] = o.MerchantId
	if !utils.IsNil(o.SubMerchantId) {
		toSerialize["subMerchantId"] = o.SubMerchantId
	}
	if !utils.IsNil(o.ExternalStoreId) {
		toSerialize["externalStoreId"] = o.ExternalStoreId
	}
	if !utils.IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	return toSerialize, nil
}

func (o *QueryPaymentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serviceCode",
		"merchantId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryPaymentRequest := _QueryPaymentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryPaymentRequest)

	if err != nil {
		return err
	}

	*o = QueryPaymentRequest(varQueryPaymentRequest)

	return err
}

type NullableQueryPaymentRequest struct {
	value *QueryPaymentRequest
	isSet bool
}

func (v NullableQueryPaymentRequest) Get() *QueryPaymentRequest {
	return v.value
}

func (v *NullableQueryPaymentRequest) Set(val *QueryPaymentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryPaymentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryPaymentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryPaymentRequest(val *QueryPaymentRequest) *NullableQueryPaymentRequest {
	return &NullableQueryPaymentRequest{value: val, isSet: true}
}

func (v NullableQueryPaymentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryPaymentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


