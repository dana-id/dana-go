// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package widget

/*
Widget API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the PayOptionDetail type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PayOptionDetail{}

// PayOptionDetail struct for PayOptionDetail
type PayOptionDetail struct {
	// Payment Method, e.g. CREDIT_CARD
	PayMethod string `json:"payMethod"`
	// Payment option which shows the provider of this payment e.g. CREDIT_CARD_VISA
	PayOption string `json:"payOption"`
	// Trans amount. Contains value and currency
	TransAmount *Money `json:"transAmount,omitempty"`
	// Fee amount. Contains value and currency
	FeeAmount *Money `json:"feeAmount,omitempty"`
	// Card token used for this payment
	CardToken *string `json:"cardToken,omitempty"`
	// Merchant token used for this payment
	MerchantToken *string `json:"merchantToken,omitempty"`
	AdditionalInfo *PayOptionDetailAdditionalInfo `json:"additionalInfo,omitempty"`
}

type _PayOptionDetail PayOptionDetail

// NewPayOptionDetail instantiates a new PayOptionDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayOptionDetail(payMethod string, payOption string) *PayOptionDetail {
	this := PayOptionDetail{}
	this.PayMethod = payMethod
	this.PayOption = payOption
	return &this
}

// NewPayOptionDetailWithDefaults instantiates a new PayOptionDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayOptionDetailWithDefaults() *PayOptionDetail {
	this := PayOptionDetail{}
	return &this
}

// GetPayMethod returns the PayMethod field value
func (o *PayOptionDetail) GetPayMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayMethod
}

// GetPayMethodOk returns a tuple with the PayMethod field value
// and a boolean to check if the value has been set.
func (o *PayOptionDetail) GetPayMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayMethod, true
}

// SetPayMethod sets field value
func (o *PayOptionDetail) SetPayMethod(v string) {
	o.PayMethod = v
}

// GetPayOption returns the PayOption field value
func (o *PayOptionDetail) GetPayOption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayOption
}

// GetPayOptionOk returns a tuple with the PayOption field value
// and a boolean to check if the value has been set.
func (o *PayOptionDetail) GetPayOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayOption, true
}

// SetPayOption sets field value
func (o *PayOptionDetail) SetPayOption(v string) {
	o.PayOption = v
}

// GetTransAmount returns the TransAmount field value if set, zero value otherwise.
func (o *PayOptionDetail) GetTransAmount() Money {
	if o == nil || utils.IsNil(o.TransAmount) {
		var ret Money
		return ret
	}
	return *o.TransAmount
}

// GetTransAmountOk returns a tuple with the TransAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionDetail) GetTransAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.TransAmount) {
		return nil, false
	}
	return o.TransAmount, true
}

// HasTransAmount returns a boolean if a field has been set.
func (o *PayOptionDetail) HasTransAmount() bool {
	if o != nil && !utils.IsNil(o.TransAmount) {
		return true
	}

	return false
}

// SetTransAmount gets a reference to the given Money and assigns it to the TransAmount field.
func (o *PayOptionDetail) SetTransAmount(v Money) {
	o.TransAmount = &v
}

// GetFeeAmount returns the FeeAmount field value if set, zero value otherwise.
func (o *PayOptionDetail) GetFeeAmount() Money {
	if o == nil || utils.IsNil(o.FeeAmount) {
		var ret Money
		return ret
	}
	return *o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionDetail) GetFeeAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.FeeAmount) {
		return nil, false
	}
	return o.FeeAmount, true
}

// HasFeeAmount returns a boolean if a field has been set.
func (o *PayOptionDetail) HasFeeAmount() bool {
	if o != nil && !utils.IsNil(o.FeeAmount) {
		return true
	}

	return false
}

// SetFeeAmount gets a reference to the given Money and assigns it to the FeeAmount field.
func (o *PayOptionDetail) SetFeeAmount(v Money) {
	o.FeeAmount = &v
}

// GetCardToken returns the CardToken field value if set, zero value otherwise.
func (o *PayOptionDetail) GetCardToken() string {
	if o == nil || utils.IsNil(o.CardToken) {
		var ret string
		return ret
	}
	return *o.CardToken
}

// GetCardTokenOk returns a tuple with the CardToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionDetail) GetCardTokenOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CardToken) {
		return nil, false
	}
	return o.CardToken, true
}

// HasCardToken returns a boolean if a field has been set.
func (o *PayOptionDetail) HasCardToken() bool {
	if o != nil && !utils.IsNil(o.CardToken) {
		return true
	}

	return false
}

// SetCardToken gets a reference to the given string and assigns it to the CardToken field.
func (o *PayOptionDetail) SetCardToken(v string) {
	o.CardToken = &v
}

// GetMerchantToken returns the MerchantToken field value if set, zero value otherwise.
func (o *PayOptionDetail) GetMerchantToken() string {
	if o == nil || utils.IsNil(o.MerchantToken) {
		var ret string
		return ret
	}
	return *o.MerchantToken
}

// GetMerchantTokenOk returns a tuple with the MerchantToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionDetail) GetMerchantTokenOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MerchantToken) {
		return nil, false
	}
	return o.MerchantToken, true
}

// HasMerchantToken returns a boolean if a field has been set.
func (o *PayOptionDetail) HasMerchantToken() bool {
	if o != nil && !utils.IsNil(o.MerchantToken) {
		return true
	}

	return false
}

// SetMerchantToken gets a reference to the given string and assigns it to the MerchantToken field.
func (o *PayOptionDetail) SetMerchantToken(v string) {
	o.MerchantToken = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *PayOptionDetail) GetAdditionalInfo() PayOptionDetailAdditionalInfo {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		var ret PayOptionDetailAdditionalInfo
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayOptionDetail) GetAdditionalInfoOk() (*PayOptionDetailAdditionalInfo, bool) {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *PayOptionDetail) HasAdditionalInfo() bool {
	if o != nil && !utils.IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given PayOptionDetailAdditionalInfo and assigns it to the AdditionalInfo field.
func (o *PayOptionDetail) SetAdditionalInfo(v PayOptionDetailAdditionalInfo) {
	o.AdditionalInfo = &v
}

func (o PayOptionDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayOptionDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["payMethod"] = o.PayMethod
	toSerialize["payOption"] = o.PayOption
	if !utils.IsNil(o.TransAmount) {
		toSerialize["transAmount"] = o.TransAmount
	}
	if !utils.IsNil(o.FeeAmount) {
		toSerialize["feeAmount"] = o.FeeAmount
	}
	if !utils.IsNil(o.CardToken) {
		toSerialize["cardToken"] = o.CardToken
	}
	if !utils.IsNil(o.MerchantToken) {
		toSerialize["merchantToken"] = o.MerchantToken
	}
	if !utils.IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	return toSerialize, nil
}

func (o *PayOptionDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payMethod",
		"payOption",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPayOptionDetail := _PayOptionDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPayOptionDetail)

	if err != nil {
		return err
	}

	*o = PayOptionDetail(varPayOptionDetail)

	return err
}

type NullablePayOptionDetail struct {
	value *PayOptionDetail
	isSet bool
}

func (v NullablePayOptionDetail) Get() *PayOptionDetail {
	return v.value
}

func (v *NullablePayOptionDetail) Set(val *PayOptionDetail) {
	v.value = val
	v.isSet = true
}

func (v NullablePayOptionDetail) IsSet() bool {
	return v.isSet
}

func (v *NullablePayOptionDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayOptionDetail(val *PayOptionDetail) *NullablePayOptionDetail {
	return &NullablePayOptionDetail{value: val, isSet: true}
}

func (v NullablePayOptionDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayOptionDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


