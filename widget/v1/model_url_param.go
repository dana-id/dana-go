// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package widget

/*
Widget API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the UrlParam type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &UrlParam{}

// UrlParam struct for UrlParam
type UrlParam struct {
	// URL link
	Url string `json:"url"`
	// Url param. The enums:<br> * PAY_RETURN - When finish payment, DANA will notify to the URL that has been defined by<br> * NOTIFICATION - After the payment, the user will be redirected to merchant page, this is mandatory<br> 
	Type string `json:"type"`
	// Deeplink URL or not
	IsDeeplink string `json:"isDeeplink"`
}

type _UrlParam UrlParam

// NewUrlParam instantiates a new UrlParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrlParam(url string, type_ string, isDeeplink string) *UrlParam {
	this := UrlParam{}
	this.Url = url
	this.Type = type_
	this.IsDeeplink = isDeeplink
	return &this
}

// NewUrlParamWithDefaults instantiates a new UrlParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlParamWithDefaults() *UrlParam {
	this := UrlParam{}
	return &this
}

// GetUrl returns the Url field value
func (o *UrlParam) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *UrlParam) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *UrlParam) SetUrl(v string) {
	o.Url = v
}

// GetType returns the Type field value
func (o *UrlParam) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UrlParam) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UrlParam) SetType(v string) {
	o.Type = v
}

// GetIsDeeplink returns the IsDeeplink field value
func (o *UrlParam) GetIsDeeplink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsDeeplink
}

// GetIsDeeplinkOk returns a tuple with the IsDeeplink field value
// and a boolean to check if the value has been set.
func (o *UrlParam) GetIsDeeplinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeeplink, true
}

// SetIsDeeplink sets field value
func (o *UrlParam) SetIsDeeplink(v string) {
	o.IsDeeplink = v
}

func (o UrlParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UrlParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["type"] = o.Type
	toSerialize["isDeeplink"] = o.IsDeeplink
	return toSerialize, nil
}

func (o *UrlParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"type",
		"isDeeplink",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUrlParam := _UrlParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUrlParam)

	if err != nil {
		return err
	}

	*o = UrlParam(varUrlParam)

	return err
}

type NullableUrlParam struct {
	value *UrlParam
	isSet bool
}

func (v NullableUrlParam) Get() *UrlParam {
	return v.value
}

func (v *NullableUrlParam) Set(val *UrlParam) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlParam) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlParam(val *UrlParam) *NullableUrlParam {
	return &NullableUrlParam{value: val, isSet: true}
}

func (v NullableUrlParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


