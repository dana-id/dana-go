// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package widget

/*
Widget API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the RefundPromoInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RefundPromoInfo{}

// RefundPromoInfo Information about the refund promotion that was applied
type RefundPromoInfo struct {
	// Promotion identifier
	PromoId string `json:"promoId"`
	// Promotion name
	PromoName string `json:"promoName"`
	// Type of promotion
	PromoType string `json:"promoType"`
	// Refund amount from this promotion. Contains value (amount including cents) and currency (code based on ISO)
	RefundAmount Money `json:"refundAmount"`
}

type _RefundPromoInfo RefundPromoInfo

// NewRefundPromoInfo instantiates a new RefundPromoInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundPromoInfo(promoId string, promoName string, promoType string, refundAmount Money) *RefundPromoInfo {
	this := RefundPromoInfo{}
	this.PromoId = promoId
	this.PromoName = promoName
	this.PromoType = promoType
	this.RefundAmount = refundAmount
	return &this
}

// NewRefundPromoInfoWithDefaults instantiates a new RefundPromoInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundPromoInfoWithDefaults() *RefundPromoInfo {
	this := RefundPromoInfo{}
	return &this
}

// GetPromoId returns the PromoId field value
func (o *RefundPromoInfo) GetPromoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PromoId
}

// GetPromoIdOk returns a tuple with the PromoId field value
// and a boolean to check if the value has been set.
func (o *RefundPromoInfo) GetPromoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PromoId, true
}

// SetPromoId sets field value
func (o *RefundPromoInfo) SetPromoId(v string) {
	o.PromoId = v
}

// GetPromoName returns the PromoName field value
func (o *RefundPromoInfo) GetPromoName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PromoName
}

// GetPromoNameOk returns a tuple with the PromoName field value
// and a boolean to check if the value has been set.
func (o *RefundPromoInfo) GetPromoNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PromoName, true
}

// SetPromoName sets field value
func (o *RefundPromoInfo) SetPromoName(v string) {
	o.PromoName = v
}

// GetPromoType returns the PromoType field value
func (o *RefundPromoInfo) GetPromoType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PromoType
}

// GetPromoTypeOk returns a tuple with the PromoType field value
// and a boolean to check if the value has been set.
func (o *RefundPromoInfo) GetPromoTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PromoType, true
}

// SetPromoType sets field value
func (o *RefundPromoInfo) SetPromoType(v string) {
	o.PromoType = v
}

// GetRefundAmount returns the RefundAmount field value
func (o *RefundPromoInfo) GetRefundAmount() Money {
	if o == nil {
		var ret Money
		return ret
	}

	return o.RefundAmount
}

// GetRefundAmountOk returns a tuple with the RefundAmount field value
// and a boolean to check if the value has been set.
func (o *RefundPromoInfo) GetRefundAmountOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefundAmount, true
}

// SetRefundAmount sets field value
func (o *RefundPromoInfo) SetRefundAmount(v Money) {
	o.RefundAmount = v
}

func (o RefundPromoInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefundPromoInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["promoId"] = o.PromoId
	toSerialize["promoName"] = o.PromoName
	toSerialize["promoType"] = o.PromoType
	toSerialize["refundAmount"] = o.RefundAmount
	return toSerialize, nil
}

func (o *RefundPromoInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"promoId",
		"promoName",
		"promoType",
		"refundAmount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRefundPromoInfo := _RefundPromoInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRefundPromoInfo)

	if err != nil {
		return err
	}

	*o = RefundPromoInfo(varRefundPromoInfo)

	return err
}

type NullableRefundPromoInfo struct {
	value *RefundPromoInfo
	isSet bool
}

func (v NullableRefundPromoInfo) Get() *RefundPromoInfo {
	return v.value
}

func (v *NullableRefundPromoInfo) Set(val *RefundPromoInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundPromoInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundPromoInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundPromoInfo(val *RefundPromoInfo) *NullableRefundPromoInfo {
	return &NullableRefundPromoInfo{value: val, isSet: true}
}

func (v NullableRefundPromoInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundPromoInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


