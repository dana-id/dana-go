// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package widget

/*
Widget API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	"bytes"
	"fmt"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the ApplyTokenRefreshTokenRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApplyTokenRefreshTokenRequest{}

// ApplyTokenRefreshTokenRequest struct for ApplyTokenRefreshTokenRequest
type ApplyTokenRefreshTokenRequest struct {
	// Additional information
	AdditionalInfo map[string]interface{} `json:"additionalInfo,omitempty"`
	// Apply token request type. The value is REFRESH_TOKEN
	GrantType string `json:"grantType"`
	// Authorization code. Please refer to https://dashboard.dana.id/api-docs/read/125. Required if grantType is AUTHORIZATION_CODE
	AuthCode *string `json:"authCode,omitempty"`
	// This token is used for refresh session if existing token has been expired
	RefreshToken string `json:"refreshToken"`
}

type _ApplyTokenRefreshTokenRequest ApplyTokenRefreshTokenRequest

// NewApplyTokenRefreshTokenRequest instantiates a new ApplyTokenRefreshTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplyTokenRefreshTokenRequest(grantType string, refreshToken string) *ApplyTokenRefreshTokenRequest {
	this := ApplyTokenRefreshTokenRequest{}
	this.GrantType = grantType
	this.RefreshToken = refreshToken
	return &this
}

// NewApplyTokenRefreshTokenRequestWithDefaults instantiates a new ApplyTokenRefreshTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyTokenRefreshTokenRequestWithDefaults() *ApplyTokenRefreshTokenRequest {
	this := ApplyTokenRefreshTokenRequest{}
	return &this
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *ApplyTokenRefreshTokenRequest) GetAdditionalInfo() map[string]interface{} {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTokenRefreshTokenRequest) GetAdditionalInfoOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.AdditionalInfo) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *ApplyTokenRefreshTokenRequest) HasAdditionalInfo() bool {
	if o != nil && !utils.IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given map[string]interface{} and assigns it to the AdditionalInfo field.
func (o *ApplyTokenRefreshTokenRequest) SetAdditionalInfo(v map[string]interface{}) {
	o.AdditionalInfo = v
}

// GetGrantType returns the GrantType field value
func (o *ApplyTokenRefreshTokenRequest) GetGrantType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrantType
}

// GetGrantTypeOk returns a tuple with the GrantType field value
// and a boolean to check if the value has been set.
func (o *ApplyTokenRefreshTokenRequest) GetGrantTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrantType, true
}

// SetGrantType sets field value
func (o *ApplyTokenRefreshTokenRequest) SetGrantType(v string) {
	o.GrantType = v
}

// GetAuthCode returns the AuthCode field value if set, zero value otherwise.
func (o *ApplyTokenRefreshTokenRequest) GetAuthCode() string {
	if o == nil || utils.IsNil(o.AuthCode) {
		var ret string
		return ret
	}
	return *o.AuthCode
}

// GetAuthCodeOk returns a tuple with the AuthCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTokenRefreshTokenRequest) GetAuthCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AuthCode) {
		return nil, false
	}
	return o.AuthCode, true
}

// HasAuthCode returns a boolean if a field has been set.
func (o *ApplyTokenRefreshTokenRequest) HasAuthCode() bool {
	if o != nil && !utils.IsNil(o.AuthCode) {
		return true
	}

	return false
}

// SetAuthCode gets a reference to the given string and assigns it to the AuthCode field.
func (o *ApplyTokenRefreshTokenRequest) SetAuthCode(v string) {
	o.AuthCode = &v
}

// GetRefreshToken returns the RefreshToken field value
func (o *ApplyTokenRefreshTokenRequest) GetRefreshToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
func (o *ApplyTokenRefreshTokenRequest) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshToken, true
}

// SetRefreshToken sets field value
func (o *ApplyTokenRefreshTokenRequest) SetRefreshToken(v string) {
	o.RefreshToken = v
}

func (o ApplyTokenRefreshTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyTokenRefreshTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AdditionalInfo) {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	toSerialize["grantType"] = o.GrantType
	if !utils.IsNil(o.AuthCode) {
		toSerialize["authCode"] = o.AuthCode
	}
	toSerialize["refreshToken"] = o.RefreshToken
	return toSerialize, nil
}

func (o *ApplyTokenRefreshTokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"grantType",
		"refreshToken",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplyTokenRefreshTokenRequest := _ApplyTokenRefreshTokenRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplyTokenRefreshTokenRequest)

	if err != nil {
		return err
	}

	*o = ApplyTokenRefreshTokenRequest(varApplyTokenRefreshTokenRequest)

	return err
}

type NullableApplyTokenRefreshTokenRequest struct {
	value *ApplyTokenRefreshTokenRequest
	isSet bool
}

func (v NullableApplyTokenRefreshTokenRequest) Get() *ApplyTokenRefreshTokenRequest {
	return v.value
}

func (v *NullableApplyTokenRefreshTokenRequest) Set(val *ApplyTokenRefreshTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyTokenRefreshTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyTokenRefreshTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyTokenRefreshTokenRequest(val *ApplyTokenRefreshTokenRequest) *NullableApplyTokenRefreshTokenRequest {
	return &NullableApplyTokenRefreshTokenRequest{value: val, isSet: true}
}

func (v NullableApplyTokenRefreshTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyTokenRefreshTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


