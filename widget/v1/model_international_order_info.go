// Copyright 2025 PT Espay Debit Indonesia Koe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package widget

/*
Widget API

API for enabling the user to make payment from merchant's platform with redirecting to DANA's platform.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


import (
	"encoding/json"
	utils "github.com/dana-id/dana-go/utils"
)

// checks if the InternationalOrderInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &InternationalOrderInfo{}

// InternationalOrderInfo Additional information for international orders (non-IDR currency transactions)
type InternationalOrderInfo struct {
	// Origin order amount in the original currency. Contains value (amount including cents) and currency (code based on ISO)
	OriginOrderAmount *Money `json:"originOrderAmount,omitempty"`
	ExchangeRate *InternationalOrderInfoExchangeRate `json:"exchangeRate,omitempty"`
	// Total amount after conversion. Contains value (amount including cents) and currency (code based on ISO)
	TotalAmount *Money `json:"totalAmount,omitempty"`
	// Define the detail of payment promo information, contains promotion that handled and set by merchant
	PaymentPromoInfo *PaymentPromoInfo `json:"paymentPromoInfo,omitempty"`
	// Define the detail of refund promo information
	RefundPromoInfo *RefundPromoInfo `json:"refundPromoInfo,omitempty"`
}

// NewInternationalOrderInfo instantiates a new InternationalOrderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternationalOrderInfo() *InternationalOrderInfo {
	this := InternationalOrderInfo{}
	return &this
}

// NewInternationalOrderInfoWithDefaults instantiates a new InternationalOrderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternationalOrderInfoWithDefaults() *InternationalOrderInfo {
	this := InternationalOrderInfo{}
	return &this
}

// GetOriginOrderAmount returns the OriginOrderAmount field value if set, zero value otherwise.
func (o *InternationalOrderInfo) GetOriginOrderAmount() Money {
	if o == nil || utils.IsNil(o.OriginOrderAmount) {
		var ret Money
		return ret
	}
	return *o.OriginOrderAmount
}

// GetOriginOrderAmountOk returns a tuple with the OriginOrderAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalOrderInfo) GetOriginOrderAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.OriginOrderAmount) {
		return nil, false
	}
	return o.OriginOrderAmount, true
}

// HasOriginOrderAmount returns a boolean if a field has been set.
func (o *InternationalOrderInfo) HasOriginOrderAmount() bool {
	if o != nil && !utils.IsNil(o.OriginOrderAmount) {
		return true
	}

	return false
}

// SetOriginOrderAmount gets a reference to the given Money and assigns it to the OriginOrderAmount field.
func (o *InternationalOrderInfo) SetOriginOrderAmount(v Money) {
	o.OriginOrderAmount = &v
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise.
func (o *InternationalOrderInfo) GetExchangeRate() InternationalOrderInfoExchangeRate {
	if o == nil || utils.IsNil(o.ExchangeRate) {
		var ret InternationalOrderInfoExchangeRate
		return ret
	}
	return *o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalOrderInfo) GetExchangeRateOk() (*InternationalOrderInfoExchangeRate, bool) {
	if o == nil || utils.IsNil(o.ExchangeRate) {
		return nil, false
	}
	return o.ExchangeRate, true
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *InternationalOrderInfo) HasExchangeRate() bool {
	if o != nil && !utils.IsNil(o.ExchangeRate) {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given InternationalOrderInfoExchangeRate and assigns it to the ExchangeRate field.
func (o *InternationalOrderInfo) SetExchangeRate(v InternationalOrderInfoExchangeRate) {
	o.ExchangeRate = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *InternationalOrderInfo) GetTotalAmount() Money {
	if o == nil || utils.IsNil(o.TotalAmount) {
		var ret Money
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalOrderInfo) GetTotalAmountOk() (*Money, bool) {
	if o == nil || utils.IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *InternationalOrderInfo) HasTotalAmount() bool {
	if o != nil && !utils.IsNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given Money and assigns it to the TotalAmount field.
func (o *InternationalOrderInfo) SetTotalAmount(v Money) {
	o.TotalAmount = &v
}

// GetPaymentPromoInfo returns the PaymentPromoInfo field value if set, zero value otherwise.
func (o *InternationalOrderInfo) GetPaymentPromoInfo() PaymentPromoInfo {
	if o == nil || utils.IsNil(o.PaymentPromoInfo) {
		var ret PaymentPromoInfo
		return ret
	}
	return *o.PaymentPromoInfo
}

// GetPaymentPromoInfoOk returns a tuple with the PaymentPromoInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalOrderInfo) GetPaymentPromoInfoOk() (*PaymentPromoInfo, bool) {
	if o == nil || utils.IsNil(o.PaymentPromoInfo) {
		return nil, false
	}
	return o.PaymentPromoInfo, true
}

// HasPaymentPromoInfo returns a boolean if a field has been set.
func (o *InternationalOrderInfo) HasPaymentPromoInfo() bool {
	if o != nil && !utils.IsNil(o.PaymentPromoInfo) {
		return true
	}

	return false
}

// SetPaymentPromoInfo gets a reference to the given PaymentPromoInfo and assigns it to the PaymentPromoInfo field.
func (o *InternationalOrderInfo) SetPaymentPromoInfo(v PaymentPromoInfo) {
	o.PaymentPromoInfo = &v
}

// GetRefundPromoInfo returns the RefundPromoInfo field value if set, zero value otherwise.
func (o *InternationalOrderInfo) GetRefundPromoInfo() RefundPromoInfo {
	if o == nil || utils.IsNil(o.RefundPromoInfo) {
		var ret RefundPromoInfo
		return ret
	}
	return *o.RefundPromoInfo
}

// GetRefundPromoInfoOk returns a tuple with the RefundPromoInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalOrderInfo) GetRefundPromoInfoOk() (*RefundPromoInfo, bool) {
	if o == nil || utils.IsNil(o.RefundPromoInfo) {
		return nil, false
	}
	return o.RefundPromoInfo, true
}

// HasRefundPromoInfo returns a boolean if a field has been set.
func (o *InternationalOrderInfo) HasRefundPromoInfo() bool {
	if o != nil && !utils.IsNil(o.RefundPromoInfo) {
		return true
	}

	return false
}

// SetRefundPromoInfo gets a reference to the given RefundPromoInfo and assigns it to the RefundPromoInfo field.
func (o *InternationalOrderInfo) SetRefundPromoInfo(v RefundPromoInfo) {
	o.RefundPromoInfo = &v
}

func (o InternationalOrderInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InternationalOrderInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.OriginOrderAmount) {
		toSerialize["originOrderAmount"] = o.OriginOrderAmount
	}
	if !utils.IsNil(o.ExchangeRate) {
		toSerialize["exchangeRate"] = o.ExchangeRate
	}
	if !utils.IsNil(o.TotalAmount) {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	if !utils.IsNil(o.PaymentPromoInfo) {
		toSerialize["paymentPromoInfo"] = o.PaymentPromoInfo
	}
	if !utils.IsNil(o.RefundPromoInfo) {
		toSerialize["refundPromoInfo"] = o.RefundPromoInfo
	}
	return toSerialize, nil
}

type NullableInternationalOrderInfo struct {
	value *InternationalOrderInfo
	isSet bool
}

func (v NullableInternationalOrderInfo) Get() *InternationalOrderInfo {
	return v.value
}

func (v *NullableInternationalOrderInfo) Set(val *InternationalOrderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableInternationalOrderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableInternationalOrderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternationalOrderInfo(val *InternationalOrderInfo) *NullableInternationalOrderInfo {
	return &NullableInternationalOrderInfo{value: val, isSet: true}
}

func (v NullableInternationalOrderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternationalOrderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


